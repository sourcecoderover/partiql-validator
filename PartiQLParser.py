# Generated from PartiQL.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,310,1572,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,1,0,1,0,1,0,1,0,1,0,5,0,242,
        8,0,10,0,12,0,245,9,0,1,0,1,0,3,0,249,8,0,3,0,251,8,0,1,0,1,0,1,
        1,1,1,3,1,257,8,1,1,1,1,1,1,1,1,1,3,1,263,8,1,1,1,1,1,1,1,1,1,3,
        1,269,8,1,1,1,1,1,1,1,1,1,3,1,275,8,1,1,1,1,1,3,1,279,8,1,1,2,1,
        2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,
        8,1,8,1,8,1,8,5,8,302,8,8,10,8,12,8,305,9,8,3,8,307,8,8,1,9,1,9,
        3,9,311,8,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,
        10,5,10,324,8,10,10,10,12,10,327,9,10,1,10,1,10,3,10,331,8,10,1,
        11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,342,8,11,1,12,1,
        12,4,12,346,8,12,11,12,12,12,347,1,12,3,12,351,8,12,1,12,3,12,354,
        8,12,1,12,1,12,3,12,358,8,12,1,12,4,12,361,8,12,11,12,12,12,362,
        1,12,3,12,366,8,12,1,12,1,12,1,12,3,12,371,8,12,1,13,1,13,1,13,1,
        13,1,13,3,13,378,8,13,1,14,1,14,5,14,382,8,14,10,14,12,14,385,9,
        14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,397,8,
        15,1,16,1,16,1,16,1,16,3,16,403,8,16,1,16,1,16,1,17,1,17,1,17,1,
        17,3,17,411,8,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,
        19,1,19,1,19,3,19,425,8,19,1,19,3,19,428,8,19,1,19,3,19,431,8,19,
        1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,440,8,20,1,20,3,20,443,8,
        20,1,20,1,20,1,20,1,20,3,20,449,8,20,1,20,1,20,3,20,453,8,20,3,20,
        455,8,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,
        467,8,21,1,21,3,21,470,8,21,1,22,1,22,1,22,1,22,5,22,476,8,22,10,
        22,12,22,479,9,22,1,22,1,22,1,22,1,22,1,22,3,22,486,8,22,1,23,1,
        23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,3,24,498,8,24,1,25,1,
        25,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,28,5,28,511,8,28,10,
        28,12,28,514,9,28,1,29,1,29,1,29,1,29,1,30,1,30,1,30,3,30,523,8,
        30,1,30,3,30,526,8,30,1,31,1,31,1,31,1,31,5,31,532,8,31,10,31,12,
        31,535,9,31,1,32,1,32,1,32,1,32,1,32,1,32,3,32,543,8,32,1,33,1,33,
        1,33,3,33,548,8,33,1,33,3,33,551,8,33,1,33,3,33,554,8,33,1,33,1,
        33,1,33,1,33,3,33,560,8,33,1,34,1,34,1,34,1,35,1,35,3,35,567,8,35,
        1,35,1,35,1,35,3,35,572,8,35,1,35,1,35,1,35,3,35,577,8,35,1,35,1,
        35,1,35,1,35,1,35,1,35,1,35,3,35,586,8,35,1,36,1,36,1,36,5,36,591,
        8,36,10,36,12,36,594,9,36,1,37,1,37,3,37,598,8,37,1,37,3,37,601,
        8,37,1,38,1,38,1,39,1,39,1,39,1,39,5,39,609,8,39,10,39,12,39,612,
        9,39,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,5,41,623,8,41,
        10,41,12,41,626,9,41,1,42,1,42,3,42,630,8,42,1,42,1,42,3,42,634,
        8,42,1,43,1,43,3,43,638,8,43,1,43,1,43,1,43,1,43,5,43,644,8,43,10,
        43,12,43,647,9,43,1,43,3,43,650,8,43,1,44,1,44,1,44,1,44,1,45,1,
        45,1,45,3,45,659,8,45,1,46,1,46,1,46,3,46,664,8,46,1,46,3,46,667,
        8,46,1,46,1,46,1,47,1,47,1,47,1,47,1,47,5,47,676,8,47,10,47,12,47,
        679,9,47,1,48,1,48,1,48,1,48,1,48,5,48,686,8,48,10,48,12,48,689,
        9,48,1,49,1,49,1,49,1,50,1,50,1,50,1,51,1,51,1,51,1,52,1,52,1,52,
        1,53,1,53,1,53,1,54,3,54,707,8,54,1,54,1,54,1,55,3,55,712,8,55,1,
        55,1,55,1,55,5,55,717,8,55,10,55,12,55,720,9,55,1,56,3,56,723,8,
        56,1,56,3,56,726,8,56,1,56,5,56,729,8,56,10,56,12,56,732,9,56,1,
        57,1,57,1,57,3,57,737,8,57,1,58,1,58,1,58,1,58,3,58,743,8,58,1,58,
        1,58,1,58,3,58,748,8,58,3,58,750,8,58,1,59,1,59,1,59,1,60,1,60,1,
        61,1,61,3,61,759,8,61,1,61,3,61,762,8,61,1,61,3,61,765,8,61,1,61,
        1,61,1,62,1,62,3,62,771,8,62,1,62,1,62,3,62,775,8,62,3,62,777,8,
        62,1,63,1,63,3,63,781,8,63,1,63,3,63,784,8,63,1,63,4,63,787,8,63,
        11,63,12,63,788,1,63,3,63,792,8,63,1,63,1,63,3,63,796,8,63,1,63,
        1,63,3,63,800,8,63,1,63,3,63,803,8,63,1,63,4,63,806,8,63,11,63,12,
        63,807,1,63,3,63,811,8,63,1,63,1,63,3,63,815,8,63,3,63,817,8,63,
        1,64,1,64,1,64,1,64,1,64,3,64,824,8,64,1,64,3,64,827,8,64,1,65,1,
        65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,
        65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,
        65,1,65,1,65,1,65,1,65,1,65,1,65,3,65,863,8,65,1,66,1,66,3,66,867,
        8,66,1,66,3,66,870,8,66,1,66,3,66,873,8,66,1,66,1,66,1,67,1,67,1,
        67,1,68,1,68,1,68,1,68,1,68,1,68,3,68,886,8,68,1,68,1,68,3,68,890,
        8,68,3,68,892,8,68,1,69,1,69,1,69,1,69,1,69,1,69,3,69,900,8,69,1,
        69,1,69,3,69,904,8,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,3,
        69,914,8,69,1,69,1,69,1,69,1,69,5,69,920,8,69,10,69,12,69,923,9,
        69,1,70,1,70,3,70,927,8,70,1,71,1,71,1,71,1,71,1,71,3,71,934,8,71,
        1,71,3,71,937,8,71,1,71,3,71,940,8,71,1,71,1,71,3,71,944,8,71,1,
        71,3,71,947,8,71,1,71,3,71,950,8,71,3,71,952,8,71,1,72,1,72,1,72,
        3,72,957,8,72,1,72,3,72,960,8,72,1,72,3,72,963,8,72,1,73,1,73,1,
        73,1,73,1,73,3,73,970,8,73,1,74,1,74,1,74,1,75,1,75,1,75,3,75,978,
        8,75,1,75,1,75,3,75,982,8,75,1,75,1,75,3,75,986,8,75,1,75,3,75,989,
        8,75,1,76,1,76,1,77,1,77,1,77,1,77,1,77,3,77,998,8,77,1,77,1,77,
        3,77,1002,8,77,1,77,1,77,1,77,3,77,1007,8,77,1,77,1,77,3,77,1011,
        8,77,1,77,1,77,1,77,3,77,1016,8,77,1,77,1,77,3,77,1020,8,77,1,77,
        5,77,1023,8,77,10,77,12,77,1026,9,77,1,78,1,78,1,78,3,78,1031,8,
        78,1,78,3,78,1034,8,78,1,78,3,78,1037,8,78,1,78,3,78,1040,8,78,1,
        78,3,78,1043,8,78,1,78,3,78,1046,8,78,1,78,3,78,1049,8,78,1,78,3,
        78,1052,8,78,1,79,1,79,1,79,1,79,1,79,1,79,5,79,1060,8,79,10,79,
        12,79,1063,9,79,1,80,1,80,1,80,1,80,1,80,1,80,5,80,1071,8,80,10,
        80,12,80,1074,9,80,1,81,1,81,1,81,3,81,1079,8,81,1,82,1,82,1,82,
        1,82,1,82,1,82,1,82,1,82,1,82,3,82,1090,8,82,1,82,1,82,1,82,3,82,
        1095,8,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,1104,8,82,1,82,
        1,82,1,82,1,82,3,82,1110,8,82,1,82,1,82,1,82,1,82,3,82,1116,8,82,
        1,82,1,82,3,82,1120,8,82,1,82,1,82,1,82,1,82,1,82,5,82,1127,8,82,
        10,82,12,82,1130,9,82,1,83,1,83,1,83,1,83,1,83,1,83,5,83,1138,8,
        83,10,83,12,83,1141,9,83,1,84,1,84,1,84,1,84,1,84,1,84,5,84,1149,
        8,84,10,84,12,84,1152,9,84,1,85,1,85,1,85,1,85,1,85,1,85,5,85,1160,
        8,85,10,85,12,85,1163,9,85,1,86,1,86,1,86,3,86,1168,8,86,1,87,1,
        87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,
        87,1,87,1,87,1,87,1,87,3,87,1189,8,87,1,87,1,87,4,87,1193,8,87,11,
        87,12,87,1194,5,87,1197,8,87,10,87,12,87,1200,9,87,1,88,1,88,1,88,
        1,88,1,88,1,88,1,88,1,88,1,88,3,88,1211,8,88,1,89,1,89,1,89,1,89,
        1,89,1,89,1,89,1,90,1,90,1,90,1,90,1,90,5,90,1225,8,90,10,90,12,
        90,1228,9,90,1,90,1,90,1,91,1,91,3,91,1234,8,91,1,91,1,91,1,91,1,
        91,1,91,4,91,1241,8,91,11,91,12,91,1242,1,91,1,91,3,91,1247,8,91,
        1,91,1,91,1,92,1,92,1,92,1,92,5,92,1255,8,92,10,92,12,92,1258,9,
        92,1,93,1,93,1,93,1,93,5,93,1264,8,93,10,93,12,93,1267,9,93,1,93,
        1,93,1,94,1,94,1,94,1,94,4,94,1275,8,94,11,94,12,94,1276,1,94,1,
        94,1,95,1,95,1,95,1,95,1,95,5,95,1286,8,95,10,95,12,95,1289,9,95,
        3,95,1291,8,95,1,95,1,95,1,96,1,96,1,96,1,96,1,96,1,96,1,96,3,96,
        1302,8,96,3,96,1304,8,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,
        1,96,3,96,1315,8,96,3,96,1317,8,96,1,96,1,96,3,96,1321,8,96,1,97,
        1,97,1,97,1,97,1,97,1,97,1,97,3,97,1330,8,97,1,97,1,97,1,97,3,97,
        1335,8,97,1,98,1,98,1,98,1,98,1,98,1,98,1,98,3,98,1344,8,98,3,98,
        1346,8,98,1,98,1,98,1,98,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,100,
        1,100,1,100,1,100,1,100,1,100,1,100,1,101,1,101,1,101,1,101,1,101,
        1,101,1,101,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,103,1,103,
        1,103,3,103,1382,8,103,1,103,3,103,1385,8,103,1,103,3,103,1388,8,
        103,1,103,1,103,1,103,1,104,1,104,1,104,1,104,1,104,1,104,1,104,
        1,104,1,104,1,105,1,105,1,105,1,105,1,105,5,105,1407,8,105,10,105,
        12,105,1410,9,105,3,105,1412,8,105,1,105,1,105,1,105,1,105,1,105,
        1,105,5,105,1420,8,105,10,105,12,105,1423,9,105,3,105,1425,8,105,
        1,105,1,105,3,105,1429,8,105,1,106,1,106,1,106,1,106,1,106,1,106,
        1,106,1,106,1,106,1,106,1,106,3,106,1442,8,106,1,107,1,107,1,107,
        1,107,1,107,1,107,1,108,1,108,1,108,1,108,1,109,1,109,1,110,3,110,
        1457,8,110,1,110,1,110,1,111,1,111,3,111,1463,8,111,1,112,1,112,
        1,112,1,112,5,112,1469,8,112,10,112,12,112,1472,9,112,3,112,1474,
        8,112,1,112,1,112,1,113,1,113,1,113,1,113,5,113,1482,8,113,10,113,
        12,113,1485,9,113,3,113,1487,8,113,1,113,1,113,1,114,1,114,1,114,
        1,114,5,114,1495,8,114,10,114,12,114,1498,9,114,3,114,1500,8,114,
        1,114,1,114,1,115,1,115,1,115,1,115,1,116,1,116,1,116,1,116,1,116,
        1,116,1,116,1,116,1,116,1,116,1,116,1,116,1,116,1,116,3,116,1522,
        8,116,1,116,1,116,1,116,3,116,1527,8,116,1,116,3,116,1530,8,116,
        1,117,1,117,1,117,1,117,1,117,1,117,1,117,3,117,1539,8,117,1,117,
        1,117,1,117,1,117,1,117,3,117,1546,8,117,1,117,1,117,1,117,1,117,
        1,117,3,117,1553,8,117,1,117,3,117,1556,8,117,1,117,1,117,1,117,
        1,117,3,117,1562,8,117,1,117,1,117,1,117,3,117,1567,8,117,1,117,
        3,117,1570,8,117,1,117,0,9,138,154,158,160,164,166,168,170,174,118,
        0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,
        46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,
        90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,
        126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,
        158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,
        190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,
        222,224,226,228,230,232,234,0,19,1,0,303,304,2,0,4,4,247,247,1,0,
        248,249,2,0,4,4,67,67,2,0,11,11,62,62,2,0,90,90,123,123,2,0,4,4,
        8,8,2,0,271,271,277,277,2,0,281,284,286,287,1,0,271,272,2,0,273,
        274,277,277,1,0,266,267,4,0,15,15,44,44,131,132,196,196,1,0,230,
        231,1,0,86,87,8,0,19,19,28,29,44,44,82,82,129,129,145,145,187,187,
        213,213,10,0,8,8,26,27,53,53,113,114,141,141,170,170,188,188,202,
        202,236,236,251,268,3,0,26,27,91,91,220,220,2,0,55,56,144,144,1723,
        0,250,1,0,0,0,2,278,1,0,0,0,4,280,1,0,0,0,6,283,1,0,0,0,8,286,1,
        0,0,0,10,289,1,0,0,0,12,292,1,0,0,0,14,294,1,0,0,0,16,296,1,0,0,
        0,18,310,1,0,0,0,20,330,1,0,0,0,22,341,1,0,0,0,24,370,1,0,0,0,26,
        377,1,0,0,0,28,379,1,0,0,0,30,396,1,0,0,0,32,398,1,0,0,0,34,406,
        1,0,0,0,36,414,1,0,0,0,38,417,1,0,0,0,40,454,1,0,0,0,42,469,1,0,
        0,0,44,485,1,0,0,0,46,487,1,0,0,0,48,497,1,0,0,0,50,499,1,0,0,0,
        52,501,1,0,0,0,54,503,1,0,0,0,56,506,1,0,0,0,58,515,1,0,0,0,60,519,
        1,0,0,0,62,527,1,0,0,0,64,542,1,0,0,0,66,559,1,0,0,0,68,561,1,0,
        0,0,70,585,1,0,0,0,72,587,1,0,0,0,74,595,1,0,0,0,76,602,1,0,0,0,
        78,604,1,0,0,0,80,613,1,0,0,0,82,617,1,0,0,0,84,627,1,0,0,0,86,635,
        1,0,0,0,88,651,1,0,0,0,90,655,1,0,0,0,92,660,1,0,0,0,94,670,1,0,
        0,0,96,680,1,0,0,0,98,690,1,0,0,0,100,693,1,0,0,0,102,696,1,0,0,
        0,104,699,1,0,0,0,106,702,1,0,0,0,108,706,1,0,0,0,110,711,1,0,0,
        0,112,722,1,0,0,0,114,736,1,0,0,0,116,749,1,0,0,0,118,751,1,0,0,
        0,120,754,1,0,0,0,122,756,1,0,0,0,124,776,1,0,0,0,126,816,1,0,0,
        0,128,826,1,0,0,0,130,862,1,0,0,0,132,864,1,0,0,0,134,876,1,0,0,
        0,136,891,1,0,0,0,138,899,1,0,0,0,140,926,1,0,0,0,142,951,1,0,0,
        0,144,953,1,0,0,0,146,969,1,0,0,0,148,971,1,0,0,0,150,988,1,0,0,
        0,152,990,1,0,0,0,154,992,1,0,0,0,156,1051,1,0,0,0,158,1053,1,0,
        0,0,160,1064,1,0,0,0,162,1078,1,0,0,0,164,1080,1,0,0,0,166,1131,
        1,0,0,0,168,1142,1,0,0,0,170,1153,1,0,0,0,172,1167,1,0,0,0,174,1188,
        1,0,0,0,176,1210,1,0,0,0,178,1212,1,0,0,0,180,1219,1,0,0,0,182,1231,
        1,0,0,0,184,1250,1,0,0,0,186,1259,1,0,0,0,188,1270,1,0,0,0,190,1280,
        1,0,0,0,192,1320,1,0,0,0,194,1334,1,0,0,0,196,1336,1,0,0,0,198,1350,
        1,0,0,0,200,1357,1,0,0,0,202,1364,1,0,0,0,204,1371,1,0,0,0,206,1378,
        1,0,0,0,208,1392,1,0,0,0,210,1428,1,0,0,0,212,1441,1,0,0,0,214,1443,
        1,0,0,0,216,1449,1,0,0,0,218,1453,1,0,0,0,220,1456,1,0,0,0,222,1462,
        1,0,0,0,224,1464,1,0,0,0,226,1477,1,0,0,0,228,1490,1,0,0,0,230,1503,
        1,0,0,0,232,1529,1,0,0,0,234,1569,1,0,0,0,236,248,5,83,0,0,237,238,
        5,294,0,0,238,243,3,4,2,0,239,240,5,270,0,0,240,242,3,4,2,0,241,
        239,1,0,0,0,242,245,1,0,0,0,243,241,1,0,0,0,243,244,1,0,0,0,244,
        246,1,0,0,0,245,243,1,0,0,0,246,247,5,295,0,0,247,249,1,0,0,0,248,
        237,1,0,0,0,248,249,1,0,0,0,249,251,1,0,0,0,250,236,1,0,0,0,250,
        251,1,0,0,0,251,252,1,0,0,0,252,253,3,2,1,0,253,1,1,0,0,0,254,256,
        3,14,7,0,255,257,5,297,0,0,256,255,1,0,0,0,256,257,1,0,0,0,257,258,
        1,0,0,0,258,259,5,0,0,1,259,279,1,0,0,0,260,262,3,24,12,0,261,263,
        5,297,0,0,262,261,1,0,0,0,262,263,1,0,0,0,263,264,1,0,0,0,264,265,
        5,0,0,1,265,279,1,0,0,0,266,268,3,18,9,0,267,269,5,297,0,0,268,267,
        1,0,0,0,268,269,1,0,0,0,269,270,1,0,0,0,270,271,5,0,0,1,271,279,
        1,0,0,0,272,274,3,16,8,0,273,275,5,297,0,0,274,273,1,0,0,0,274,275,
        1,0,0,0,275,276,1,0,0,0,276,277,5,0,0,1,277,279,1,0,0,0,278,254,
        1,0,0,0,278,260,1,0,0,0,278,266,1,0,0,0,278,272,1,0,0,0,279,3,1,
        0,0,0,280,281,5,303,0,0,281,282,5,303,0,0,282,5,1,0,0,0,283,284,
        5,10,0,0,284,285,3,12,6,0,285,7,1,0,0,0,286,287,5,13,0,0,287,288,
        3,12,6,0,288,9,1,0,0,0,289,290,5,20,0,0,290,291,3,12,6,0,291,11,
        1,0,0,0,292,293,7,0,0,0,293,13,1,0,0,0,294,295,3,152,76,0,295,15,
        1,0,0,0,296,297,5,80,0,0,297,306,3,152,76,0,298,303,3,152,76,0,299,
        300,5,270,0,0,300,302,3,152,76,0,301,299,1,0,0,0,302,305,1,0,0,0,
        303,301,1,0,0,0,303,304,1,0,0,0,304,307,1,0,0,0,305,303,1,0,0,0,
        306,298,1,0,0,0,306,307,1,0,0,0,307,17,1,0,0,0,308,311,3,20,10,0,
        309,311,3,22,11,0,310,308,1,0,0,0,310,309,1,0,0,0,311,19,1,0,0,0,
        312,313,5,45,0,0,313,314,5,198,0,0,314,331,3,12,6,0,315,316,5,45,
        0,0,316,317,5,242,0,0,317,318,5,147,0,0,318,319,3,12,6,0,319,320,
        5,294,0,0,320,325,3,28,14,0,321,322,5,270,0,0,322,324,3,28,14,0,
        323,321,1,0,0,0,324,327,1,0,0,0,325,323,1,0,0,0,325,326,1,0,0,0,
        326,328,1,0,0,0,327,325,1,0,0,0,328,329,5,295,0,0,329,331,1,0,0,
        0,330,312,1,0,0,0,330,315,1,0,0,0,331,21,1,0,0,0,332,333,5,70,0,
        0,333,334,5,198,0,0,334,342,3,12,6,0,335,336,5,70,0,0,336,337,5,
        242,0,0,337,338,3,12,6,0,338,339,5,147,0,0,339,340,3,12,6,0,340,
        342,1,0,0,0,341,332,1,0,0,0,341,335,1,0,0,0,342,23,1,0,0,0,343,345,
        3,54,27,0,344,346,3,26,13,0,345,344,1,0,0,0,346,347,1,0,0,0,347,
        345,1,0,0,0,347,348,1,0,0,0,348,350,1,0,0,0,349,351,3,68,34,0,350,
        349,1,0,0,0,350,351,1,0,0,0,351,353,1,0,0,0,352,354,3,62,31,0,353,
        352,1,0,0,0,353,354,1,0,0,0,354,371,1,0,0,0,355,357,3,100,50,0,356,
        358,3,68,34,0,357,356,1,0,0,0,357,358,1,0,0,0,358,360,1,0,0,0,359,
        361,3,26,13,0,360,359,1,0,0,0,361,362,1,0,0,0,362,360,1,0,0,0,362,
        363,1,0,0,0,363,365,1,0,0,0,364,366,3,62,31,0,365,364,1,0,0,0,365,
        366,1,0,0,0,366,371,1,0,0,0,367,371,3,60,30,0,368,371,3,38,19,0,
        369,371,3,26,13,0,370,343,1,0,0,0,370,355,1,0,0,0,370,367,1,0,0,
        0,370,368,1,0,0,0,370,369,1,0,0,0,371,25,1,0,0,0,372,378,3,40,20,
        0,373,378,3,56,28,0,374,378,3,32,16,0,375,378,3,36,18,0,376,378,
        3,34,17,0,377,372,1,0,0,0,377,373,1,0,0,0,377,374,1,0,0,0,377,375,
        1,0,0,0,377,376,1,0,0,0,378,27,1,0,0,0,379,383,3,12,6,0,380,382,
        3,30,15,0,381,380,1,0,0,0,382,385,1,0,0,0,383,381,1,0,0,0,383,384,
        1,0,0,0,384,29,1,0,0,0,385,383,1,0,0,0,386,387,5,290,0,0,387,388,
        3,232,116,0,388,389,5,291,0,0,389,397,1,0,0,0,390,391,5,290,0,0,
        391,392,3,12,6,0,392,393,5,291,0,0,393,397,1,0,0,0,394,395,5,299,
        0,0,395,397,3,12,6,0,396,386,1,0,0,0,396,390,1,0,0,0,396,394,1,0,
        0,0,397,31,1,0,0,0,398,399,5,173,0,0,399,400,5,117,0,0,400,402,3,
        12,6,0,401,403,3,6,3,0,402,401,1,0,0,0,402,403,1,0,0,0,403,404,1,
        0,0,0,404,405,3,152,76,0,405,33,1,0,0,0,406,407,5,214,0,0,407,408,
        5,117,0,0,408,410,3,12,6,0,409,411,3,6,3,0,410,409,1,0,0,0,410,411,
        1,0,0,0,411,412,1,0,0,0,412,413,3,152,76,0,413,35,1,0,0,0,414,415,
        5,241,0,0,415,416,3,28,14,0,416,37,1,0,0,0,417,418,5,112,0,0,418,
        419,5,117,0,0,419,420,3,28,14,0,420,421,5,218,0,0,421,424,3,152,
        76,0,422,423,5,13,0,0,423,425,3,152,76,0,424,422,1,0,0,0,424,425,
        1,0,0,0,425,427,1,0,0,0,426,428,3,42,21,0,427,426,1,0,0,0,427,428,
        1,0,0,0,428,430,1,0,0,0,429,431,3,62,31,0,430,429,1,0,0,0,430,431,
        1,0,0,0,431,39,1,0,0,0,432,433,5,112,0,0,433,434,5,117,0,0,434,435,
        3,28,14,0,435,436,5,218,0,0,436,439,3,152,76,0,437,438,5,13,0,0,
        438,440,3,152,76,0,439,437,1,0,0,0,439,440,1,0,0,0,440,442,1,0,0,
        0,441,443,3,42,21,0,442,441,1,0,0,0,442,443,1,0,0,0,443,455,1,0,
        0,0,444,445,5,112,0,0,445,446,5,117,0,0,446,448,3,12,6,0,447,449,
        3,6,3,0,448,447,1,0,0,0,448,449,1,0,0,0,449,450,1,0,0,0,450,452,
        3,152,76,0,451,453,3,42,21,0,452,451,1,0,0,0,452,453,1,0,0,0,453,
        455,1,0,0,0,454,432,1,0,0,0,454,444,1,0,0,0,455,41,1,0,0,0,456,457,
        5,147,0,0,457,458,5,244,0,0,458,459,5,225,0,0,459,460,3,152,76,0,
        460,461,5,245,0,0,461,462,5,250,0,0,462,470,1,0,0,0,463,464,5,147,
        0,0,464,466,5,244,0,0,465,467,3,44,22,0,466,465,1,0,0,0,466,467,
        1,0,0,0,467,468,1,0,0,0,468,470,3,48,24,0,469,456,1,0,0,0,469,463,
        1,0,0,0,470,43,1,0,0,0,471,472,5,294,0,0,472,477,3,12,6,0,473,474,
        5,270,0,0,474,476,3,12,6,0,475,473,1,0,0,0,476,479,1,0,0,0,477,475,
        1,0,0,0,477,478,1,0,0,0,478,480,1,0,0,0,479,477,1,0,0,0,480,481,
        5,295,0,0,481,486,1,0,0,0,482,483,5,147,0,0,483,484,5,39,0,0,484,
        486,3,46,23,0,485,471,1,0,0,0,485,482,1,0,0,0,486,45,1,0,0,0,487,
        488,3,12,6,0,488,47,1,0,0,0,489,490,5,245,0,0,490,498,5,250,0,0,
        491,492,5,245,0,0,492,493,5,173,0,0,493,498,3,50,25,0,494,495,5,
        245,0,0,495,496,5,212,0,0,496,498,3,52,26,0,497,489,1,0,0,0,497,
        491,1,0,0,0,497,494,1,0,0,0,498,49,1,0,0,0,499,500,5,79,0,0,500,
        51,1,0,0,0,501,502,5,79,0,0,502,53,1,0,0,0,503,504,5,212,0,0,504,
        505,3,142,71,0,505,55,1,0,0,0,506,507,5,185,0,0,507,512,3,58,29,
        0,508,509,5,270,0,0,509,511,3,58,29,0,510,508,1,0,0,0,511,514,1,
        0,0,0,512,510,1,0,0,0,512,513,1,0,0,0,513,57,1,0,0,0,514,512,1,0,
        0,0,515,516,3,28,14,0,516,517,5,283,0,0,517,518,3,152,76,0,518,59,
        1,0,0,0,519,520,5,61,0,0,520,522,3,66,33,0,521,523,3,68,34,0,522,
        521,1,0,0,0,522,523,1,0,0,0,523,525,1,0,0,0,524,526,3,62,31,0,525,
        524,1,0,0,0,525,526,1,0,0,0,526,61,1,0,0,0,527,528,5,246,0,0,528,
        533,3,64,32,0,529,530,5,270,0,0,530,532,3,64,32,0,531,529,1,0,0,
        0,532,535,1,0,0,0,533,531,1,0,0,0,533,534,1,0,0,0,534,63,1,0,0,0,
        535,533,1,0,0,0,536,537,7,1,0,0,537,538,7,2,0,0,538,543,5,277,0,
        0,539,540,7,1,0,0,540,541,7,2,0,0,541,543,3,152,76,0,542,536,1,0,
        0,0,542,539,1,0,0,0,543,65,1,0,0,0,544,545,5,95,0,0,545,547,3,28,
        14,0,546,548,3,6,3,0,547,546,1,0,0,0,547,548,1,0,0,0,548,550,1,0,
        0,0,549,551,3,8,4,0,550,549,1,0,0,0,550,551,1,0,0,0,551,553,1,0,
        0,0,552,554,3,10,5,0,553,552,1,0,0,0,553,554,1,0,0,0,554,560,1,0,
        0,0,555,556,5,95,0,0,556,557,3,28,14,0,557,558,3,12,6,0,558,560,
        1,0,0,0,559,544,1,0,0,0,559,555,1,0,0,0,560,67,1,0,0,0,561,562,5,
        225,0,0,562,563,3,152,76,0,563,69,1,0,0,0,564,566,5,182,0,0,565,
        567,3,76,38,0,566,565,1,0,0,0,566,567,1,0,0,0,567,568,1,0,0,0,568,
        586,5,277,0,0,569,571,5,182,0,0,570,572,3,76,38,0,571,570,1,0,0,
        0,571,572,1,0,0,0,572,573,1,0,0,0,573,586,3,72,36,0,574,576,5,182,
        0,0,575,577,3,76,38,0,576,575,1,0,0,0,576,577,1,0,0,0,577,578,1,
        0,0,0,578,579,5,218,0,0,579,586,3,152,76,0,580,581,5,237,0,0,581,
        582,3,152,76,0,582,583,5,13,0,0,583,584,3,152,76,0,584,586,1,0,0,
        0,585,564,1,0,0,0,585,569,1,0,0,0,585,574,1,0,0,0,585,580,1,0,0,
        0,586,71,1,0,0,0,587,592,3,74,37,0,588,589,5,270,0,0,589,591,3,74,
        37,0,590,588,1,0,0,0,591,594,1,0,0,0,592,590,1,0,0,0,592,593,1,0,
        0,0,593,73,1,0,0,0,594,592,1,0,0,0,595,600,3,152,76,0,596,598,5,
        10,0,0,597,596,1,0,0,0,597,598,1,0,0,0,598,599,1,0,0,0,599,601,3,
        12,6,0,600,597,1,0,0,0,600,601,1,0,0,0,601,75,1,0,0,0,602,603,7,
        3,0,0,603,77,1,0,0,0,604,605,5,243,0,0,605,610,3,80,40,0,606,607,
        5,270,0,0,607,609,3,80,40,0,608,606,1,0,0,0,609,612,1,0,0,0,610,
        608,1,0,0,0,610,611,1,0,0,0,611,79,1,0,0,0,612,610,1,0,0,0,613,614,
        3,152,76,0,614,615,5,10,0,0,615,616,3,12,6,0,616,81,1,0,0,0,617,
        618,5,152,0,0,618,619,5,20,0,0,619,624,3,84,42,0,620,621,5,270,0,
        0,621,623,3,84,42,0,622,620,1,0,0,0,623,626,1,0,0,0,624,622,1,0,
        0,0,624,625,1,0,0,0,625,83,1,0,0,0,626,624,1,0,0,0,627,629,3,152,
        76,0,628,630,7,4,0,0,629,628,1,0,0,0,629,630,1,0,0,0,630,633,1,0,
        0,0,631,632,5,142,0,0,632,634,7,5,0,0,633,631,1,0,0,0,633,634,1,
        0,0,0,634,85,1,0,0,0,635,637,5,102,0,0,636,638,5,158,0,0,637,636,
        1,0,0,0,637,638,1,0,0,0,638,639,1,0,0,0,639,640,5,20,0,0,640,645,
        3,90,45,0,641,642,5,270,0,0,642,644,3,90,45,0,643,641,1,0,0,0,644,
        647,1,0,0,0,645,643,1,0,0,0,645,646,1,0,0,0,646,649,1,0,0,0,647,
        645,1,0,0,0,648,650,3,88,44,0,649,648,1,0,0,0,649,650,1,0,0,0,650,
        87,1,0,0,0,651,652,5,102,0,0,652,653,5,10,0,0,653,654,3,12,6,0,654,
        89,1,0,0,0,655,658,3,156,78,0,656,657,5,10,0,0,657,659,3,12,6,0,
        658,656,1,0,0,0,658,659,1,0,0,0,659,91,1,0,0,0,660,661,5,232,0,0,
        661,663,5,294,0,0,662,664,3,94,47,0,663,662,1,0,0,0,663,664,1,0,
        0,0,664,666,1,0,0,0,665,667,3,96,48,0,666,665,1,0,0,0,666,667,1,
        0,0,0,667,668,1,0,0,0,668,669,5,295,0,0,669,93,1,0,0,0,670,671,5,
        233,0,0,671,672,5,20,0,0,672,677,3,152,76,0,673,674,5,270,0,0,674,
        676,3,152,76,0,675,673,1,0,0,0,676,679,1,0,0,0,677,675,1,0,0,0,677,
        678,1,0,0,0,678,95,1,0,0,0,679,677,1,0,0,0,680,681,5,152,0,0,681,
        682,5,20,0,0,682,687,3,84,42,0,683,684,5,270,0,0,684,686,3,84,42,
        0,685,683,1,0,0,0,686,689,1,0,0,0,687,685,1,0,0,0,687,688,1,0,0,
        0,688,97,1,0,0,0,689,687,1,0,0,0,690,691,5,103,0,0,691,692,3,156,
        78,0,692,99,1,0,0,0,693,694,5,95,0,0,694,695,3,138,69,0,695,101,
        1,0,0,0,696,697,5,225,0,0,697,698,3,156,78,0,698,103,1,0,0,0,699,
        700,5,240,0,0,700,701,3,156,78,0,701,105,1,0,0,0,702,703,5,239,0,
        0,703,704,3,156,78,0,704,107,1,0,0,0,705,707,3,116,58,0,706,705,
        1,0,0,0,706,707,1,0,0,0,707,708,1,0,0,0,708,709,3,112,56,0,709,109,
        1,0,0,0,710,712,3,116,58,0,711,710,1,0,0,0,711,712,1,0,0,0,712,713,
        1,0,0,0,713,718,3,112,56,0,714,715,5,270,0,0,715,717,3,112,56,0,
        716,714,1,0,0,0,717,720,1,0,0,0,718,716,1,0,0,0,718,719,1,0,0,0,
        719,111,1,0,0,0,720,718,1,0,0,0,721,723,3,120,60,0,722,721,1,0,0,
        0,722,723,1,0,0,0,723,725,1,0,0,0,724,726,3,118,59,0,725,724,1,0,
        0,0,725,726,1,0,0,0,726,730,1,0,0,0,727,729,3,114,57,0,728,727,1,
        0,0,0,729,732,1,0,0,0,730,728,1,0,0,0,730,731,1,0,0,0,731,113,1,
        0,0,0,732,730,1,0,0,0,733,737,3,122,61,0,734,737,3,124,62,0,735,
        737,3,126,63,0,736,733,1,0,0,0,736,734,1,0,0,0,736,735,1,0,0,0,737,
        115,1,0,0,0,738,739,7,6,0,0,739,750,5,186,0,0,740,742,5,8,0,0,741,
        743,5,301,0,0,742,741,1,0,0,0,742,743,1,0,0,0,743,750,1,0,0,0,744,
        745,5,186,0,0,745,747,5,301,0,0,746,748,5,102,0,0,747,746,1,0,0,
        0,747,748,1,0,0,0,748,750,1,0,0,0,749,738,1,0,0,0,749,740,1,0,0,
        0,749,744,1,0,0,0,750,117,1,0,0,0,751,752,3,12,6,0,752,753,5,283,
        0,0,753,119,1,0,0,0,754,755,5,303,0,0,755,121,1,0,0,0,756,758,5,
        294,0,0,757,759,3,12,6,0,758,757,1,0,0,0,758,759,1,0,0,0,759,761,
        1,0,0,0,760,762,3,134,67,0,761,760,1,0,0,0,761,762,1,0,0,0,762,764,
        1,0,0,0,763,765,3,68,34,0,764,763,1,0,0,0,764,765,1,0,0,0,765,766,
        1,0,0,0,766,767,5,295,0,0,767,123,1,0,0,0,768,770,3,130,65,0,769,
        771,3,128,64,0,770,769,1,0,0,0,770,771,1,0,0,0,771,777,1,0,0,0,772,
        774,3,136,68,0,773,775,3,128,64,0,774,773,1,0,0,0,774,775,1,0,0,
        0,775,777,1,0,0,0,776,768,1,0,0,0,776,772,1,0,0,0,777,125,1,0,0,
        0,778,780,5,294,0,0,779,781,3,120,60,0,780,779,1,0,0,0,780,781,1,
        0,0,0,781,783,1,0,0,0,782,784,3,118,59,0,783,782,1,0,0,0,783,784,
        1,0,0,0,784,786,1,0,0,0,785,787,3,114,57,0,786,785,1,0,0,0,787,788,
        1,0,0,0,788,786,1,0,0,0,788,789,1,0,0,0,789,791,1,0,0,0,790,792,
        3,68,34,0,791,790,1,0,0,0,791,792,1,0,0,0,792,793,1,0,0,0,793,795,
        5,295,0,0,794,796,3,128,64,0,795,794,1,0,0,0,795,796,1,0,0,0,796,
        817,1,0,0,0,797,799,5,290,0,0,798,800,3,120,60,0,799,798,1,0,0,0,
        799,800,1,0,0,0,800,802,1,0,0,0,801,803,3,118,59,0,802,801,1,0,0,
        0,802,803,1,0,0,0,803,805,1,0,0,0,804,806,3,114,57,0,805,804,1,0,
        0,0,806,807,1,0,0,0,807,805,1,0,0,0,807,808,1,0,0,0,808,810,1,0,
        0,0,809,811,3,68,34,0,810,809,1,0,0,0,810,811,1,0,0,0,811,812,1,
        0,0,0,812,814,5,291,0,0,813,815,3,128,64,0,814,813,1,0,0,0,814,815,
        1,0,0,0,815,817,1,0,0,0,816,778,1,0,0,0,816,797,1,0,0,0,817,127,
        1,0,0,0,818,827,7,7,0,0,819,820,5,292,0,0,820,821,5,301,0,0,821,
        823,5,270,0,0,822,824,5,301,0,0,823,822,1,0,0,0,823,824,1,0,0,0,
        824,825,1,0,0,0,825,827,5,293,0,0,826,818,1,0,0,0,826,819,1,0,0,
        0,827,129,1,0,0,0,828,829,5,272,0,0,829,830,3,132,66,0,830,831,5,
        272,0,0,831,832,5,287,0,0,832,863,1,0,0,0,833,834,5,276,0,0,834,
        835,3,132,66,0,835,836,5,276,0,0,836,863,1,0,0,0,837,838,5,286,0,
        0,838,839,5,272,0,0,839,840,3,132,66,0,840,841,5,272,0,0,841,863,
        1,0,0,0,842,843,5,276,0,0,843,844,3,132,66,0,844,845,5,276,0,0,845,
        846,5,287,0,0,846,863,1,0,0,0,847,848,5,286,0,0,848,849,5,276,0,
        0,849,850,3,132,66,0,850,851,5,276,0,0,851,863,1,0,0,0,852,853,5,
        286,0,0,853,854,5,272,0,0,854,855,3,132,66,0,855,856,5,272,0,0,856,
        857,5,287,0,0,857,863,1,0,0,0,858,859,5,272,0,0,859,860,3,132,66,
        0,860,861,5,272,0,0,861,863,1,0,0,0,862,828,1,0,0,0,862,833,1,0,
        0,0,862,837,1,0,0,0,862,842,1,0,0,0,862,847,1,0,0,0,862,852,1,0,
        0,0,862,858,1,0,0,0,863,131,1,0,0,0,864,866,5,290,0,0,865,867,3,
        12,6,0,866,865,1,0,0,0,866,867,1,0,0,0,867,869,1,0,0,0,868,870,3,
        134,67,0,869,868,1,0,0,0,869,870,1,0,0,0,870,872,1,0,0,0,871,873,
        3,68,34,0,872,871,1,0,0,0,872,873,1,0,0,0,873,874,1,0,0,0,874,875,
        5,291,0,0,875,133,1,0,0,0,876,877,5,296,0,0,877,878,3,12,6,0,878,
        135,1,0,0,0,879,892,5,276,0,0,880,881,5,276,0,0,881,892,5,287,0,
        0,882,883,5,286,0,0,883,892,5,276,0,0,884,886,5,286,0,0,885,884,
        1,0,0,0,885,886,1,0,0,0,886,887,1,0,0,0,887,889,5,272,0,0,888,890,
        5,287,0,0,889,888,1,0,0,0,889,890,1,0,0,0,890,892,1,0,0,0,891,879,
        1,0,0,0,891,880,1,0,0,0,891,882,1,0,0,0,891,885,1,0,0,0,892,137,
        1,0,0,0,893,894,6,69,-1,0,894,900,3,140,70,0,895,896,5,294,0,0,896,
        897,3,138,69,0,897,898,5,295,0,0,898,900,1,0,0,0,899,893,1,0,0,0,
        899,895,1,0,0,0,900,921,1,0,0,0,901,903,10,5,0,0,902,904,3,150,75,
        0,903,902,1,0,0,0,903,904,1,0,0,0,904,905,1,0,0,0,905,906,5,46,0,
        0,906,907,5,120,0,0,907,920,3,146,73,0,908,909,10,4,0,0,909,910,
        5,270,0,0,910,920,3,146,73,0,911,913,10,3,0,0,912,914,3,150,75,0,
        913,912,1,0,0,0,913,914,1,0,0,0,914,915,1,0,0,0,915,916,5,120,0,
        0,916,917,3,146,73,0,917,918,3,148,74,0,918,920,1,0,0,0,919,901,
        1,0,0,0,919,908,1,0,0,0,919,911,1,0,0,0,920,923,1,0,0,0,921,919,
        1,0,0,0,921,922,1,0,0,0,922,139,1,0,0,0,923,921,1,0,0,0,924,927,
        3,142,71,0,925,927,3,144,72,0,926,924,1,0,0,0,926,925,1,0,0,0,927,
        141,1,0,0,0,928,929,3,156,78,0,929,930,3,12,6,0,930,952,1,0,0,0,
        931,933,3,156,78,0,932,934,3,6,3,0,933,932,1,0,0,0,933,934,1,0,0,
        0,934,936,1,0,0,0,935,937,3,8,4,0,936,935,1,0,0,0,936,937,1,0,0,
        0,937,939,1,0,0,0,938,940,3,10,5,0,939,938,1,0,0,0,939,940,1,0,0,
        0,940,952,1,0,0,0,941,943,3,216,108,0,942,944,3,6,3,0,943,942,1,
        0,0,0,943,944,1,0,0,0,944,946,1,0,0,0,945,947,3,8,4,0,946,945,1,
        0,0,0,946,947,1,0,0,0,947,949,1,0,0,0,948,950,3,10,5,0,949,948,1,
        0,0,0,949,950,1,0,0,0,950,952,1,0,0,0,951,928,1,0,0,0,951,931,1,
        0,0,0,951,941,1,0,0,0,952,143,1,0,0,0,953,954,5,238,0,0,954,956,
        3,152,76,0,955,957,3,6,3,0,956,955,1,0,0,0,956,957,1,0,0,0,957,959,
        1,0,0,0,958,960,3,8,4,0,959,958,1,0,0,0,959,960,1,0,0,0,960,962,
        1,0,0,0,961,963,3,10,5,0,962,961,1,0,0,0,962,963,1,0,0,0,963,145,
        1,0,0,0,964,970,3,140,70,0,965,966,5,294,0,0,966,967,3,138,69,0,
        967,968,5,295,0,0,968,970,1,0,0,0,969,964,1,0,0,0,969,965,1,0,0,
        0,970,147,1,0,0,0,971,972,5,147,0,0,972,973,3,152,76,0,973,149,1,
        0,0,0,974,989,5,109,0,0,975,977,5,125,0,0,976,978,5,153,0,0,977,
        976,1,0,0,0,977,978,1,0,0,0,978,989,1,0,0,0,979,981,5,176,0,0,980,
        982,5,153,0,0,981,980,1,0,0,0,981,982,1,0,0,0,982,989,1,0,0,0,983,
        985,5,96,0,0,984,986,5,153,0,0,985,984,1,0,0,0,985,986,1,0,0,0,986,
        989,1,0,0,0,987,989,5,153,0,0,988,974,1,0,0,0,988,975,1,0,0,0,988,
        979,1,0,0,0,988,983,1,0,0,0,988,987,1,0,0,0,989,151,1,0,0,0,990,
        991,3,154,77,0,991,153,1,0,0,0,992,993,6,77,-1,0,993,994,3,156,78,
        0,994,1024,1,0,0,0,995,997,10,4,0,0,996,998,5,153,0,0,997,996,1,
        0,0,0,997,998,1,0,0,0,998,999,1,0,0,0,999,1001,5,76,0,0,1000,1002,
        7,3,0,0,1001,1000,1,0,0,0,1001,1002,1,0,0,0,1002,1003,1,0,0,0,1003,
        1023,3,156,78,0,1004,1006,10,3,0,0,1005,1007,5,153,0,0,1006,1005,
        1,0,0,0,1006,1007,1,0,0,0,1007,1008,1,0,0,0,1008,1010,5,209,0,0,
        1009,1011,7,3,0,0,1010,1009,1,0,0,0,1010,1011,1,0,0,0,1011,1012,
        1,0,0,0,1012,1023,3,156,78,0,1013,1015,10,2,0,0,1014,1016,5,153,
        0,0,1015,1014,1,0,0,0,1015,1016,1,0,0,0,1016,1017,1,0,0,0,1017,1019,
        5,115,0,0,1018,1020,7,3,0,0,1019,1018,1,0,0,0,1019,1020,1,0,0,0,
        1020,1021,1,0,0,0,1021,1023,3,156,78,0,1022,995,1,0,0,0,1022,1004,
        1,0,0,0,1022,1013,1,0,0,0,1023,1026,1,0,0,0,1024,1022,1,0,0,0,1024,
        1025,1,0,0,0,1025,155,1,0,0,0,1026,1024,1,0,0,0,1027,1028,3,70,35,
        0,1028,1030,3,100,50,0,1029,1031,3,78,39,0,1030,1029,1,0,0,0,1030,
        1031,1,0,0,0,1031,1033,1,0,0,0,1032,1034,3,102,51,0,1033,1032,1,
        0,0,0,1033,1034,1,0,0,0,1034,1036,1,0,0,0,1035,1037,3,86,43,0,1036,
        1035,1,0,0,0,1036,1037,1,0,0,0,1037,1039,1,0,0,0,1038,1040,3,98,
        49,0,1039,1038,1,0,0,0,1039,1040,1,0,0,0,1040,1042,1,0,0,0,1041,
        1043,3,82,41,0,1042,1041,1,0,0,0,1042,1043,1,0,0,0,1043,1045,1,0,
        0,0,1044,1046,3,106,53,0,1045,1044,1,0,0,0,1045,1046,1,0,0,0,1046,
        1048,1,0,0,0,1047,1049,3,104,52,0,1048,1047,1,0,0,0,1048,1049,1,
        0,0,0,1049,1052,1,0,0,0,1050,1052,3,158,79,0,1051,1027,1,0,0,0,1051,
        1050,1,0,0,0,1052,157,1,0,0,0,1053,1054,6,79,-1,0,1054,1055,3,160,
        80,0,1055,1061,1,0,0,0,1056,1057,10,2,0,0,1057,1058,5,151,0,0,1058,
        1060,3,160,80,0,1059,1056,1,0,0,0,1060,1063,1,0,0,0,1061,1059,1,
        0,0,0,1061,1062,1,0,0,0,1062,159,1,0,0,0,1063,1061,1,0,0,0,1064,
        1065,6,80,-1,0,1065,1066,3,162,81,0,1066,1072,1,0,0,0,1067,1068,
        10,2,0,0,1068,1069,5,7,0,0,1069,1071,3,162,81,0,1070,1067,1,0,0,
        0,1071,1074,1,0,0,0,1072,1070,1,0,0,0,1072,1073,1,0,0,0,1073,161,
        1,0,0,0,1074,1072,1,0,0,0,1075,1076,5,140,0,0,1076,1079,3,162,81,
        0,1077,1079,3,164,82,0,1078,1075,1,0,0,0,1078,1077,1,0,0,0,1079,
        163,1,0,0,0,1080,1081,6,82,-1,0,1081,1082,3,166,83,0,1082,1128,1,
        0,0,0,1083,1084,10,7,0,0,1084,1085,7,8,0,0,1085,1127,3,166,83,0,
        1086,1087,10,6,0,0,1087,1089,5,118,0,0,1088,1090,5,140,0,0,1089,
        1088,1,0,0,0,1089,1090,1,0,0,0,1090,1091,1,0,0,0,1091,1127,3,234,
        117,0,1092,1094,10,5,0,0,1093,1095,5,140,0,0,1094,1093,1,0,0,0,1094,
        1095,1,0,0,0,1095,1096,1,0,0,0,1096,1097,5,106,0,0,1097,1098,5,294,
        0,0,1098,1099,3,152,76,0,1099,1100,5,295,0,0,1100,1127,1,0,0,0,1101,
        1103,10,4,0,0,1102,1104,5,140,0,0,1103,1102,1,0,0,0,1103,1104,1,
        0,0,0,1104,1105,1,0,0,0,1105,1106,5,106,0,0,1106,1127,3,166,83,0,
        1107,1109,10,3,0,0,1108,1110,5,140,0,0,1109,1108,1,0,0,0,1109,1110,
        1,0,0,0,1110,1111,1,0,0,0,1111,1112,5,127,0,0,1112,1115,3,166,83,
        0,1113,1114,5,74,0,0,1114,1116,3,152,76,0,1115,1113,1,0,0,0,1115,
        1116,1,0,0,0,1116,1127,1,0,0,0,1117,1119,10,2,0,0,1118,1120,5,140,
        0,0,1119,1118,1,0,0,0,1119,1120,1,0,0,0,1120,1121,1,0,0,0,1121,1122,
        5,17,0,0,1122,1123,3,166,83,0,1123,1124,5,7,0,0,1124,1125,3,166,
        83,0,1125,1127,1,0,0,0,1126,1083,1,0,0,0,1126,1086,1,0,0,0,1126,
        1092,1,0,0,0,1126,1101,1,0,0,0,1126,1107,1,0,0,0,1126,1117,1,0,0,
        0,1127,1130,1,0,0,0,1128,1126,1,0,0,0,1128,1129,1,0,0,0,1129,165,
        1,0,0,0,1130,1128,1,0,0,0,1131,1132,6,83,-1,0,1132,1133,3,168,84,
        0,1133,1139,1,0,0,0,1134,1135,10,2,0,0,1135,1136,5,285,0,0,1136,
        1138,3,168,84,0,1137,1134,1,0,0,0,1138,1141,1,0,0,0,1139,1137,1,
        0,0,0,1139,1140,1,0,0,0,1140,167,1,0,0,0,1141,1139,1,0,0,0,1142,
        1143,6,84,-1,0,1143,1144,3,170,85,0,1144,1150,1,0,0,0,1145,1146,
        10,2,0,0,1146,1147,7,9,0,0,1147,1149,3,170,85,0,1148,1145,1,0,0,
        0,1149,1152,1,0,0,0,1150,1148,1,0,0,0,1150,1151,1,0,0,0,1151,169,
        1,0,0,0,1152,1150,1,0,0,0,1153,1154,6,85,-1,0,1154,1155,3,172,86,
        0,1155,1161,1,0,0,0,1156,1157,10,2,0,0,1157,1158,7,10,0,0,1158,1160,
        3,172,86,0,1159,1156,1,0,0,0,1160,1163,1,0,0,0,1161,1159,1,0,0,0,
        1161,1162,1,0,0,0,1162,171,1,0,0,0,1163,1161,1,0,0,0,1164,1165,7,
        9,0,0,1165,1168,3,172,86,0,1166,1168,3,174,87,0,1167,1164,1,0,0,
        0,1167,1166,1,0,0,0,1168,173,1,0,0,0,1169,1170,6,87,-1,0,1170,1189,
        3,176,88,0,1171,1189,3,198,99,0,1172,1189,3,190,95,0,1173,1189,3,
        192,96,0,1174,1189,3,202,101,0,1175,1189,3,200,100,0,1176,1189,3,
        204,102,0,1177,1189,3,180,90,0,1178,1189,3,208,104,0,1179,1189,3,
        194,97,0,1180,1189,3,206,103,0,1181,1189,3,210,105,0,1182,1189,3,
        178,89,0,1183,1189,3,214,107,0,1184,1189,3,182,91,0,1185,1189,3,
        188,94,0,1186,1189,3,184,92,0,1187,1189,3,196,98,0,1188,1169,1,0,
        0,0,1188,1171,1,0,0,0,1188,1172,1,0,0,0,1188,1173,1,0,0,0,1188,1174,
        1,0,0,0,1188,1175,1,0,0,0,1188,1176,1,0,0,0,1188,1177,1,0,0,0,1188,
        1178,1,0,0,0,1188,1179,1,0,0,0,1188,1180,1,0,0,0,1188,1181,1,0,0,
        0,1188,1182,1,0,0,0,1188,1183,1,0,0,0,1188,1184,1,0,0,0,1188,1185,
        1,0,0,0,1188,1186,1,0,0,0,1188,1187,1,0,0,0,1189,1198,1,0,0,0,1190,
        1192,10,6,0,0,1191,1193,3,212,106,0,1192,1191,1,0,0,0,1193,1194,
        1,0,0,0,1194,1192,1,0,0,0,1194,1195,1,0,0,0,1195,1197,1,0,0,0,1196,
        1190,1,0,0,0,1197,1200,1,0,0,0,1198,1196,1,0,0,0,1198,1199,1,0,0,
        0,1199,175,1,0,0,0,1200,1198,1,0,0,0,1201,1202,5,294,0,0,1202,1203,
        3,152,76,0,1203,1204,5,295,0,0,1204,1211,1,0,0,0,1205,1211,3,218,
        109,0,1206,1211,3,220,110,0,1207,1211,3,232,116,0,1208,1211,3,222,
        111,0,1209,1211,3,228,114,0,1210,1201,1,0,0,0,1210,1205,1,0,0,0,
        1210,1206,1,0,0,0,1210,1207,1,0,0,0,1210,1208,1,0,0,0,1210,1209,
        1,0,0,0,1211,177,1,0,0,0,1212,1213,5,143,0,0,1213,1214,5,294,0,0,
        1214,1215,3,152,76,0,1215,1216,5,270,0,0,1216,1217,3,152,76,0,1217,
        1218,5,295,0,0,1218,179,1,0,0,0,1219,1220,5,32,0,0,1220,1221,5,294,
        0,0,1221,1226,3,152,76,0,1222,1223,5,270,0,0,1223,1225,3,152,76,
        0,1224,1222,1,0,0,0,1225,1228,1,0,0,0,1226,1224,1,0,0,0,1226,1227,
        1,0,0,0,1227,1229,1,0,0,0,1228,1226,1,0,0,0,1229,1230,5,295,0,0,
        1230,181,1,0,0,0,1231,1233,5,23,0,0,1232,1234,3,152,76,0,1233,1232,
        1,0,0,0,1233,1234,1,0,0,0,1234,1240,1,0,0,0,1235,1236,5,223,0,0,
        1236,1237,3,152,76,0,1237,1238,5,200,0,0,1238,1239,3,152,76,0,1239,
        1241,1,0,0,0,1240,1235,1,0,0,0,1241,1242,1,0,0,0,1242,1240,1,0,0,
        0,1242,1243,1,0,0,0,1243,1246,1,0,0,0,1244,1245,5,71,0,0,1245,1247,
        3,152,76,0,1246,1244,1,0,0,0,1246,1247,1,0,0,0,1247,1248,1,0,0,0,
        1248,1249,5,72,0,0,1249,183,1,0,0,0,1250,1251,5,219,0,0,1251,1256,
        3,186,93,0,1252,1253,5,270,0,0,1253,1255,3,186,93,0,1254,1252,1,
        0,0,0,1255,1258,1,0,0,0,1256,1254,1,0,0,0,1256,1257,1,0,0,0,1257,
        185,1,0,0,0,1258,1256,1,0,0,0,1259,1260,5,294,0,0,1260,1265,3,152,
        76,0,1261,1262,5,270,0,0,1262,1264,3,152,76,0,1263,1261,1,0,0,0,
        1264,1267,1,0,0,0,1265,1263,1,0,0,0,1265,1266,1,0,0,0,1266,1268,
        1,0,0,0,1267,1265,1,0,0,0,1268,1269,5,295,0,0,1269,187,1,0,0,0,1270,
        1271,5,294,0,0,1271,1274,3,152,76,0,1272,1273,5,270,0,0,1273,1275,
        3,152,76,0,1274,1272,1,0,0,0,1275,1276,1,0,0,0,1276,1274,1,0,0,0,
        1276,1277,1,0,0,0,1277,1278,1,0,0,0,1278,1279,5,295,0,0,1279,189,
        1,0,0,0,1280,1281,7,11,0,0,1281,1290,5,294,0,0,1282,1287,3,152,76,
        0,1283,1284,5,270,0,0,1284,1286,3,152,76,0,1285,1283,1,0,0,0,1286,
        1289,1,0,0,0,1287,1285,1,0,0,0,1287,1288,1,0,0,0,1288,1291,1,0,0,
        0,1289,1287,1,0,0,0,1290,1282,1,0,0,0,1290,1291,1,0,0,0,1291,1292,
        1,0,0,0,1292,1293,5,295,0,0,1293,191,1,0,0,0,1294,1295,5,195,0,0,
        1295,1296,5,294,0,0,1296,1303,3,152,76,0,1297,1298,5,270,0,0,1298,
        1301,3,152,76,0,1299,1300,5,270,0,0,1300,1302,3,152,76,0,1301,1299,
        1,0,0,0,1301,1302,1,0,0,0,1302,1304,1,0,0,0,1303,1297,1,0,0,0,1303,
        1304,1,0,0,0,1304,1305,1,0,0,0,1305,1306,5,295,0,0,1306,1321,1,0,
        0,0,1307,1308,5,195,0,0,1308,1309,5,294,0,0,1309,1316,3,152,76,0,
        1310,1311,5,95,0,0,1311,1314,3,152,76,0,1312,1313,5,92,0,0,1313,
        1315,3,152,76,0,1314,1312,1,0,0,0,1314,1315,1,0,0,0,1315,1317,1,
        0,0,0,1316,1310,1,0,0,0,1316,1317,1,0,0,0,1317,1318,1,0,0,0,1318,
        1319,5,295,0,0,1319,1321,1,0,0,0,1320,1294,1,0,0,0,1320,1307,1,0,
        0,0,1321,193,1,0,0,0,1322,1323,5,44,0,0,1323,1324,5,294,0,0,1324,
        1325,5,277,0,0,1325,1335,5,295,0,0,1326,1327,7,12,0,0,1327,1329,
        5,294,0,0,1328,1330,3,76,38,0,1329,1328,1,0,0,0,1329,1330,1,0,0,
        0,1330,1331,1,0,0,0,1331,1332,3,152,76,0,1332,1333,5,295,0,0,1333,
        1335,1,0,0,0,1334,1322,1,0,0,0,1334,1326,1,0,0,0,1335,195,1,0,0,
        0,1336,1337,7,13,0,0,1337,1338,5,294,0,0,1338,1345,3,152,76,0,1339,
        1340,5,270,0,0,1340,1343,3,152,76,0,1341,1342,5,270,0,0,1342,1344,
        3,152,76,0,1343,1341,1,0,0,0,1343,1344,1,0,0,0,1344,1346,1,0,0,0,
        1345,1339,1,0,0,0,1345,1346,1,0,0,0,1346,1347,1,0,0,0,1347,1348,
        5,295,0,0,1348,1349,3,92,46,0,1349,197,1,0,0,0,1350,1351,5,24,0,
        0,1351,1352,5,294,0,0,1352,1353,3,152,76,0,1353,1354,5,10,0,0,1354,
        1355,3,234,117,0,1355,1356,5,295,0,0,1356,199,1,0,0,0,1357,1358,
        5,235,0,0,1358,1359,5,294,0,0,1359,1360,3,152,76,0,1360,1361,5,10,
        0,0,1361,1362,3,234,117,0,1362,1363,5,295,0,0,1363,201,1,0,0,0,1364,
        1365,5,234,0,0,1365,1366,5,294,0,0,1366,1367,3,152,76,0,1367,1368,
        5,10,0,0,1368,1369,3,234,117,0,1369,1370,5,295,0,0,1370,203,1,0,
        0,0,1371,1372,5,85,0,0,1372,1373,5,294,0,0,1373,1374,5,303,0,0,1374,
        1375,5,95,0,0,1375,1376,3,152,76,0,1376,1377,5,295,0,0,1377,205,
        1,0,0,0,1378,1379,5,207,0,0,1379,1387,5,294,0,0,1380,1382,5,303,
        0,0,1381,1380,1,0,0,0,1381,1382,1,0,0,0,1382,1384,1,0,0,0,1383,1385,
        3,152,76,0,1384,1383,1,0,0,0,1384,1385,1,0,0,0,1385,1386,1,0,0,0,
        1386,1388,5,95,0,0,1387,1381,1,0,0,0,1387,1388,1,0,0,0,1388,1389,
        1,0,0,0,1389,1390,3,152,76,0,1390,1391,5,295,0,0,1391,207,1,0,0,
        0,1392,1393,7,14,0,0,1393,1394,5,294,0,0,1394,1395,5,303,0,0,1395,
        1396,5,270,0,0,1396,1397,3,152,76,0,1397,1398,5,270,0,0,1398,1399,
        3,152,76,0,1399,1400,5,295,0,0,1400,209,1,0,0,0,1401,1402,7,15,0,
        0,1402,1411,5,294,0,0,1403,1408,3,152,76,0,1404,1405,5,270,0,0,1405,
        1407,3,152,76,0,1406,1404,1,0,0,0,1407,1410,1,0,0,0,1408,1406,1,
        0,0,0,1408,1409,1,0,0,0,1409,1412,1,0,0,0,1410,1408,1,0,0,0,1411,
        1403,1,0,0,0,1411,1412,1,0,0,0,1412,1413,1,0,0,0,1413,1429,5,295,
        0,0,1414,1415,3,12,6,0,1415,1424,5,294,0,0,1416,1421,3,152,76,0,
        1417,1418,5,270,0,0,1418,1420,3,152,76,0,1419,1417,1,0,0,0,1420,
        1423,1,0,0,0,1421,1419,1,0,0,0,1421,1422,1,0,0,0,1422,1425,1,0,0,
        0,1423,1421,1,0,0,0,1424,1416,1,0,0,0,1424,1425,1,0,0,0,1425,1426,
        1,0,0,0,1426,1427,5,295,0,0,1427,1429,1,0,0,0,1428,1401,1,0,0,0,
        1428,1414,1,0,0,0,1429,211,1,0,0,0,1430,1431,5,290,0,0,1431,1432,
        3,152,76,0,1432,1433,5,291,0,0,1433,1442,1,0,0,0,1434,1435,5,290,
        0,0,1435,1436,5,277,0,0,1436,1442,5,291,0,0,1437,1438,5,299,0,0,
        1438,1442,3,12,6,0,1439,1440,5,299,0,0,1440,1442,5,277,0,0,1441,
        1430,1,0,0,0,1441,1434,1,0,0,0,1441,1437,1,0,0,0,1441,1439,1,0,0,
        0,1442,213,1,0,0,0,1443,1444,5,294,0,0,1444,1445,3,174,87,0,1445,
        1446,5,130,0,0,1446,1447,3,110,55,0,1447,1448,5,295,0,0,1448,215,
        1,0,0,0,1449,1450,3,174,87,0,1450,1451,5,130,0,0,1451,1452,3,108,
        54,0,1452,217,1,0,0,0,1453,1454,5,298,0,0,1454,219,1,0,0,0,1455,
        1457,5,275,0,0,1456,1455,1,0,0,0,1456,1457,1,0,0,0,1457,1458,1,0,
        0,0,1458,1459,7,0,0,0,1459,221,1,0,0,0,1460,1463,3,224,112,0,1461,
        1463,3,226,113,0,1462,1460,1,0,0,0,1462,1461,1,0,0,0,1463,223,1,
        0,0,0,1464,1473,5,290,0,0,1465,1470,3,152,76,0,1466,1467,5,270,0,
        0,1467,1469,3,152,76,0,1468,1466,1,0,0,0,1469,1472,1,0,0,0,1470,
        1468,1,0,0,0,1470,1471,1,0,0,0,1471,1474,1,0,0,0,1472,1470,1,0,0,
        0,1473,1465,1,0,0,0,1473,1474,1,0,0,0,1474,1475,1,0,0,0,1475,1476,
        5,291,0,0,1476,225,1,0,0,0,1477,1486,5,288,0,0,1478,1483,3,152,76,
        0,1479,1480,5,270,0,0,1480,1482,3,152,76,0,1481,1479,1,0,0,0,1482,
        1485,1,0,0,0,1483,1481,1,0,0,0,1483,1484,1,0,0,0,1484,1487,1,0,0,
        0,1485,1483,1,0,0,0,1486,1478,1,0,0,0,1486,1487,1,0,0,0,1487,1488,
        1,0,0,0,1488,1489,5,289,0,0,1489,227,1,0,0,0,1490,1499,5,292,0,0,
        1491,1496,3,230,115,0,1492,1493,5,270,0,0,1493,1495,3,230,115,0,
        1494,1492,1,0,0,0,1495,1498,1,0,0,0,1496,1494,1,0,0,0,1496,1497,
        1,0,0,0,1497,1500,1,0,0,0,1498,1496,1,0,0,0,1499,1491,1,0,0,0,1499,
        1500,1,0,0,0,1500,1501,1,0,0,0,1501,1502,5,293,0,0,1502,229,1,0,
        0,0,1503,1504,3,152,76,0,1504,1505,5,296,0,0,1505,1506,3,152,76,
        0,1506,231,1,0,0,0,1507,1530,5,141,0,0,1508,1530,5,236,0,0,1509,
        1530,5,208,0,0,1510,1530,5,88,0,0,1511,1530,5,300,0,0,1512,1530,
        5,301,0,0,1513,1530,5,302,0,0,1514,1530,5,309,0,0,1515,1516,5,53,
        0,0,1516,1530,5,300,0,0,1517,1521,5,201,0,0,1518,1519,5,294,0,0,
        1519,1520,5,301,0,0,1520,1522,5,295,0,0,1521,1518,1,0,0,0,1521,1522,
        1,0,0,0,1522,1526,1,0,0,0,1523,1524,5,226,0,0,1524,1525,5,201,0,
        0,1525,1527,5,229,0,0,1526,1523,1,0,0,0,1526,1527,1,0,0,0,1527,1528,
        1,0,0,0,1528,1530,5,300,0,0,1529,1507,1,0,0,0,1529,1508,1,0,0,0,
        1529,1509,1,0,0,0,1529,1510,1,0,0,0,1529,1511,1,0,0,0,1529,1512,
        1,0,0,0,1529,1513,1,0,0,0,1529,1514,1,0,0,0,1529,1515,1,0,0,0,1529,
        1517,1,0,0,0,1530,233,1,0,0,0,1531,1570,7,16,0,0,1532,1533,5,69,
        0,0,1533,1570,5,161,0,0,1534,1538,7,17,0,0,1535,1536,5,294,0,0,1536,
        1537,5,301,0,0,1537,1539,5,295,0,0,1538,1535,1,0,0,0,1538,1539,1,
        0,0,0,1539,1570,1,0,0,0,1540,1541,5,27,0,0,1541,1545,5,221,0,0,1542,
        1543,5,294,0,0,1543,1544,5,301,0,0,1544,1546,5,295,0,0,1545,1542,
        1,0,0,0,1545,1546,1,0,0,0,1546,1570,1,0,0,0,1547,1555,7,18,0,0,1548,
        1549,5,294,0,0,1549,1552,5,301,0,0,1550,1551,5,270,0,0,1551,1553,
        5,301,0,0,1552,1550,1,0,0,0,1552,1553,1,0,0,0,1553,1554,1,0,0,0,
        1554,1556,5,295,0,0,1555,1548,1,0,0,0,1555,1556,1,0,0,0,1556,1570,
        1,0,0,0,1557,1561,5,201,0,0,1558,1559,5,294,0,0,1559,1560,5,301,
        0,0,1560,1562,5,295,0,0,1561,1558,1,0,0,0,1561,1562,1,0,0,0,1562,
        1566,1,0,0,0,1563,1564,5,226,0,0,1564,1565,5,201,0,0,1565,1567,5,
        229,0,0,1566,1563,1,0,0,0,1566,1567,1,0,0,0,1567,1570,1,0,0,0,1568,
        1570,3,12,6,0,1569,1531,1,0,0,0,1569,1532,1,0,0,0,1569,1534,1,0,
        0,0,1569,1540,1,0,0,0,1569,1547,1,0,0,0,1569,1557,1,0,0,0,1569,1568,
        1,0,0,0,1570,235,1,0,0,0,204,243,248,250,256,262,268,274,278,303,
        306,310,325,330,341,347,350,353,357,362,365,370,377,383,396,402,
        410,424,427,430,439,442,448,452,454,466,469,477,485,497,512,522,
        525,533,542,547,550,553,559,566,571,576,585,592,597,600,610,624,
        629,633,637,645,649,658,663,666,677,687,706,711,718,722,725,730,
        736,742,747,749,758,761,764,770,774,776,780,783,788,791,795,799,
        802,807,810,814,816,823,826,862,866,869,872,885,889,891,899,903,
        913,919,921,926,933,936,939,943,946,949,951,956,959,962,969,977,
        981,985,988,997,1001,1006,1010,1015,1019,1022,1024,1030,1033,1036,
        1039,1042,1045,1048,1051,1061,1072,1078,1089,1094,1103,1109,1115,
        1119,1126,1128,1139,1150,1161,1167,1188,1194,1198,1210,1226,1233,
        1242,1246,1256,1265,1276,1287,1290,1301,1303,1314,1316,1320,1329,
        1334,1343,1345,1381,1384,1387,1408,1411,1421,1424,1428,1441,1456,
        1462,1470,1473,1483,1486,1496,1499,1521,1526,1529,1538,1545,1552,
        1555,1561,1566,1569
    ]

class PartiQLParser ( Parser ):

    grammarFileName = "PartiQL.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'ABSOLUTE'", "'ACTION'", "'ADD'", "'ALL'", 
                     "'ALLOCATE'", "'ALTER'", "'AND'", "'ANY'", "'ARE'", 
                     "'AS'", "'ASC'", "'ASSERTION'", "'AT'", "'AUTHORIZATION'", 
                     "'AVG'", "'BEGIN'", "'BETWEEN'", "'BIT'", "'BIT_LENGTH'", 
                     "'BY'", "'CASCADE'", "'CASCADED'", "'CASE'", "'CAST'", 
                     "'CATALOG'", "'CHAR'", "'CHARACTER'", "'CHARACTER_LENGTH'", 
                     "'CHAR_LENGTH'", "'CHECK'", "'CLOSE'", "'COALESCE'", 
                     "'COLLATE'", "'COLLATION'", "'COLUMN'", "'COMMIT'", 
                     "'CONNECT'", "'CONNECTION'", "'CONSTRAINT'", "'CONSTRAINTS'", 
                     "'CONTINUE'", "'CONVERT'", "'CORRESPONDING'", "'COUNT'", 
                     "'CREATE'", "'CROSS'", "'CURRENT'", "'CURRENT_DATE'", 
                     "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", "'CURRENT_USER'", 
                     "'CURSOR'", "'DATE'", "'DEALLOCATE'", "'DEC'", "'DECIMAL'", 
                     "'DECLARE'", "'DEFAULT'", "'DEFERRABLE'", "'DEFERRED'", 
                     "'DELETE'", "'DESC'", "'DESCRIBE'", "'DESCRIPTOR'", 
                     "'DIAGNOSTICS'", "'DISCONNECT'", "'DISTINCT'", "'DOMAIN'", 
                     "'DOUBLE'", "'DROP'", "'ELSE'", "'END'", "'END-EXEC'", 
                     "'ESCAPE'", "'EVERY'", "'EXCEPT'", "'EXCEPTION'", "'EXCLUDE'", 
                     "'EXCLUDED'", "'EXEC'", "'EXECUTE'", "'EXISTS'", "'EXPLAIN'", 
                     "'EXTERNAL'", "'EXTRACT'", "'DATE_ADD'", "'DATE_DIFF'", 
                     "'FALSE'", "'FETCH'", "'FIRST'", "'FLOAT'", "'FOR'", 
                     "'FOREIGN'", "'FOUND'", "'FROM'", "'FULL'", "'GET'", 
                     "'GLOBAL'", "'GO'", "'GOTO'", "'GRANT'", "'GROUP'", 
                     "'HAVING'", "'IDENTITY'", "'IMMEDIATE'", "'IN'", "'INDICATOR'", 
                     "'INITIALLY'", "'INNER'", "'INPUT'", "'INSENSITIVE'", 
                     "'INSERT'", "'INT'", "'INTEGER'", "'INTERSECT'", "'INTERVAL'", 
                     "'INTO'", "'IS'", "'ISOLATION'", "'JOIN'", "'KEY'", 
                     "'LANGUAGE'", "'LAST'", "'LATERAL'", "'LEFT'", "'LEVEL'", 
                     "'LIKE'", "'LOCAL'", "'LOWER'", "'MATCH'", "'MAX'", 
                     "'MIN'", "'MODULE'", "'NAMES'", "'NATIONAL'", "'NATURAL'", 
                     "'NCHAR'", "'NEXT'", "'NO'", "'NOT'", "'NULL'", "'NULLS'", 
                     "'NULLIF'", "'NUMERIC'", "'OCTET_LENGTH'", "'OF'", 
                     "'ON'", "'ONLY'", "'OPEN'", "'OPTION'", "'OR'", "'ORDER'", 
                     "'OUTER'", "'OUTPUT'", "'OVERLAPS'", "'OVERLAY'", "'PAD'", 
                     "'PARTIAL'", "'PLACING'", "'POSITION'", "'PRECISION'", 
                     "'PREPARE'", "'PRESERVE'", "'PRIMARY'", "'PRIOR'", 
                     "'PRIVILEGES'", "'PROCEDURE'", "'PUBLIC'", "'READ'", 
                     "'REAL'", "'REFERENCES'", "'RELATIVE'", "'REPLACE'", 
                     "'RESTRICT'", "'REVOKE'", "'RIGHT'", "'ROLLBACK'", 
                     "'ROWS'", "'SCHEMA'", "'SCROLL'", "'SECTION'", "'SELECT'", 
                     "'SESSION'", "'SESSION_USER'", "'SET'", "'SHORTEST'", 
                     "'SIZE'", "'SMALLINT'", "'SOME'", "'SPACE'", "'SQL'", 
                     "'SQLCODE'", "'SQLERROR'", "'SQLSTATE'", "'SUBSTRING'", 
                     "'SUM'", "'SYSTEM_USER'", "'TABLE'", "'TEMPORARY'", 
                     "'THEN'", "'TIME'", "'TIMESTAMP'", "'TO'", "'TRANSACTION'", 
                     "'TRANSLATE'", "'TRANSLATION'", "'TRIM'", "'TRUE'", 
                     "'UNION'", "'UNIQUE'", "'UNKNOWN'", "'UPDATE'", "'UPPER'", 
                     "'UPSERT'", "'USAGE'", "'USER'", "'USING'", "'VALUE'", 
                     "'VALUES'", "'VARCHAR'", "'VARYING'", "'VIEW'", "'WHEN'", 
                     "'WHENEVER'", "'WHERE'", "'WITH'", "'WORK'", "'WRITE'", 
                     "'ZONE'", "'LAG'", "'LEAD'", "'OVER'", "'PARTITION'", 
                     "'CAN_CAST'", "'CAN_LOSSLESS_CAST'", "'MISSING'", "'PIVOT'", 
                     "'UNPIVOT'", "'LIMIT'", "'OFFSET'", "'REMOVE'", "'INDEX'", 
                     "'LET'", "'CONFLICT'", "'DO'", "'RETURNING'", "'MODIFIED'", 
                     "'NEW'", "'OLD'", "'NOTHING'", "'TUPLE'", "'INTEGER2'", 
                     "'INT2'", "'INTEGER4'", "'INT4'", "'INTEGER8'", "'INT8'", 
                     "'BIGINT'", "'BOOL'", "'BOOLEAN'", "'STRING'", "'SYMBOL'", 
                     "'CLOB'", "'BLOB'", "'STRUCT'", "'LIST'", "'SEXP'", 
                     "'BAG'", "'^'", "','", "'+'", "'-'", "'/'", "'%'", 
                     "'@'", "'~'", "'*'", "'|'", "'&'", "'!'", "'<='", "'>='", 
                     "'='", "<INVALID>", "'||'", "'<'", "'>'", "'<<'", "'>>'", 
                     "'['", "']'", "'{'", "'}'", "'('", "')'", "':'", "';'", 
                     "'?'", "'.'" ]

    symbolicNames = [ "<INVALID>", "ABSOLUTE", "ACTION", "ADD", "ALL", "ALLOCATE", 
                      "ALTER", "AND", "ANY", "ARE", "AS", "ASC", "ASSERTION", 
                      "AT", "AUTHORIZATION", "AVG", "BEGIN", "BETWEEN", 
                      "BIT", "BIT_LENGTH", "BY", "CASCADE", "CASCADED", 
                      "CASE", "CAST", "CATALOG", "CHAR", "CHARACTER", "CHARACTER_LENGTH", 
                      "CHAR_LENGTH", "CHECK", "CLOSE", "COALESCE", "COLLATE", 
                      "COLLATION", "COLUMN", "COMMIT", "CONNECT", "CONNECTION", 
                      "CONSTRAINT", "CONSTRAINTS", "CONTINUE", "CONVERT", 
                      "CORRESPONDING", "COUNT", "CREATE", "CROSS", "CURRENT", 
                      "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", 
                      "CURRENT_USER", "CURSOR", "DATE", "DEALLOCATE", "DEC", 
                      "DECIMAL", "DECLARE", "DEFAULT", "DEFERRABLE", "DEFERRED", 
                      "DELETE", "DESC", "DESCRIBE", "DESCRIPTOR", "DIAGNOSTICS", 
                      "DISCONNECT", "DISTINCT", "DOMAIN", "DOUBLE", "DROP", 
                      "ELSE", "END", "END_EXEC", "ESCAPE", "EVERY", "EXCEPT", 
                      "EXCEPTION", "EXCLUDE", "EXCLUDED", "EXEC", "EXECUTE", 
                      "EXISTS", "EXPLAIN", "EXTERNAL", "EXTRACT", "DATE_ADD", 
                      "DATE_DIFF", "FALSE", "FETCH", "FIRST", "FLOAT", "FOR", 
                      "FOREIGN", "FOUND", "FROM", "FULL", "GET", "GLOBAL", 
                      "GO", "GOTO", "GRANT", "GROUP", "HAVING", "IDENTITY", 
                      "IMMEDIATE", "IN", "INDICATOR", "INITIALLY", "INNER", 
                      "INPUT", "INSENSITIVE", "INSERT", "INT", "INTEGER", 
                      "INTERSECT", "INTERVAL", "INTO", "IS", "ISOLATION", 
                      "JOIN", "KEY", "LANGUAGE", "LAST", "LATERAL", "LEFT", 
                      "LEVEL", "LIKE", "LOCAL", "LOWER", "MATCH", "MAX", 
                      "MIN", "MODULE", "NAMES", "NATIONAL", "NATURAL", "NCHAR", 
                      "NEXT", "NO", "NOT", "NULL", "NULLS", "NULLIF", "NUMERIC", 
                      "OCTET_LENGTH", "OF", "ON", "ONLY", "OPEN", "OPTION", 
                      "OR", "ORDER", "OUTER", "OUTPUT", "OVERLAPS", "OVERLAY", 
                      "PAD", "PARTIAL", "PLACING", "POSITION", "PRECISION", 
                      "PREPARE", "PRESERVE", "PRIMARY", "PRIOR", "PRIVILEGES", 
                      "PROCEDURE", "PUBLIC", "READ", "REAL", "REFERENCES", 
                      "RELATIVE", "REPLACE", "RESTRICT", "REVOKE", "RIGHT", 
                      "ROLLBACK", "ROWS", "SCHEMA", "SCROLL", "SECTION", 
                      "SELECT", "SESSION", "SESSION_USER", "SET", "SHORTEST", 
                      "SIZE", "SMALLINT", "SOME", "SPACE", "SQL", "SQLCODE", 
                      "SQLERROR", "SQLSTATE", "SUBSTRING", "SUM", "SYSTEM_USER", 
                      "TABLE", "TEMPORARY", "THEN", "TIME", "TIMESTAMP", 
                      "TO", "TRANSACTION", "TRANSLATE", "TRANSLATION", "TRIM", 
                      "TRUE", "UNION", "UNIQUE", "UNKNOWN", "UPDATE", "UPPER", 
                      "UPSERT", "USAGE", "USER", "USING", "VALUE", "VALUES", 
                      "VARCHAR", "VARYING", "VIEW", "WHEN", "WHENEVER", 
                      "WHERE", "WITH", "WORK", "WRITE", "ZONE", "LAG", "LEAD", 
                      "OVER", "PARTITION", "CAN_CAST", "CAN_LOSSLESS_CAST", 
                      "MISSING", "PIVOT", "UNPIVOT", "LIMIT", "OFFSET", 
                      "REMOVE", "INDEX", "LET", "CONFLICT", "DO", "RETURNING", 
                      "MODIFIED", "NEW", "OLD", "NOTHING", "TUPLE", "INTEGER2", 
                      "INT2", "INTEGER4", "INT4", "INTEGER8", "INT8", "BIGINT", 
                      "BOOL", "BOOLEAN", "STRING", "SYMBOL", "CLOB", "BLOB", 
                      "STRUCT", "LIST", "SEXP", "BAG", "CARET", "COMMA", 
                      "PLUS", "MINUS", "SLASH_FORWARD", "PERCENT", "AT_SIGN", 
                      "TILDE", "ASTERISK", "VERTBAR", "AMPERSAND", "BANG", 
                      "LT_EQ", "GT_EQ", "EQ", "NEQ", "CONCAT", "ANGLE_LEFT", 
                      "ANGLE_RIGHT", "ANGLE_DOUBLE_LEFT", "ANGLE_DOUBLE_RIGHT", 
                      "BRACKET_LEFT", "BRACKET_RIGHT", "BRACE_LEFT", "BRACE_RIGHT", 
                      "PAREN_LEFT", "PAREN_RIGHT", "COLON", "COLON_SEMI", 
                      "QUESTION_MARK", "PERIOD", "LITERAL_STRING", "LITERAL_INTEGER", 
                      "LITERAL_DECIMAL", "IDENTIFIER", "IDENTIFIER_QUOTED", 
                      "WS", "COMMENT_SINGLE", "COMMENT_BLOCK", "UNRECOGNIZED", 
                      "ION_CLOSURE", "BACKTICK" ]

    RULE_root = 0
    RULE_statement = 1
    RULE_explainOption = 2
    RULE_asIdent = 3
    RULE_atIdent = 4
    RULE_byIdent = 5
    RULE_symbolPrimitive = 6
    RULE_dql = 7
    RULE_execCommand = 8
    RULE_ddl = 9
    RULE_createCommand = 10
    RULE_dropCommand = 11
    RULE_dml = 12
    RULE_dmlBaseCommand = 13
    RULE_pathSimple = 14
    RULE_pathSimpleSteps = 15
    RULE_replaceCommand = 16
    RULE_upsertCommand = 17
    RULE_removeCommand = 18
    RULE_insertCommandReturning = 19
    RULE_insertCommand = 20
    RULE_onConflictClause = 21
    RULE_conflictTarget = 22
    RULE_constraintName = 23
    RULE_conflictAction = 24
    RULE_doReplace = 25
    RULE_doUpdate = 26
    RULE_updateClause = 27
    RULE_setCommand = 28
    RULE_setAssignment = 29
    RULE_deleteCommand = 30
    RULE_returningClause = 31
    RULE_returningColumn = 32
    RULE_fromClauseSimple = 33
    RULE_whereClause = 34
    RULE_selectClause = 35
    RULE_projectionItems = 36
    RULE_projectionItem = 37
    RULE_setQuantifierStrategy = 38
    RULE_letClause = 39
    RULE_letBinding = 40
    RULE_orderByClause = 41
    RULE_orderSortSpec = 42
    RULE_groupClause = 43
    RULE_groupAlias = 44
    RULE_groupKey = 45
    RULE_over = 46
    RULE_windowPartitionList = 47
    RULE_windowSortSpecList = 48
    RULE_havingClause = 49
    RULE_fromClause = 50
    RULE_whereClauseSelect = 51
    RULE_offsetByClause = 52
    RULE_limitClause = 53
    RULE_gpmlPattern = 54
    RULE_gpmlPatternList = 55
    RULE_matchPattern = 56
    RULE_graphPart = 57
    RULE_matchSelector = 58
    RULE_patternPathVariable = 59
    RULE_patternRestrictor = 60
    RULE_node = 61
    RULE_edge = 62
    RULE_pattern = 63
    RULE_patternQuantifier = 64
    RULE_edgeWSpec = 65
    RULE_edgeSpec = 66
    RULE_patternPartLabel = 67
    RULE_edgeAbbrev = 68
    RULE_tableReference = 69
    RULE_tableNonJoin = 70
    RULE_tableBaseReference = 71
    RULE_tableUnpivot = 72
    RULE_joinRhs = 73
    RULE_joinSpec = 74
    RULE_joinType = 75
    RULE_expr = 76
    RULE_exprBagOp = 77
    RULE_exprSelect = 78
    RULE_exprOr = 79
    RULE_exprAnd = 80
    RULE_exprNot = 81
    RULE_exprPredicate = 82
    RULE_mathOp00 = 83
    RULE_mathOp01 = 84
    RULE_mathOp02 = 85
    RULE_valueExpr = 86
    RULE_exprPrimary = 87
    RULE_exprTerm = 88
    RULE_nullIf = 89
    RULE_coalesce = 90
    RULE_caseExpr = 91
    RULE_values = 92
    RULE_valueRow = 93
    RULE_valueList = 94
    RULE_sequenceConstructor = 95
    RULE_substring = 96
    RULE_aggregate = 97
    RULE_windowFunction = 98
    RULE_cast = 99
    RULE_canLosslessCast = 100
    RULE_canCast = 101
    RULE_extract = 102
    RULE_trimFunction = 103
    RULE_dateFunction = 104
    RULE_functionCall = 105
    RULE_pathStep = 106
    RULE_exprGraphMatchMany = 107
    RULE_exprGraphMatchOne = 108
    RULE_parameter = 109
    RULE_varRefExpr = 110
    RULE_collection = 111
    RULE_array = 112
    RULE_bag = 113
    RULE_tuple = 114
    RULE_pair = 115
    RULE_literal = 116
    RULE_type = 117

    ruleNames =  [ "root", "statement", "explainOption", "asIdent", "atIdent", 
                   "byIdent", "symbolPrimitive", "dql", "execCommand", "ddl", 
                   "createCommand", "dropCommand", "dml", "dmlBaseCommand", 
                   "pathSimple", "pathSimpleSteps", "replaceCommand", "upsertCommand", 
                   "removeCommand", "insertCommandReturning", "insertCommand", 
                   "onConflictClause", "conflictTarget", "constraintName", 
                   "conflictAction", "doReplace", "doUpdate", "updateClause", 
                   "setCommand", "setAssignment", "deleteCommand", "returningClause", 
                   "returningColumn", "fromClauseSimple", "whereClause", 
                   "selectClause", "projectionItems", "projectionItem", 
                   "setQuantifierStrategy", "letClause", "letBinding", "orderByClause", 
                   "orderSortSpec", "groupClause", "groupAlias", "groupKey", 
                   "over", "windowPartitionList", "windowSortSpecList", 
                   "havingClause", "fromClause", "whereClauseSelect", "offsetByClause", 
                   "limitClause", "gpmlPattern", "gpmlPatternList", "matchPattern", 
                   "graphPart", "matchSelector", "patternPathVariable", 
                   "patternRestrictor", "node", "edge", "pattern", "patternQuantifier", 
                   "edgeWSpec", "edgeSpec", "patternPartLabel", "edgeAbbrev", 
                   "tableReference", "tableNonJoin", "tableBaseReference", 
                   "tableUnpivot", "joinRhs", "joinSpec", "joinType", "expr", 
                   "exprBagOp", "exprSelect", "exprOr", "exprAnd", "exprNot", 
                   "exprPredicate", "mathOp00", "mathOp01", "mathOp02", 
                   "valueExpr", "exprPrimary", "exprTerm", "nullIf", "coalesce", 
                   "caseExpr", "values", "valueRow", "valueList", "sequenceConstructor", 
                   "substring", "aggregate", "windowFunction", "cast", "canLosslessCast", 
                   "canCast", "extract", "trimFunction", "dateFunction", 
                   "functionCall", "pathStep", "exprGraphMatchMany", "exprGraphMatchOne", 
                   "parameter", "varRefExpr", "collection", "array", "bag", 
                   "tuple", "pair", "literal", "type" ]

    EOF = Token.EOF
    ABSOLUTE=1
    ACTION=2
    ADD=3
    ALL=4
    ALLOCATE=5
    ALTER=6
    AND=7
    ANY=8
    ARE=9
    AS=10
    ASC=11
    ASSERTION=12
    AT=13
    AUTHORIZATION=14
    AVG=15
    BEGIN=16
    BETWEEN=17
    BIT=18
    BIT_LENGTH=19
    BY=20
    CASCADE=21
    CASCADED=22
    CASE=23
    CAST=24
    CATALOG=25
    CHAR=26
    CHARACTER=27
    CHARACTER_LENGTH=28
    CHAR_LENGTH=29
    CHECK=30
    CLOSE=31
    COALESCE=32
    COLLATE=33
    COLLATION=34
    COLUMN=35
    COMMIT=36
    CONNECT=37
    CONNECTION=38
    CONSTRAINT=39
    CONSTRAINTS=40
    CONTINUE=41
    CONVERT=42
    CORRESPONDING=43
    COUNT=44
    CREATE=45
    CROSS=46
    CURRENT=47
    CURRENT_DATE=48
    CURRENT_TIME=49
    CURRENT_TIMESTAMP=50
    CURRENT_USER=51
    CURSOR=52
    DATE=53
    DEALLOCATE=54
    DEC=55
    DECIMAL=56
    DECLARE=57
    DEFAULT=58
    DEFERRABLE=59
    DEFERRED=60
    DELETE=61
    DESC=62
    DESCRIBE=63
    DESCRIPTOR=64
    DIAGNOSTICS=65
    DISCONNECT=66
    DISTINCT=67
    DOMAIN=68
    DOUBLE=69
    DROP=70
    ELSE=71
    END=72
    END_EXEC=73
    ESCAPE=74
    EVERY=75
    EXCEPT=76
    EXCEPTION=77
    EXCLUDE=78
    EXCLUDED=79
    EXEC=80
    EXECUTE=81
    EXISTS=82
    EXPLAIN=83
    EXTERNAL=84
    EXTRACT=85
    DATE_ADD=86
    DATE_DIFF=87
    FALSE=88
    FETCH=89
    FIRST=90
    FLOAT=91
    FOR=92
    FOREIGN=93
    FOUND=94
    FROM=95
    FULL=96
    GET=97
    GLOBAL=98
    GO=99
    GOTO=100
    GRANT=101
    GROUP=102
    HAVING=103
    IDENTITY=104
    IMMEDIATE=105
    IN=106
    INDICATOR=107
    INITIALLY=108
    INNER=109
    INPUT=110
    INSENSITIVE=111
    INSERT=112
    INT=113
    INTEGER=114
    INTERSECT=115
    INTERVAL=116
    INTO=117
    IS=118
    ISOLATION=119
    JOIN=120
    KEY=121
    LANGUAGE=122
    LAST=123
    LATERAL=124
    LEFT=125
    LEVEL=126
    LIKE=127
    LOCAL=128
    LOWER=129
    MATCH=130
    MAX=131
    MIN=132
    MODULE=133
    NAMES=134
    NATIONAL=135
    NATURAL=136
    NCHAR=137
    NEXT=138
    NO=139
    NOT=140
    NULL=141
    NULLS=142
    NULLIF=143
    NUMERIC=144
    OCTET_LENGTH=145
    OF=146
    ON=147
    ONLY=148
    OPEN=149
    OPTION=150
    OR=151
    ORDER=152
    OUTER=153
    OUTPUT=154
    OVERLAPS=155
    OVERLAY=156
    PAD=157
    PARTIAL=158
    PLACING=159
    POSITION=160
    PRECISION=161
    PREPARE=162
    PRESERVE=163
    PRIMARY=164
    PRIOR=165
    PRIVILEGES=166
    PROCEDURE=167
    PUBLIC=168
    READ=169
    REAL=170
    REFERENCES=171
    RELATIVE=172
    REPLACE=173
    RESTRICT=174
    REVOKE=175
    RIGHT=176
    ROLLBACK=177
    ROWS=178
    SCHEMA=179
    SCROLL=180
    SECTION=181
    SELECT=182
    SESSION=183
    SESSION_USER=184
    SET=185
    SHORTEST=186
    SIZE=187
    SMALLINT=188
    SOME=189
    SPACE=190
    SQL=191
    SQLCODE=192
    SQLERROR=193
    SQLSTATE=194
    SUBSTRING=195
    SUM=196
    SYSTEM_USER=197
    TABLE=198
    TEMPORARY=199
    THEN=200
    TIME=201
    TIMESTAMP=202
    TO=203
    TRANSACTION=204
    TRANSLATE=205
    TRANSLATION=206
    TRIM=207
    TRUE=208
    UNION=209
    UNIQUE=210
    UNKNOWN=211
    UPDATE=212
    UPPER=213
    UPSERT=214
    USAGE=215
    USER=216
    USING=217
    VALUE=218
    VALUES=219
    VARCHAR=220
    VARYING=221
    VIEW=222
    WHEN=223
    WHENEVER=224
    WHERE=225
    WITH=226
    WORK=227
    WRITE=228
    ZONE=229
    LAG=230
    LEAD=231
    OVER=232
    PARTITION=233
    CAN_CAST=234
    CAN_LOSSLESS_CAST=235
    MISSING=236
    PIVOT=237
    UNPIVOT=238
    LIMIT=239
    OFFSET=240
    REMOVE=241
    INDEX=242
    LET=243
    CONFLICT=244
    DO=245
    RETURNING=246
    MODIFIED=247
    NEW=248
    OLD=249
    NOTHING=250
    TUPLE=251
    INTEGER2=252
    INT2=253
    INTEGER4=254
    INT4=255
    INTEGER8=256
    INT8=257
    BIGINT=258
    BOOL=259
    BOOLEAN=260
    STRING=261
    SYMBOL=262
    CLOB=263
    BLOB=264
    STRUCT=265
    LIST=266
    SEXP=267
    BAG=268
    CARET=269
    COMMA=270
    PLUS=271
    MINUS=272
    SLASH_FORWARD=273
    PERCENT=274
    AT_SIGN=275
    TILDE=276
    ASTERISK=277
    VERTBAR=278
    AMPERSAND=279
    BANG=280
    LT_EQ=281
    GT_EQ=282
    EQ=283
    NEQ=284
    CONCAT=285
    ANGLE_LEFT=286
    ANGLE_RIGHT=287
    ANGLE_DOUBLE_LEFT=288
    ANGLE_DOUBLE_RIGHT=289
    BRACKET_LEFT=290
    BRACKET_RIGHT=291
    BRACE_LEFT=292
    BRACE_RIGHT=293
    PAREN_LEFT=294
    PAREN_RIGHT=295
    COLON=296
    COLON_SEMI=297
    QUESTION_MARK=298
    PERIOD=299
    LITERAL_STRING=300
    LITERAL_INTEGER=301
    LITERAL_DECIMAL=302
    IDENTIFIER=303
    IDENTIFIER_QUOTED=304
    WS=305
    COMMENT_SINGLE=306
    COMMENT_BLOCK=307
    UNRECOGNIZED=308
    ION_CLOSURE=309
    BACKTICK=310

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class RootContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(PartiQLParser.StatementContext,0)


        def EXPLAIN(self):
            return self.getToken(PartiQLParser.EXPLAIN, 0)

        def PAREN_LEFT(self):
            return self.getToken(PartiQLParser.PAREN_LEFT, 0)

        def explainOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PartiQLParser.ExplainOptionContext)
            else:
                return self.getTypedRuleContext(PartiQLParser.ExplainOptionContext,i)


        def PAREN_RIGHT(self):
            return self.getToken(PartiQLParser.PAREN_RIGHT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PartiQLParser.COMMA)
            else:
                return self.getToken(PartiQLParser.COMMA, i)

        def getRuleIndex(self):
            return PartiQLParser.RULE_root

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoot" ):
                listener.enterRoot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoot" ):
                listener.exitRoot(self)




    def root(self):

        localctx = PartiQLParser.RootContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_root)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 250
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==83:
                self.state = 236
                self.match(PartiQLParser.EXPLAIN)
                self.state = 248
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
                if la_ == 1:
                    self.state = 237
                    self.match(PartiQLParser.PAREN_LEFT)
                    self.state = 238
                    self.explainOption()
                    self.state = 243
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==270:
                        self.state = 239
                        self.match(PartiQLParser.COMMA)
                        self.state = 240
                        self.explainOption()
                        self.state = 245
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 246
                    self.match(PartiQLParser.PAREN_RIGHT)




            self.state = 252
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PartiQLParser.RULE_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class QueryExecContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def execCommand(self):
            return self.getTypedRuleContext(PartiQLParser.ExecCommandContext,0)

        def EOF(self):
            return self.getToken(PartiQLParser.EOF, 0)
        def COLON_SEMI(self):
            return self.getToken(PartiQLParser.COLON_SEMI, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryExec" ):
                listener.enterQueryExec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryExec" ):
                listener.exitQueryExec(self)


    class QueryDdlContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ddl(self):
            return self.getTypedRuleContext(PartiQLParser.DdlContext,0)

        def EOF(self):
            return self.getToken(PartiQLParser.EOF, 0)
        def COLON_SEMI(self):
            return self.getToken(PartiQLParser.COLON_SEMI, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryDdl" ):
                listener.enterQueryDdl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryDdl" ):
                listener.exitQueryDdl(self)


    class QueryDqlContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def dql(self):
            return self.getTypedRuleContext(PartiQLParser.DqlContext,0)

        def EOF(self):
            return self.getToken(PartiQLParser.EOF, 0)
        def COLON_SEMI(self):
            return self.getToken(PartiQLParser.COLON_SEMI, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryDql" ):
                listener.enterQueryDql(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryDql" ):
                listener.exitQueryDql(self)


    class QueryDmlContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def dml(self):
            return self.getTypedRuleContext(PartiQLParser.DmlContext,0)

        def EOF(self):
            return self.getToken(PartiQLParser.EOF, 0)
        def COLON_SEMI(self):
            return self.getToken(PartiQLParser.COLON_SEMI, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryDml" ):
                listener.enterQueryDml(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryDml" ):
                listener.exitQueryDml(self)



    def statement(self):

        localctx = PartiQLParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 278
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [15, 19, 23, 24, 28, 29, 32, 44, 53, 82, 85, 86, 87, 88, 129, 131, 132, 140, 141, 143, 145, 182, 187, 195, 196, 201, 207, 208, 213, 219, 230, 231, 234, 235, 236, 237, 266, 267, 271, 272, 275, 288, 290, 292, 294, 298, 300, 301, 302, 303, 304, 309]:
                localctx = PartiQLParser.QueryDqlContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 254
                self.dql()
                self.state = 256
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==297:
                    self.state = 255
                    self.match(PartiQLParser.COLON_SEMI)


                self.state = 258
                self.match(PartiQLParser.EOF)
                pass
            elif token in [61, 95, 112, 173, 185, 212, 214, 241]:
                localctx = PartiQLParser.QueryDmlContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 260
                self.dml()
                self.state = 262
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==297:
                    self.state = 261
                    self.match(PartiQLParser.COLON_SEMI)


                self.state = 264
                self.match(PartiQLParser.EOF)
                pass
            elif token in [45, 70]:
                localctx = PartiQLParser.QueryDdlContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 266
                self.ddl()
                self.state = 268
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==297:
                    self.state = 267
                    self.match(PartiQLParser.COLON_SEMI)


                self.state = 270
                self.match(PartiQLParser.EOF)
                pass
            elif token in [80]:
                localctx = PartiQLParser.QueryExecContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 272
                self.execCommand()
                self.state = 274
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==297:
                    self.state = 273
                    self.match(PartiQLParser.COLON_SEMI)


                self.state = 276
                self.match(PartiQLParser.EOF)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplainOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.param = None # Token
            self.value = None # Token

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(PartiQLParser.IDENTIFIER)
            else:
                return self.getToken(PartiQLParser.IDENTIFIER, i)

        def getRuleIndex(self):
            return PartiQLParser.RULE_explainOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplainOption" ):
                listener.enterExplainOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplainOption" ):
                listener.exitExplainOption(self)




    def explainOption(self):

        localctx = PartiQLParser.ExplainOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_explainOption)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 280
            localctx.param = self.match(PartiQLParser.IDENTIFIER)
            self.state = 281
            localctx.value = self.match(PartiQLParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AsIdentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(PartiQLParser.AS, 0)

        def symbolPrimitive(self):
            return self.getTypedRuleContext(PartiQLParser.SymbolPrimitiveContext,0)


        def getRuleIndex(self):
            return PartiQLParser.RULE_asIdent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsIdent" ):
                listener.enterAsIdent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsIdent" ):
                listener.exitAsIdent(self)




    def asIdent(self):

        localctx = PartiQLParser.AsIdentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_asIdent)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 283
            self.match(PartiQLParser.AS)
            self.state = 284
            self.symbolPrimitive()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtIdentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(PartiQLParser.AT, 0)

        def symbolPrimitive(self):
            return self.getTypedRuleContext(PartiQLParser.SymbolPrimitiveContext,0)


        def getRuleIndex(self):
            return PartiQLParser.RULE_atIdent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtIdent" ):
                listener.enterAtIdent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtIdent" ):
                listener.exitAtIdent(self)




    def atIdent(self):

        localctx = PartiQLParser.AtIdentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_atIdent)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 286
            self.match(PartiQLParser.AT)
            self.state = 287
            self.symbolPrimitive()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ByIdentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BY(self):
            return self.getToken(PartiQLParser.BY, 0)

        def symbolPrimitive(self):
            return self.getTypedRuleContext(PartiQLParser.SymbolPrimitiveContext,0)


        def getRuleIndex(self):
            return PartiQLParser.RULE_byIdent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterByIdent" ):
                listener.enterByIdent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitByIdent" ):
                listener.exitByIdent(self)




    def byIdent(self):

        localctx = PartiQLParser.ByIdentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_byIdent)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 289
            self.match(PartiQLParser.BY)
            self.state = 290
            self.symbolPrimitive()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SymbolPrimitiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ident = None # Token

        def IDENTIFIER(self):
            return self.getToken(PartiQLParser.IDENTIFIER, 0)

        def IDENTIFIER_QUOTED(self):
            return self.getToken(PartiQLParser.IDENTIFIER_QUOTED, 0)

        def getRuleIndex(self):
            return PartiQLParser.RULE_symbolPrimitive

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbolPrimitive" ):
                listener.enterSymbolPrimitive(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbolPrimitive" ):
                listener.exitSymbolPrimitive(self)




    def symbolPrimitive(self):

        localctx = PartiQLParser.SymbolPrimitiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_symbolPrimitive)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 292
            localctx.ident = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==303 or _la==304):
                localctx.ident = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DqlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(PartiQLParser.ExprContext,0)


        def getRuleIndex(self):
            return PartiQLParser.RULE_dql

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDql" ):
                listener.enterDql(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDql" ):
                listener.exitDql(self)




    def dql(self):

        localctx = PartiQLParser.DqlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_dql)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 294
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExecCommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # ExprContext
            self._expr = None # ExprContext
            self.args = list() # of ExprContexts

        def EXEC(self):
            return self.getToken(PartiQLParser.EXEC, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PartiQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(PartiQLParser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PartiQLParser.COMMA)
            else:
                return self.getToken(PartiQLParser.COMMA, i)

        def getRuleIndex(self):
            return PartiQLParser.RULE_execCommand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecCommand" ):
                listener.enterExecCommand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecCommand" ):
                listener.exitExecCommand(self)




    def execCommand(self):

        localctx = PartiQLParser.ExecCommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_execCommand)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 296
            self.match(PartiQLParser.EXEC)
            self.state = 297
            localctx.name = self.expr()
            self.state = 306
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 9024796566781952) != 0) or ((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & -6051008311837327239) != 0) or ((((_la - 182)) & ~0x3f) == 0 and ((1 << (_la - 182)) & 68398559028338721) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & 9333320450659) != 0):
                self.state = 298
                localctx._expr = self.expr()
                localctx.args.append(localctx._expr)
                self.state = 303
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==270:
                    self.state = 299
                    self.match(PartiQLParser.COMMA)
                    self.state = 300
                    localctx._expr = self.expr()
                    localctx.args.append(localctx._expr)
                    self.state = 305
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DdlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def createCommand(self):
            return self.getTypedRuleContext(PartiQLParser.CreateCommandContext,0)


        def dropCommand(self):
            return self.getTypedRuleContext(PartiQLParser.DropCommandContext,0)


        def getRuleIndex(self):
            return PartiQLParser.RULE_ddl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDdl" ):
                listener.enterDdl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDdl" ):
                listener.exitDdl(self)




    def ddl(self):

        localctx = PartiQLParser.DdlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_ddl)
        try:
            self.state = 310
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [45]:
                self.enterOuterAlt(localctx, 1)
                self.state = 308
                self.createCommand()
                pass
            elif token in [70]:
                self.enterOuterAlt(localctx, 2)
                self.state = 309
                self.dropCommand()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateCommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PartiQLParser.RULE_createCommand

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class CreateIndexContext(CreateCommandContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.CreateCommandContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(PartiQLParser.CREATE, 0)
        def INDEX(self):
            return self.getToken(PartiQLParser.INDEX, 0)
        def ON(self):
            return self.getToken(PartiQLParser.ON, 0)
        def symbolPrimitive(self):
            return self.getTypedRuleContext(PartiQLParser.SymbolPrimitiveContext,0)

        def PAREN_LEFT(self):
            return self.getToken(PartiQLParser.PAREN_LEFT, 0)
        def pathSimple(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PartiQLParser.PathSimpleContext)
            else:
                return self.getTypedRuleContext(PartiQLParser.PathSimpleContext,i)

        def PAREN_RIGHT(self):
            return self.getToken(PartiQLParser.PAREN_RIGHT, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PartiQLParser.COMMA)
            else:
                return self.getToken(PartiQLParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateIndex" ):
                listener.enterCreateIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateIndex" ):
                listener.exitCreateIndex(self)


    class CreateTableContext(CreateCommandContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.CreateCommandContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(PartiQLParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(PartiQLParser.TABLE, 0)
        def symbolPrimitive(self):
            return self.getTypedRuleContext(PartiQLParser.SymbolPrimitiveContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTable" ):
                listener.enterCreateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTable" ):
                listener.exitCreateTable(self)



    def createCommand(self):

        localctx = PartiQLParser.CreateCommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_createCommand)
        self._la = 0 # Token type
        try:
            self.state = 330
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                localctx = PartiQLParser.CreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 312
                self.match(PartiQLParser.CREATE)
                self.state = 313
                self.match(PartiQLParser.TABLE)
                self.state = 314
                self.symbolPrimitive()
                pass

            elif la_ == 2:
                localctx = PartiQLParser.CreateIndexContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 315
                self.match(PartiQLParser.CREATE)
                self.state = 316
                self.match(PartiQLParser.INDEX)
                self.state = 317
                self.match(PartiQLParser.ON)
                self.state = 318
                self.symbolPrimitive()
                self.state = 319
                self.match(PartiQLParser.PAREN_LEFT)
                self.state = 320
                self.pathSimple()
                self.state = 325
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==270:
                    self.state = 321
                    self.match(PartiQLParser.COMMA)
                    self.state = 322
                    self.pathSimple()
                    self.state = 327
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 328
                self.match(PartiQLParser.PAREN_RIGHT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropCommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PartiQLParser.RULE_dropCommand

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DropTableContext(DropCommandContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.DropCommandContext
            super().__init__(parser)
            self.target = None # SymbolPrimitiveContext
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(PartiQLParser.DROP, 0)
        def TABLE(self):
            return self.getToken(PartiQLParser.TABLE, 0)
        def symbolPrimitive(self):
            return self.getTypedRuleContext(PartiQLParser.SymbolPrimitiveContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropTable" ):
                listener.enterDropTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropTable" ):
                listener.exitDropTable(self)


    class DropIndexContext(DropCommandContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.DropCommandContext
            super().__init__(parser)
            self.target = None # SymbolPrimitiveContext
            self.on = None # SymbolPrimitiveContext
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(PartiQLParser.DROP, 0)
        def INDEX(self):
            return self.getToken(PartiQLParser.INDEX, 0)
        def ON(self):
            return self.getToken(PartiQLParser.ON, 0)
        def symbolPrimitive(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PartiQLParser.SymbolPrimitiveContext)
            else:
                return self.getTypedRuleContext(PartiQLParser.SymbolPrimitiveContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropIndex" ):
                listener.enterDropIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropIndex" ):
                listener.exitDropIndex(self)



    def dropCommand(self):

        localctx = PartiQLParser.DropCommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_dropCommand)
        try:
            self.state = 341
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                localctx = PartiQLParser.DropTableContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 332
                self.match(PartiQLParser.DROP)
                self.state = 333
                self.match(PartiQLParser.TABLE)
                self.state = 334
                localctx.target = self.symbolPrimitive()
                pass

            elif la_ == 2:
                localctx = PartiQLParser.DropIndexContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 335
                self.match(PartiQLParser.DROP)
                self.state = 336
                self.match(PartiQLParser.INDEX)
                self.state = 337
                localctx.target = self.symbolPrimitive()
                self.state = 338
                self.match(PartiQLParser.ON)
                self.state = 339
                localctx.on = self.symbolPrimitive()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DmlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PartiQLParser.RULE_dml

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DmlDeleteContext(DmlContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.DmlContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def deleteCommand(self):
            return self.getTypedRuleContext(PartiQLParser.DeleteCommandContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDmlDelete" ):
                listener.enterDmlDelete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDmlDelete" ):
                listener.exitDmlDelete(self)


    class DmlInsertReturningContext(DmlContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.DmlContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def insertCommandReturning(self):
            return self.getTypedRuleContext(PartiQLParser.InsertCommandReturningContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDmlInsertReturning" ):
                listener.enterDmlInsertReturning(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDmlInsertReturning" ):
                listener.exitDmlInsertReturning(self)


    class DmlBaseWrapperContext(DmlContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.DmlContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def updateClause(self):
            return self.getTypedRuleContext(PartiQLParser.UpdateClauseContext,0)

        def dmlBaseCommand(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PartiQLParser.DmlBaseCommandContext)
            else:
                return self.getTypedRuleContext(PartiQLParser.DmlBaseCommandContext,i)

        def whereClause(self):
            return self.getTypedRuleContext(PartiQLParser.WhereClauseContext,0)

        def returningClause(self):
            return self.getTypedRuleContext(PartiQLParser.ReturningClauseContext,0)

        def fromClause(self):
            return self.getTypedRuleContext(PartiQLParser.FromClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDmlBaseWrapper" ):
                listener.enterDmlBaseWrapper(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDmlBaseWrapper" ):
                listener.exitDmlBaseWrapper(self)


    class DmlBaseContext(DmlContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.DmlContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def dmlBaseCommand(self):
            return self.getTypedRuleContext(PartiQLParser.DmlBaseCommandContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDmlBase" ):
                listener.enterDmlBase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDmlBase" ):
                listener.exitDmlBase(self)



    def dml(self):

        localctx = PartiQLParser.DmlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_dml)
        self._la = 0 # Token type
        try:
            self.state = 370
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
            if la_ == 1:
                localctx = PartiQLParser.DmlBaseWrapperContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 343
                self.updateClause()
                self.state = 345 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 344
                    self.dmlBaseCommand()
                    self.state = 347 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==112 or _la==173 or ((((_la - 185)) & ~0x3f) == 0 and ((1 << (_la - 185)) & 72057594574798849) != 0)):
                        break

                self.state = 350
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==225:
                    self.state = 349
                    self.whereClause()


                self.state = 353
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==246:
                    self.state = 352
                    self.returningClause()


                pass

            elif la_ == 2:
                localctx = PartiQLParser.DmlBaseWrapperContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 355
                self.fromClause()
                self.state = 357
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==225:
                    self.state = 356
                    self.whereClause()


                self.state = 360 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 359
                    self.dmlBaseCommand()
                    self.state = 362 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==112 or _la==173 or ((((_la - 185)) & ~0x3f) == 0 and ((1 << (_la - 185)) & 72057594574798849) != 0)):
                        break

                self.state = 365
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==246:
                    self.state = 364
                    self.returningClause()


                pass

            elif la_ == 3:
                localctx = PartiQLParser.DmlDeleteContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 367
                self.deleteCommand()
                pass

            elif la_ == 4:
                localctx = PartiQLParser.DmlInsertReturningContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 368
                self.insertCommandReturning()
                pass

            elif la_ == 5:
                localctx = PartiQLParser.DmlBaseContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 369
                self.dmlBaseCommand()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DmlBaseCommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def insertCommand(self):
            return self.getTypedRuleContext(PartiQLParser.InsertCommandContext,0)


        def setCommand(self):
            return self.getTypedRuleContext(PartiQLParser.SetCommandContext,0)


        def replaceCommand(self):
            return self.getTypedRuleContext(PartiQLParser.ReplaceCommandContext,0)


        def removeCommand(self):
            return self.getTypedRuleContext(PartiQLParser.RemoveCommandContext,0)


        def upsertCommand(self):
            return self.getTypedRuleContext(PartiQLParser.UpsertCommandContext,0)


        def getRuleIndex(self):
            return PartiQLParser.RULE_dmlBaseCommand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDmlBaseCommand" ):
                listener.enterDmlBaseCommand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDmlBaseCommand" ):
                listener.exitDmlBaseCommand(self)




    def dmlBaseCommand(self):

        localctx = PartiQLParser.DmlBaseCommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_dmlBaseCommand)
        try:
            self.state = 377
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [112]:
                self.enterOuterAlt(localctx, 1)
                self.state = 372
                self.insertCommand()
                pass
            elif token in [185]:
                self.enterOuterAlt(localctx, 2)
                self.state = 373
                self.setCommand()
                pass
            elif token in [173]:
                self.enterOuterAlt(localctx, 3)
                self.state = 374
                self.replaceCommand()
                pass
            elif token in [241]:
                self.enterOuterAlt(localctx, 4)
                self.state = 375
                self.removeCommand()
                pass
            elif token in [214]:
                self.enterOuterAlt(localctx, 5)
                self.state = 376
                self.upsertCommand()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PathSimpleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbolPrimitive(self):
            return self.getTypedRuleContext(PartiQLParser.SymbolPrimitiveContext,0)


        def pathSimpleSteps(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PartiQLParser.PathSimpleStepsContext)
            else:
                return self.getTypedRuleContext(PartiQLParser.PathSimpleStepsContext,i)


        def getRuleIndex(self):
            return PartiQLParser.RULE_pathSimple

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPathSimple" ):
                listener.enterPathSimple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPathSimple" ):
                listener.exitPathSimple(self)




    def pathSimple(self):

        localctx = PartiQLParser.PathSimpleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_pathSimple)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 379
            self.symbolPrimitive()
            self.state = 383
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==290 or _la==299:
                self.state = 380
                self.pathSimpleSteps()
                self.state = 385
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PathSimpleStepsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PartiQLParser.RULE_pathSimpleSteps

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PathSimpleLiteralContext(PathSimpleStepsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.PathSimpleStepsContext
            super().__init__(parser)
            self.key = None # LiteralContext
            self.copyFrom(ctx)

        def BRACKET_LEFT(self):
            return self.getToken(PartiQLParser.BRACKET_LEFT, 0)
        def BRACKET_RIGHT(self):
            return self.getToken(PartiQLParser.BRACKET_RIGHT, 0)
        def literal(self):
            return self.getTypedRuleContext(PartiQLParser.LiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPathSimpleLiteral" ):
                listener.enterPathSimpleLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPathSimpleLiteral" ):
                listener.exitPathSimpleLiteral(self)


    class PathSimpleDotSymbolContext(PathSimpleStepsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.PathSimpleStepsContext
            super().__init__(parser)
            self.key = None # SymbolPrimitiveContext
            self.copyFrom(ctx)

        def PERIOD(self):
            return self.getToken(PartiQLParser.PERIOD, 0)
        def symbolPrimitive(self):
            return self.getTypedRuleContext(PartiQLParser.SymbolPrimitiveContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPathSimpleDotSymbol" ):
                listener.enterPathSimpleDotSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPathSimpleDotSymbol" ):
                listener.exitPathSimpleDotSymbol(self)


    class PathSimpleSymbolContext(PathSimpleStepsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.PathSimpleStepsContext
            super().__init__(parser)
            self.key = None # SymbolPrimitiveContext
            self.copyFrom(ctx)

        def BRACKET_LEFT(self):
            return self.getToken(PartiQLParser.BRACKET_LEFT, 0)
        def BRACKET_RIGHT(self):
            return self.getToken(PartiQLParser.BRACKET_RIGHT, 0)
        def symbolPrimitive(self):
            return self.getTypedRuleContext(PartiQLParser.SymbolPrimitiveContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPathSimpleSymbol" ):
                listener.enterPathSimpleSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPathSimpleSymbol" ):
                listener.exitPathSimpleSymbol(self)



    def pathSimpleSteps(self):

        localctx = PartiQLParser.PathSimpleStepsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_pathSimpleSteps)
        try:
            self.state = 396
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                localctx = PartiQLParser.PathSimpleLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 386
                self.match(PartiQLParser.BRACKET_LEFT)
                self.state = 387
                localctx.key = self.literal()
                self.state = 388
                self.match(PartiQLParser.BRACKET_RIGHT)
                pass

            elif la_ == 2:
                localctx = PartiQLParser.PathSimpleSymbolContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 390
                self.match(PartiQLParser.BRACKET_LEFT)
                self.state = 391
                localctx.key = self.symbolPrimitive()
                self.state = 392
                self.match(PartiQLParser.BRACKET_RIGHT)
                pass

            elif la_ == 3:
                localctx = PartiQLParser.PathSimpleDotSymbolContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 394
                self.match(PartiQLParser.PERIOD)
                self.state = 395
                localctx.key = self.symbolPrimitive()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplaceCommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.value = None # ExprContext

        def REPLACE(self):
            return self.getToken(PartiQLParser.REPLACE, 0)

        def INTO(self):
            return self.getToken(PartiQLParser.INTO, 0)

        def symbolPrimitive(self):
            return self.getTypedRuleContext(PartiQLParser.SymbolPrimitiveContext,0)


        def expr(self):
            return self.getTypedRuleContext(PartiQLParser.ExprContext,0)


        def asIdent(self):
            return self.getTypedRuleContext(PartiQLParser.AsIdentContext,0)


        def getRuleIndex(self):
            return PartiQLParser.RULE_replaceCommand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplaceCommand" ):
                listener.enterReplaceCommand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplaceCommand" ):
                listener.exitReplaceCommand(self)




    def replaceCommand(self):

        localctx = PartiQLParser.ReplaceCommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_replaceCommand)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 398
            self.match(PartiQLParser.REPLACE)
            self.state = 399
            self.match(PartiQLParser.INTO)
            self.state = 400
            self.symbolPrimitive()
            self.state = 402
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 401
                self.asIdent()


            self.state = 404
            localctx.value = self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpsertCommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.value = None # ExprContext

        def UPSERT(self):
            return self.getToken(PartiQLParser.UPSERT, 0)

        def INTO(self):
            return self.getToken(PartiQLParser.INTO, 0)

        def symbolPrimitive(self):
            return self.getTypedRuleContext(PartiQLParser.SymbolPrimitiveContext,0)


        def expr(self):
            return self.getTypedRuleContext(PartiQLParser.ExprContext,0)


        def asIdent(self):
            return self.getTypedRuleContext(PartiQLParser.AsIdentContext,0)


        def getRuleIndex(self):
            return PartiQLParser.RULE_upsertCommand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpsertCommand" ):
                listener.enterUpsertCommand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpsertCommand" ):
                listener.exitUpsertCommand(self)




    def upsertCommand(self):

        localctx = PartiQLParser.UpsertCommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_upsertCommand)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 406
            self.match(PartiQLParser.UPSERT)
            self.state = 407
            self.match(PartiQLParser.INTO)
            self.state = 408
            self.symbolPrimitive()
            self.state = 410
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 409
                self.asIdent()


            self.state = 412
            localctx.value = self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RemoveCommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMOVE(self):
            return self.getToken(PartiQLParser.REMOVE, 0)

        def pathSimple(self):
            return self.getTypedRuleContext(PartiQLParser.PathSimpleContext,0)


        def getRuleIndex(self):
            return PartiQLParser.RULE_removeCommand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemoveCommand" ):
                listener.enterRemoveCommand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemoveCommand" ):
                listener.exitRemoveCommand(self)




    def removeCommand(self):

        localctx = PartiQLParser.RemoveCommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_removeCommand)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 414
            self.match(PartiQLParser.REMOVE)
            self.state = 415
            self.pathSimple()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertCommandReturningContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.value = None # ExprContext
            self.pos = None # ExprContext

        def INSERT(self):
            return self.getToken(PartiQLParser.INSERT, 0)

        def INTO(self):
            return self.getToken(PartiQLParser.INTO, 0)

        def pathSimple(self):
            return self.getTypedRuleContext(PartiQLParser.PathSimpleContext,0)


        def VALUE(self):
            return self.getToken(PartiQLParser.VALUE, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PartiQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(PartiQLParser.ExprContext,i)


        def AT(self):
            return self.getToken(PartiQLParser.AT, 0)

        def onConflictClause(self):
            return self.getTypedRuleContext(PartiQLParser.OnConflictClauseContext,0)


        def returningClause(self):
            return self.getTypedRuleContext(PartiQLParser.ReturningClauseContext,0)


        def getRuleIndex(self):
            return PartiQLParser.RULE_insertCommandReturning

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertCommandReturning" ):
                listener.enterInsertCommandReturning(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertCommandReturning" ):
                listener.exitInsertCommandReturning(self)




    def insertCommandReturning(self):

        localctx = PartiQLParser.InsertCommandReturningContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_insertCommandReturning)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 417
            self.match(PartiQLParser.INSERT)
            self.state = 418
            self.match(PartiQLParser.INTO)
            self.state = 419
            self.pathSimple()
            self.state = 420
            self.match(PartiQLParser.VALUE)
            self.state = 421
            localctx.value = self.expr()
            self.state = 424
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 422
                self.match(PartiQLParser.AT)
                self.state = 423
                localctx.pos = self.expr()


            self.state = 427
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==147:
                self.state = 426
                self.onConflictClause()


            self.state = 430
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==246:
                self.state = 429
                self.returningClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertCommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PartiQLParser.RULE_insertCommand

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class InsertLegacyContext(InsertCommandContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.InsertCommandContext
            super().__init__(parser)
            self.value = None # ExprContext
            self.pos = None # ExprContext
            self.copyFrom(ctx)

        def INSERT(self):
            return self.getToken(PartiQLParser.INSERT, 0)
        def INTO(self):
            return self.getToken(PartiQLParser.INTO, 0)
        def pathSimple(self):
            return self.getTypedRuleContext(PartiQLParser.PathSimpleContext,0)

        def VALUE(self):
            return self.getToken(PartiQLParser.VALUE, 0)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PartiQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(PartiQLParser.ExprContext,i)

        def AT(self):
            return self.getToken(PartiQLParser.AT, 0)
        def onConflictClause(self):
            return self.getTypedRuleContext(PartiQLParser.OnConflictClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertLegacy" ):
                listener.enterInsertLegacy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertLegacy" ):
                listener.exitInsertLegacy(self)


    class InsertContext(InsertCommandContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.InsertCommandContext
            super().__init__(parser)
            self.value = None # ExprContext
            self.copyFrom(ctx)

        def INSERT(self):
            return self.getToken(PartiQLParser.INSERT, 0)
        def INTO(self):
            return self.getToken(PartiQLParser.INTO, 0)
        def symbolPrimitive(self):
            return self.getTypedRuleContext(PartiQLParser.SymbolPrimitiveContext,0)

        def expr(self):
            return self.getTypedRuleContext(PartiQLParser.ExprContext,0)

        def asIdent(self):
            return self.getTypedRuleContext(PartiQLParser.AsIdentContext,0)

        def onConflictClause(self):
            return self.getTypedRuleContext(PartiQLParser.OnConflictClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert" ):
                listener.enterInsert(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert" ):
                listener.exitInsert(self)



    def insertCommand(self):

        localctx = PartiQLParser.InsertCommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_insertCommand)
        self._la = 0 # Token type
        try:
            self.state = 454
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                localctx = PartiQLParser.InsertLegacyContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 432
                self.match(PartiQLParser.INSERT)
                self.state = 433
                self.match(PartiQLParser.INTO)
                self.state = 434
                self.pathSimple()
                self.state = 435
                self.match(PartiQLParser.VALUE)
                self.state = 436
                localctx.value = self.expr()
                self.state = 439
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13:
                    self.state = 437
                    self.match(PartiQLParser.AT)
                    self.state = 438
                    localctx.pos = self.expr()


                self.state = 442
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==147:
                    self.state = 441
                    self.onConflictClause()


                pass

            elif la_ == 2:
                localctx = PartiQLParser.InsertContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 444
                self.match(PartiQLParser.INSERT)
                self.state = 445
                self.match(PartiQLParser.INTO)
                self.state = 446
                self.symbolPrimitive()
                self.state = 448
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 447
                    self.asIdent()


                self.state = 450
                localctx.value = self.expr()
                self.state = 452
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==147:
                    self.state = 451
                    self.onConflictClause()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OnConflictClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PartiQLParser.RULE_onConflictClause

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class OnConflictLegacyContext(OnConflictClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.OnConflictClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ON(self):
            return self.getToken(PartiQLParser.ON, 0)
        def CONFLICT(self):
            return self.getToken(PartiQLParser.CONFLICT, 0)
        def WHERE(self):
            return self.getToken(PartiQLParser.WHERE, 0)
        def expr(self):
            return self.getTypedRuleContext(PartiQLParser.ExprContext,0)

        def DO(self):
            return self.getToken(PartiQLParser.DO, 0)
        def NOTHING(self):
            return self.getToken(PartiQLParser.NOTHING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOnConflictLegacy" ):
                listener.enterOnConflictLegacy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOnConflictLegacy" ):
                listener.exitOnConflictLegacy(self)


    class OnConflictContext(OnConflictClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.OnConflictClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ON(self):
            return self.getToken(PartiQLParser.ON, 0)
        def CONFLICT(self):
            return self.getToken(PartiQLParser.CONFLICT, 0)
        def conflictAction(self):
            return self.getTypedRuleContext(PartiQLParser.ConflictActionContext,0)

        def conflictTarget(self):
            return self.getTypedRuleContext(PartiQLParser.ConflictTargetContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOnConflict" ):
                listener.enterOnConflict(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOnConflict" ):
                listener.exitOnConflict(self)



    def onConflictClause(self):

        localctx = PartiQLParser.OnConflictClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_onConflictClause)
        self._la = 0 # Token type
        try:
            self.state = 469
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                localctx = PartiQLParser.OnConflictLegacyContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 456
                self.match(PartiQLParser.ON)
                self.state = 457
                self.match(PartiQLParser.CONFLICT)
                self.state = 458
                self.match(PartiQLParser.WHERE)
                self.state = 459
                self.expr()
                self.state = 460
                self.match(PartiQLParser.DO)
                self.state = 461
                self.match(PartiQLParser.NOTHING)
                pass

            elif la_ == 2:
                localctx = PartiQLParser.OnConflictContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 463
                self.match(PartiQLParser.ON)
                self.state = 464
                self.match(PartiQLParser.CONFLICT)
                self.state = 466
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==147 or _la==294:
                    self.state = 465
                    self.conflictTarget()


                self.state = 468
                self.conflictAction()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConflictTargetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PAREN_LEFT(self):
            return self.getToken(PartiQLParser.PAREN_LEFT, 0)

        def symbolPrimitive(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PartiQLParser.SymbolPrimitiveContext)
            else:
                return self.getTypedRuleContext(PartiQLParser.SymbolPrimitiveContext,i)


        def PAREN_RIGHT(self):
            return self.getToken(PartiQLParser.PAREN_RIGHT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PartiQLParser.COMMA)
            else:
                return self.getToken(PartiQLParser.COMMA, i)

        def ON(self):
            return self.getToken(PartiQLParser.ON, 0)

        def CONSTRAINT(self):
            return self.getToken(PartiQLParser.CONSTRAINT, 0)

        def constraintName(self):
            return self.getTypedRuleContext(PartiQLParser.ConstraintNameContext,0)


        def getRuleIndex(self):
            return PartiQLParser.RULE_conflictTarget

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConflictTarget" ):
                listener.enterConflictTarget(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConflictTarget" ):
                listener.exitConflictTarget(self)




    def conflictTarget(self):

        localctx = PartiQLParser.ConflictTargetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_conflictTarget)
        self._la = 0 # Token type
        try:
            self.state = 485
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [294]:
                self.enterOuterAlt(localctx, 1)
                self.state = 471
                self.match(PartiQLParser.PAREN_LEFT)
                self.state = 472
                self.symbolPrimitive()
                self.state = 477
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==270:
                    self.state = 473
                    self.match(PartiQLParser.COMMA)
                    self.state = 474
                    self.symbolPrimitive()
                    self.state = 479
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 480
                self.match(PartiQLParser.PAREN_RIGHT)
                pass
            elif token in [147]:
                self.enterOuterAlt(localctx, 2)
                self.state = 482
                self.match(PartiQLParser.ON)
                self.state = 483
                self.match(PartiQLParser.CONSTRAINT)
                self.state = 484
                self.constraintName()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstraintNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbolPrimitive(self):
            return self.getTypedRuleContext(PartiQLParser.SymbolPrimitiveContext,0)


        def getRuleIndex(self):
            return PartiQLParser.RULE_constraintName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstraintName" ):
                listener.enterConstraintName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstraintName" ):
                listener.exitConstraintName(self)




    def constraintName(self):

        localctx = PartiQLParser.ConstraintNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_constraintName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 487
            self.symbolPrimitive()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConflictActionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DO(self):
            return self.getToken(PartiQLParser.DO, 0)

        def NOTHING(self):
            return self.getToken(PartiQLParser.NOTHING, 0)

        def REPLACE(self):
            return self.getToken(PartiQLParser.REPLACE, 0)

        def doReplace(self):
            return self.getTypedRuleContext(PartiQLParser.DoReplaceContext,0)


        def UPDATE(self):
            return self.getToken(PartiQLParser.UPDATE, 0)

        def doUpdate(self):
            return self.getTypedRuleContext(PartiQLParser.DoUpdateContext,0)


        def getRuleIndex(self):
            return PartiQLParser.RULE_conflictAction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConflictAction" ):
                listener.enterConflictAction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConflictAction" ):
                listener.exitConflictAction(self)




    def conflictAction(self):

        localctx = PartiQLParser.ConflictActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_conflictAction)
        try:
            self.state = 497
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 489
                self.match(PartiQLParser.DO)
                self.state = 490
                self.match(PartiQLParser.NOTHING)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 491
                self.match(PartiQLParser.DO)
                self.state = 492
                self.match(PartiQLParser.REPLACE)
                self.state = 493
                self.doReplace()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 494
                self.match(PartiQLParser.DO)
                self.state = 495
                self.match(PartiQLParser.UPDATE)
                self.state = 496
                self.doUpdate()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DoReplaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCLUDED(self):
            return self.getToken(PartiQLParser.EXCLUDED, 0)

        def getRuleIndex(self):
            return PartiQLParser.RULE_doReplace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoReplace" ):
                listener.enterDoReplace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoReplace" ):
                listener.exitDoReplace(self)




    def doReplace(self):

        localctx = PartiQLParser.DoReplaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_doReplace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 499
            self.match(PartiQLParser.EXCLUDED)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DoUpdateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCLUDED(self):
            return self.getToken(PartiQLParser.EXCLUDED, 0)

        def getRuleIndex(self):
            return PartiQLParser.RULE_doUpdate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoUpdate" ):
                listener.enterDoUpdate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoUpdate" ):
                listener.exitDoUpdate(self)




    def doUpdate(self):

        localctx = PartiQLParser.DoUpdateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_doUpdate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 501
            self.match(PartiQLParser.EXCLUDED)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpdateClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE(self):
            return self.getToken(PartiQLParser.UPDATE, 0)

        def tableBaseReference(self):
            return self.getTypedRuleContext(PartiQLParser.TableBaseReferenceContext,0)


        def getRuleIndex(self):
            return PartiQLParser.RULE_updateClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdateClause" ):
                listener.enterUpdateClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdateClause" ):
                listener.exitUpdateClause(self)




    def updateClause(self):

        localctx = PartiQLParser.UpdateClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_updateClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 503
            self.match(PartiQLParser.UPDATE)
            self.state = 504
            self.tableBaseReference()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetCommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(PartiQLParser.SET, 0)

        def setAssignment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PartiQLParser.SetAssignmentContext)
            else:
                return self.getTypedRuleContext(PartiQLParser.SetAssignmentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PartiQLParser.COMMA)
            else:
                return self.getToken(PartiQLParser.COMMA, i)

        def getRuleIndex(self):
            return PartiQLParser.RULE_setCommand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetCommand" ):
                listener.enterSetCommand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetCommand" ):
                listener.exitSetCommand(self)




    def setCommand(self):

        localctx = PartiQLParser.SetCommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_setCommand)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 506
            self.match(PartiQLParser.SET)
            self.state = 507
            self.setAssignment()
            self.state = 512
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==270:
                self.state = 508
                self.match(PartiQLParser.COMMA)
                self.state = 509
                self.setAssignment()
                self.state = 514
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pathSimple(self):
            return self.getTypedRuleContext(PartiQLParser.PathSimpleContext,0)


        def EQ(self):
            return self.getToken(PartiQLParser.EQ, 0)

        def expr(self):
            return self.getTypedRuleContext(PartiQLParser.ExprContext,0)


        def getRuleIndex(self):
            return PartiQLParser.RULE_setAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetAssignment" ):
                listener.enterSetAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetAssignment" ):
                listener.exitSetAssignment(self)




    def setAssignment(self):

        localctx = PartiQLParser.SetAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_setAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 515
            self.pathSimple()
            self.state = 516
            self.match(PartiQLParser.EQ)
            self.state = 517
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeleteCommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(PartiQLParser.DELETE, 0)

        def fromClauseSimple(self):
            return self.getTypedRuleContext(PartiQLParser.FromClauseSimpleContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(PartiQLParser.WhereClauseContext,0)


        def returningClause(self):
            return self.getTypedRuleContext(PartiQLParser.ReturningClauseContext,0)


        def getRuleIndex(self):
            return PartiQLParser.RULE_deleteCommand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeleteCommand" ):
                listener.enterDeleteCommand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeleteCommand" ):
                listener.exitDeleteCommand(self)




    def deleteCommand(self):

        localctx = PartiQLParser.DeleteCommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_deleteCommand)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 519
            self.match(PartiQLParser.DELETE)
            self.state = 520
            self.fromClauseSimple()
            self.state = 522
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==225:
                self.state = 521
                self.whereClause()


            self.state = 525
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==246:
                self.state = 524
                self.returningClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturningClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURNING(self):
            return self.getToken(PartiQLParser.RETURNING, 0)

        def returningColumn(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PartiQLParser.ReturningColumnContext)
            else:
                return self.getTypedRuleContext(PartiQLParser.ReturningColumnContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PartiQLParser.COMMA)
            else:
                return self.getToken(PartiQLParser.COMMA, i)

        def getRuleIndex(self):
            return PartiQLParser.RULE_returningClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturningClause" ):
                listener.enterReturningClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturningClause" ):
                listener.exitReturningClause(self)




    def returningClause(self):

        localctx = PartiQLParser.ReturningClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_returningClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 527
            self.match(PartiQLParser.RETURNING)
            self.state = 528
            self.returningColumn()
            self.state = 533
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==270:
                self.state = 529
                self.match(PartiQLParser.COMMA)
                self.state = 530
                self.returningColumn()
                self.state = 535
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturningColumnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.status = None # Token
            self.age = None # Token
            self.col = None # ExprContext

        def ASTERISK(self):
            return self.getToken(PartiQLParser.ASTERISK, 0)

        def MODIFIED(self):
            return self.getToken(PartiQLParser.MODIFIED, 0)

        def ALL(self):
            return self.getToken(PartiQLParser.ALL, 0)

        def OLD(self):
            return self.getToken(PartiQLParser.OLD, 0)

        def NEW(self):
            return self.getToken(PartiQLParser.NEW, 0)

        def expr(self):
            return self.getTypedRuleContext(PartiQLParser.ExprContext,0)


        def getRuleIndex(self):
            return PartiQLParser.RULE_returningColumn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturningColumn" ):
                listener.enterReturningColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturningColumn" ):
                listener.exitReturningColumn(self)




    def returningColumn(self):

        localctx = PartiQLParser.ReturningColumnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_returningColumn)
        self._la = 0 # Token type
        try:
            self.state = 542
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 536
                localctx.status = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==4 or _la==247):
                    localctx.status = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 537
                localctx.age = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==248 or _la==249):
                    localctx.age = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 538
                self.match(PartiQLParser.ASTERISK)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 539
                localctx.status = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==4 or _la==247):
                    localctx.status = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 540
                localctx.age = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==248 or _la==249):
                    localctx.age = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 541
                localctx.col = self.expr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromClauseSimpleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PartiQLParser.RULE_fromClauseSimple

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class FromClauseSimpleExplicitContext(FromClauseSimpleContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.FromClauseSimpleContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FROM(self):
            return self.getToken(PartiQLParser.FROM, 0)
        def pathSimple(self):
            return self.getTypedRuleContext(PartiQLParser.PathSimpleContext,0)

        def asIdent(self):
            return self.getTypedRuleContext(PartiQLParser.AsIdentContext,0)

        def atIdent(self):
            return self.getTypedRuleContext(PartiQLParser.AtIdentContext,0)

        def byIdent(self):
            return self.getTypedRuleContext(PartiQLParser.ByIdentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromClauseSimpleExplicit" ):
                listener.enterFromClauseSimpleExplicit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromClauseSimpleExplicit" ):
                listener.exitFromClauseSimpleExplicit(self)


    class FromClauseSimpleImplicitContext(FromClauseSimpleContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.FromClauseSimpleContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FROM(self):
            return self.getToken(PartiQLParser.FROM, 0)
        def pathSimple(self):
            return self.getTypedRuleContext(PartiQLParser.PathSimpleContext,0)

        def symbolPrimitive(self):
            return self.getTypedRuleContext(PartiQLParser.SymbolPrimitiveContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromClauseSimpleImplicit" ):
                listener.enterFromClauseSimpleImplicit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromClauseSimpleImplicit" ):
                listener.exitFromClauseSimpleImplicit(self)



    def fromClauseSimple(self):

        localctx = PartiQLParser.FromClauseSimpleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_fromClauseSimple)
        self._la = 0 # Token type
        try:
            self.state = 559
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                localctx = PartiQLParser.FromClauseSimpleExplicitContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 544
                self.match(PartiQLParser.FROM)
                self.state = 545
                self.pathSimple()
                self.state = 547
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 546
                    self.asIdent()


                self.state = 550
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13:
                    self.state = 549
                    self.atIdent()


                self.state = 553
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 552
                    self.byIdent()


                pass

            elif la_ == 2:
                localctx = PartiQLParser.FromClauseSimpleImplicitContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 555
                self.match(PartiQLParser.FROM)
                self.state = 556
                self.pathSimple()
                self.state = 557
                self.symbolPrimitive()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhereClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.arg = None # ExprContext

        def WHERE(self):
            return self.getToken(PartiQLParser.WHERE, 0)

        def expr(self):
            return self.getTypedRuleContext(PartiQLParser.ExprContext,0)


        def getRuleIndex(self):
            return PartiQLParser.RULE_whereClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhereClause" ):
                listener.enterWhereClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhereClause" ):
                listener.exitWhereClause(self)




    def whereClause(self):

        localctx = PartiQLParser.WhereClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_whereClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 561
            self.match(PartiQLParser.WHERE)
            self.state = 562
            localctx.arg = self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PartiQLParser.RULE_selectClause

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SelectAllContext(SelectClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.SelectClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SELECT(self):
            return self.getToken(PartiQLParser.SELECT, 0)
        def ASTERISK(self):
            return self.getToken(PartiQLParser.ASTERISK, 0)
        def setQuantifierStrategy(self):
            return self.getTypedRuleContext(PartiQLParser.SetQuantifierStrategyContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectAll" ):
                listener.enterSelectAll(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectAll" ):
                listener.exitSelectAll(self)


    class SelectValueContext(SelectClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.SelectClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SELECT(self):
            return self.getToken(PartiQLParser.SELECT, 0)
        def VALUE(self):
            return self.getToken(PartiQLParser.VALUE, 0)
        def expr(self):
            return self.getTypedRuleContext(PartiQLParser.ExprContext,0)

        def setQuantifierStrategy(self):
            return self.getTypedRuleContext(PartiQLParser.SetQuantifierStrategyContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectValue" ):
                listener.enterSelectValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectValue" ):
                listener.exitSelectValue(self)


    class SelectItemsContext(SelectClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.SelectClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SELECT(self):
            return self.getToken(PartiQLParser.SELECT, 0)
        def projectionItems(self):
            return self.getTypedRuleContext(PartiQLParser.ProjectionItemsContext,0)

        def setQuantifierStrategy(self):
            return self.getTypedRuleContext(PartiQLParser.SetQuantifierStrategyContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectItems" ):
                listener.enterSelectItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectItems" ):
                listener.exitSelectItems(self)


    class SelectPivotContext(SelectClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.SelectClauseContext
            super().__init__(parser)
            self.pivot = None # ExprContext
            self.at = None # ExprContext
            self.copyFrom(ctx)

        def PIVOT(self):
            return self.getToken(PartiQLParser.PIVOT, 0)
        def AT(self):
            return self.getToken(PartiQLParser.AT, 0)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PartiQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(PartiQLParser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectPivot" ):
                listener.enterSelectPivot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectPivot" ):
                listener.exitSelectPivot(self)



    def selectClause(self):

        localctx = PartiQLParser.SelectClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_selectClause)
        self._la = 0 # Token type
        try:
            self.state = 585
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                localctx = PartiQLParser.SelectAllContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 564
                self.match(PartiQLParser.SELECT)
                self.state = 566
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==4 or _la==67:
                    self.state = 565
                    self.setQuantifierStrategy()


                self.state = 568
                self.match(PartiQLParser.ASTERISK)
                pass

            elif la_ == 2:
                localctx = PartiQLParser.SelectItemsContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 569
                self.match(PartiQLParser.SELECT)
                self.state = 571
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==4 or _la==67:
                    self.state = 570
                    self.setQuantifierStrategy()


                self.state = 573
                self.projectionItems()
                pass

            elif la_ == 3:
                localctx = PartiQLParser.SelectValueContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 574
                self.match(PartiQLParser.SELECT)
                self.state = 576
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==4 or _la==67:
                    self.state = 575
                    self.setQuantifierStrategy()


                self.state = 578
                self.match(PartiQLParser.VALUE)
                self.state = 579
                self.expr()
                pass

            elif la_ == 4:
                localctx = PartiQLParser.SelectPivotContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 580
                self.match(PartiQLParser.PIVOT)
                self.state = 581
                localctx.pivot = self.expr()
                self.state = 582
                self.match(PartiQLParser.AT)
                self.state = 583
                localctx.at = self.expr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProjectionItemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def projectionItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PartiQLParser.ProjectionItemContext)
            else:
                return self.getTypedRuleContext(PartiQLParser.ProjectionItemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PartiQLParser.COMMA)
            else:
                return self.getToken(PartiQLParser.COMMA, i)

        def getRuleIndex(self):
            return PartiQLParser.RULE_projectionItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProjectionItems" ):
                listener.enterProjectionItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProjectionItems" ):
                listener.exitProjectionItems(self)




    def projectionItems(self):

        localctx = PartiQLParser.ProjectionItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_projectionItems)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 587
            self.projectionItem()
            self.state = 592
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==270:
                self.state = 588
                self.match(PartiQLParser.COMMA)
                self.state = 589
                self.projectionItem()
                self.state = 594
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProjectionItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(PartiQLParser.ExprContext,0)


        def symbolPrimitive(self):
            return self.getTypedRuleContext(PartiQLParser.SymbolPrimitiveContext,0)


        def AS(self):
            return self.getToken(PartiQLParser.AS, 0)

        def getRuleIndex(self):
            return PartiQLParser.RULE_projectionItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProjectionItem" ):
                listener.enterProjectionItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProjectionItem" ):
                listener.exitProjectionItem(self)




    def projectionItem(self):

        localctx = PartiQLParser.ProjectionItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_projectionItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 595
            self.expr()
            self.state = 600
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10 or _la==303 or _la==304:
                self.state = 597
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 596
                    self.match(PartiQLParser.AS)


                self.state = 599
                self.symbolPrimitive()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetQuantifierStrategyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISTINCT(self):
            return self.getToken(PartiQLParser.DISTINCT, 0)

        def ALL(self):
            return self.getToken(PartiQLParser.ALL, 0)

        def getRuleIndex(self):
            return PartiQLParser.RULE_setQuantifierStrategy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetQuantifierStrategy" ):
                listener.enterSetQuantifierStrategy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetQuantifierStrategy" ):
                listener.exitSetQuantifierStrategy(self)




    def setQuantifierStrategy(self):

        localctx = PartiQLParser.SetQuantifierStrategyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_setQuantifierStrategy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 602
            _la = self._input.LA(1)
            if not(_la==4 or _la==67):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LET(self):
            return self.getToken(PartiQLParser.LET, 0)

        def letBinding(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PartiQLParser.LetBindingContext)
            else:
                return self.getTypedRuleContext(PartiQLParser.LetBindingContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PartiQLParser.COMMA)
            else:
                return self.getToken(PartiQLParser.COMMA, i)

        def getRuleIndex(self):
            return PartiQLParser.RULE_letClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetClause" ):
                listener.enterLetClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetClause" ):
                listener.exitLetClause(self)




    def letClause(self):

        localctx = PartiQLParser.LetClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_letClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 604
            self.match(PartiQLParser.LET)
            self.state = 605
            self.letBinding()
            self.state = 610
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,55,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 606
                    self.match(PartiQLParser.COMMA)
                    self.state = 607
                    self.letBinding() 
                self.state = 612
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,55,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetBindingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(PartiQLParser.ExprContext,0)


        def AS(self):
            return self.getToken(PartiQLParser.AS, 0)

        def symbolPrimitive(self):
            return self.getTypedRuleContext(PartiQLParser.SymbolPrimitiveContext,0)


        def getRuleIndex(self):
            return PartiQLParser.RULE_letBinding

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetBinding" ):
                listener.enterLetBinding(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetBinding" ):
                listener.exitLetBinding(self)




    def letBinding(self):

        localctx = PartiQLParser.LetBindingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_letBinding)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 613
            self.expr()
            self.state = 614
            self.match(PartiQLParser.AS)
            self.state = 615
            self.symbolPrimitive()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(PartiQLParser.ORDER, 0)

        def BY(self):
            return self.getToken(PartiQLParser.BY, 0)

        def orderSortSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PartiQLParser.OrderSortSpecContext)
            else:
                return self.getTypedRuleContext(PartiQLParser.OrderSortSpecContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PartiQLParser.COMMA)
            else:
                return self.getToken(PartiQLParser.COMMA, i)

        def getRuleIndex(self):
            return PartiQLParser.RULE_orderByClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderByClause" ):
                listener.enterOrderByClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderByClause" ):
                listener.exitOrderByClause(self)




    def orderByClause(self):

        localctx = PartiQLParser.OrderByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_orderByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 617
            self.match(PartiQLParser.ORDER)
            self.state = 618
            self.match(PartiQLParser.BY)
            self.state = 619
            self.orderSortSpec()
            self.state = 624
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,56,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 620
                    self.match(PartiQLParser.COMMA)
                    self.state = 621
                    self.orderSortSpec() 
                self.state = 626
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,56,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderSortSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dir_ = None # Token
            self.nulls = None # Token

        def expr(self):
            return self.getTypedRuleContext(PartiQLParser.ExprContext,0)


        def NULLS(self):
            return self.getToken(PartiQLParser.NULLS, 0)

        def ASC(self):
            return self.getToken(PartiQLParser.ASC, 0)

        def DESC(self):
            return self.getToken(PartiQLParser.DESC, 0)

        def FIRST(self):
            return self.getToken(PartiQLParser.FIRST, 0)

        def LAST(self):
            return self.getToken(PartiQLParser.LAST, 0)

        def getRuleIndex(self):
            return PartiQLParser.RULE_orderSortSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderSortSpec" ):
                listener.enterOrderSortSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderSortSpec" ):
                listener.exitOrderSortSpec(self)




    def orderSortSpec(self):

        localctx = PartiQLParser.OrderSortSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_orderSortSpec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 627
            self.expr()
            self.state = 629
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.state = 628
                localctx.dir_ = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==11 or _la==62):
                    localctx.dir_ = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 633
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.state = 631
                self.match(PartiQLParser.NULLS)
                self.state = 632
                localctx.nulls = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==90 or _la==123):
                    localctx.nulls = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP(self):
            return self.getToken(PartiQLParser.GROUP, 0)

        def BY(self):
            return self.getToken(PartiQLParser.BY, 0)

        def groupKey(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PartiQLParser.GroupKeyContext)
            else:
                return self.getTypedRuleContext(PartiQLParser.GroupKeyContext,i)


        def PARTIAL(self):
            return self.getToken(PartiQLParser.PARTIAL, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PartiQLParser.COMMA)
            else:
                return self.getToken(PartiQLParser.COMMA, i)

        def groupAlias(self):
            return self.getTypedRuleContext(PartiQLParser.GroupAliasContext,0)


        def getRuleIndex(self):
            return PartiQLParser.RULE_groupClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupClause" ):
                listener.enterGroupClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupClause" ):
                listener.exitGroupClause(self)




    def groupClause(self):

        localctx = PartiQLParser.GroupClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_groupClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 635
            self.match(PartiQLParser.GROUP)
            self.state = 637
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==158:
                self.state = 636
                self.match(PartiQLParser.PARTIAL)


            self.state = 639
            self.match(PartiQLParser.BY)
            self.state = 640
            self.groupKey()
            self.state = 645
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,60,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 641
                    self.match(PartiQLParser.COMMA)
                    self.state = 642
                    self.groupKey() 
                self.state = 647
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,60,self._ctx)

            self.state = 649
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.state = 648
                self.groupAlias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP(self):
            return self.getToken(PartiQLParser.GROUP, 0)

        def AS(self):
            return self.getToken(PartiQLParser.AS, 0)

        def symbolPrimitive(self):
            return self.getTypedRuleContext(PartiQLParser.SymbolPrimitiveContext,0)


        def getRuleIndex(self):
            return PartiQLParser.RULE_groupAlias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupAlias" ):
                listener.enterGroupAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupAlias" ):
                listener.exitGroupAlias(self)




    def groupAlias(self):

        localctx = PartiQLParser.GroupAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_groupAlias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 651
            self.match(PartiQLParser.GROUP)
            self.state = 652
            self.match(PartiQLParser.AS)
            self.state = 653
            self.symbolPrimitive()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupKeyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # ExprSelectContext

        def exprSelect(self):
            return self.getTypedRuleContext(PartiQLParser.ExprSelectContext,0)


        def AS(self):
            return self.getToken(PartiQLParser.AS, 0)

        def symbolPrimitive(self):
            return self.getTypedRuleContext(PartiQLParser.SymbolPrimitiveContext,0)


        def getRuleIndex(self):
            return PartiQLParser.RULE_groupKey

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupKey" ):
                listener.enterGroupKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupKey" ):
                listener.exitGroupKey(self)




    def groupKey(self):

        localctx = PartiQLParser.GroupKeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_groupKey)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 655
            localctx.key = self.exprSelect()
            self.state = 658
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.state = 656
                self.match(PartiQLParser.AS)
                self.state = 657
                self.symbolPrimitive()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OverContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OVER(self):
            return self.getToken(PartiQLParser.OVER, 0)

        def PAREN_LEFT(self):
            return self.getToken(PartiQLParser.PAREN_LEFT, 0)

        def PAREN_RIGHT(self):
            return self.getToken(PartiQLParser.PAREN_RIGHT, 0)

        def windowPartitionList(self):
            return self.getTypedRuleContext(PartiQLParser.WindowPartitionListContext,0)


        def windowSortSpecList(self):
            return self.getTypedRuleContext(PartiQLParser.WindowSortSpecListContext,0)


        def getRuleIndex(self):
            return PartiQLParser.RULE_over

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOver" ):
                listener.enterOver(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOver" ):
                listener.exitOver(self)




    def over(self):

        localctx = PartiQLParser.OverContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_over)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 660
            self.match(PartiQLParser.OVER)
            self.state = 661
            self.match(PartiQLParser.PAREN_LEFT)
            self.state = 663
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==233:
                self.state = 662
                self.windowPartitionList()


            self.state = 666
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==152:
                self.state = 665
                self.windowSortSpecList()


            self.state = 668
            self.match(PartiQLParser.PAREN_RIGHT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowPartitionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(PartiQLParser.PARTITION, 0)

        def BY(self):
            return self.getToken(PartiQLParser.BY, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PartiQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(PartiQLParser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PartiQLParser.COMMA)
            else:
                return self.getToken(PartiQLParser.COMMA, i)

        def getRuleIndex(self):
            return PartiQLParser.RULE_windowPartitionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowPartitionList" ):
                listener.enterWindowPartitionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowPartitionList" ):
                listener.exitWindowPartitionList(self)




    def windowPartitionList(self):

        localctx = PartiQLParser.WindowPartitionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_windowPartitionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 670
            self.match(PartiQLParser.PARTITION)
            self.state = 671
            self.match(PartiQLParser.BY)
            self.state = 672
            self.expr()
            self.state = 677
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==270:
                self.state = 673
                self.match(PartiQLParser.COMMA)
                self.state = 674
                self.expr()
                self.state = 679
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowSortSpecListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(PartiQLParser.ORDER, 0)

        def BY(self):
            return self.getToken(PartiQLParser.BY, 0)

        def orderSortSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PartiQLParser.OrderSortSpecContext)
            else:
                return self.getTypedRuleContext(PartiQLParser.OrderSortSpecContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PartiQLParser.COMMA)
            else:
                return self.getToken(PartiQLParser.COMMA, i)

        def getRuleIndex(self):
            return PartiQLParser.RULE_windowSortSpecList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowSortSpecList" ):
                listener.enterWindowSortSpecList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowSortSpecList" ):
                listener.exitWindowSortSpecList(self)




    def windowSortSpecList(self):

        localctx = PartiQLParser.WindowSortSpecListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_windowSortSpecList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 680
            self.match(PartiQLParser.ORDER)
            self.state = 681
            self.match(PartiQLParser.BY)
            self.state = 682
            self.orderSortSpec()
            self.state = 687
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==270:
                self.state = 683
                self.match(PartiQLParser.COMMA)
                self.state = 684
                self.orderSortSpec()
                self.state = 689
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HavingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.arg = None # ExprSelectContext

        def HAVING(self):
            return self.getToken(PartiQLParser.HAVING, 0)

        def exprSelect(self):
            return self.getTypedRuleContext(PartiQLParser.ExprSelectContext,0)


        def getRuleIndex(self):
            return PartiQLParser.RULE_havingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHavingClause" ):
                listener.enterHavingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHavingClause" ):
                listener.exitHavingClause(self)




    def havingClause(self):

        localctx = PartiQLParser.HavingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_havingClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 690
            self.match(PartiQLParser.HAVING)
            self.state = 691
            localctx.arg = self.exprSelect()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(PartiQLParser.FROM, 0)

        def tableReference(self):
            return self.getTypedRuleContext(PartiQLParser.TableReferenceContext,0)


        def getRuleIndex(self):
            return PartiQLParser.RULE_fromClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromClause" ):
                listener.enterFromClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromClause" ):
                listener.exitFromClause(self)




    def fromClause(self):

        localctx = PartiQLParser.FromClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_fromClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 693
            self.match(PartiQLParser.FROM)
            self.state = 694
            self.tableReference(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhereClauseSelectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.arg = None # ExprSelectContext

        def WHERE(self):
            return self.getToken(PartiQLParser.WHERE, 0)

        def exprSelect(self):
            return self.getTypedRuleContext(PartiQLParser.ExprSelectContext,0)


        def getRuleIndex(self):
            return PartiQLParser.RULE_whereClauseSelect

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhereClauseSelect" ):
                listener.enterWhereClauseSelect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhereClauseSelect" ):
                listener.exitWhereClauseSelect(self)




    def whereClauseSelect(self):

        localctx = PartiQLParser.WhereClauseSelectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_whereClauseSelect)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 696
            self.match(PartiQLParser.WHERE)
            self.state = 697
            localctx.arg = self.exprSelect()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OffsetByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.arg = None # ExprSelectContext

        def OFFSET(self):
            return self.getToken(PartiQLParser.OFFSET, 0)

        def exprSelect(self):
            return self.getTypedRuleContext(PartiQLParser.ExprSelectContext,0)


        def getRuleIndex(self):
            return PartiQLParser.RULE_offsetByClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOffsetByClause" ):
                listener.enterOffsetByClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOffsetByClause" ):
                listener.exitOffsetByClause(self)




    def offsetByClause(self):

        localctx = PartiQLParser.OffsetByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_offsetByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 699
            self.match(PartiQLParser.OFFSET)
            self.state = 700
            localctx.arg = self.exprSelect()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LimitClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.arg = None # ExprSelectContext

        def LIMIT(self):
            return self.getToken(PartiQLParser.LIMIT, 0)

        def exprSelect(self):
            return self.getTypedRuleContext(PartiQLParser.ExprSelectContext,0)


        def getRuleIndex(self):
            return PartiQLParser.RULE_limitClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimitClause" ):
                listener.enterLimitClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimitClause" ):
                listener.exitLimitClause(self)




    def limitClause(self):

        localctx = PartiQLParser.LimitClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_limitClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 702
            self.match(PartiQLParser.LIMIT)
            self.state = 703
            localctx.arg = self.exprSelect()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GpmlPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.selector = None # MatchSelectorContext

        def matchPattern(self):
            return self.getTypedRuleContext(PartiQLParser.MatchPatternContext,0)


        def matchSelector(self):
            return self.getTypedRuleContext(PartiQLParser.MatchSelectorContext,0)


        def getRuleIndex(self):
            return PartiQLParser.RULE_gpmlPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGpmlPattern" ):
                listener.enterGpmlPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGpmlPattern" ):
                listener.exitGpmlPattern(self)




    def gpmlPattern(self):

        localctx = PartiQLParser.GpmlPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_gpmlPattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 706
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
            if la_ == 1:
                self.state = 705
                localctx.selector = self.matchSelector()


            self.state = 708
            self.matchPattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GpmlPatternListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.selector = None # MatchSelectorContext

        def matchPattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PartiQLParser.MatchPatternContext)
            else:
                return self.getTypedRuleContext(PartiQLParser.MatchPatternContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PartiQLParser.COMMA)
            else:
                return self.getToken(PartiQLParser.COMMA, i)

        def matchSelector(self):
            return self.getTypedRuleContext(PartiQLParser.MatchSelectorContext,0)


        def getRuleIndex(self):
            return PartiQLParser.RULE_gpmlPatternList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGpmlPatternList" ):
                listener.enterGpmlPatternList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGpmlPatternList" ):
                listener.exitGpmlPatternList(self)




    def gpmlPatternList(self):

        localctx = PartiQLParser.GpmlPatternListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_gpmlPatternList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 711
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==4 or _la==8 or _la==186:
                self.state = 710
                localctx.selector = self.matchSelector()


            self.state = 713
            self.matchPattern()
            self.state = 718
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==270:
                self.state = 714
                self.match(PartiQLParser.COMMA)
                self.state = 715
                self.matchPattern()
                self.state = 720
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.restrictor = None # PatternRestrictorContext
            self.variable = None # PatternPathVariableContext

        def graphPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PartiQLParser.GraphPartContext)
            else:
                return self.getTypedRuleContext(PartiQLParser.GraphPartContext,i)


        def patternRestrictor(self):
            return self.getTypedRuleContext(PartiQLParser.PatternRestrictorContext,0)


        def patternPathVariable(self):
            return self.getTypedRuleContext(PartiQLParser.PatternPathVariableContext,0)


        def getRuleIndex(self):
            return PartiQLParser.RULE_matchPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchPattern" ):
                listener.enterMatchPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchPattern" ):
                listener.exitMatchPattern(self)




    def matchPattern(self):

        localctx = PartiQLParser.MatchPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_matchPattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 722
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.state = 721
                localctx.restrictor = self.patternRestrictor()


            self.state = 725
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.state = 724
                localctx.variable = self.patternPathVariable()


            self.state = 730
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,72,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 727
                    self.graphPart() 
                self.state = 732
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,72,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def node(self):
            return self.getTypedRuleContext(PartiQLParser.NodeContext,0)


        def edge(self):
            return self.getTypedRuleContext(PartiQLParser.EdgeContext,0)


        def pattern(self):
            return self.getTypedRuleContext(PartiQLParser.PatternContext,0)


        def getRuleIndex(self):
            return PartiQLParser.RULE_graphPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphPart" ):
                listener.enterGraphPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphPart" ):
                listener.exitGraphPart(self)




    def graphPart(self):

        localctx = PartiQLParser.GraphPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_graphPart)
        try:
            self.state = 736
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 733
                self.node()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 734
                self.edge()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 735
                self.pattern()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchSelectorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PartiQLParser.RULE_matchSelector

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SelectorAnyContext(MatchSelectorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.MatchSelectorContext
            super().__init__(parser)
            self.k = None # Token
            self.copyFrom(ctx)

        def ANY(self):
            return self.getToken(PartiQLParser.ANY, 0)
        def LITERAL_INTEGER(self):
            return self.getToken(PartiQLParser.LITERAL_INTEGER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectorAny" ):
                listener.enterSelectorAny(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectorAny" ):
                listener.exitSelectorAny(self)


    class SelectorShortestContext(MatchSelectorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.MatchSelectorContext
            super().__init__(parser)
            self.k = None # Token
            self.copyFrom(ctx)

        def SHORTEST(self):
            return self.getToken(PartiQLParser.SHORTEST, 0)
        def LITERAL_INTEGER(self):
            return self.getToken(PartiQLParser.LITERAL_INTEGER, 0)
        def GROUP(self):
            return self.getToken(PartiQLParser.GROUP, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectorShortest" ):
                listener.enterSelectorShortest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectorShortest" ):
                listener.exitSelectorShortest(self)


    class SelectorBasicContext(MatchSelectorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.MatchSelectorContext
            super().__init__(parser)
            self.mod = None # Token
            self.copyFrom(ctx)

        def SHORTEST(self):
            return self.getToken(PartiQLParser.SHORTEST, 0)
        def ANY(self):
            return self.getToken(PartiQLParser.ANY, 0)
        def ALL(self):
            return self.getToken(PartiQLParser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectorBasic" ):
                listener.enterSelectorBasic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectorBasic" ):
                listener.exitSelectorBasic(self)



    def matchSelector(self):

        localctx = PartiQLParser.MatchSelectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_matchSelector)
        self._la = 0 # Token type
        try:
            self.state = 749
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                localctx = PartiQLParser.SelectorBasicContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 738
                localctx.mod = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==4 or _la==8):
                    localctx.mod = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 739
                self.match(PartiQLParser.SHORTEST)
                pass

            elif la_ == 2:
                localctx = PartiQLParser.SelectorAnyContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 740
                self.match(PartiQLParser.ANY)
                self.state = 742
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
                if la_ == 1:
                    self.state = 741
                    localctx.k = self.match(PartiQLParser.LITERAL_INTEGER)


                pass

            elif la_ == 3:
                localctx = PartiQLParser.SelectorShortestContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 744
                self.match(PartiQLParser.SHORTEST)
                self.state = 745
                localctx.k = self.match(PartiQLParser.LITERAL_INTEGER)
                self.state = 747
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
                if la_ == 1:
                    self.state = 746
                    self.match(PartiQLParser.GROUP)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternPathVariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbolPrimitive(self):
            return self.getTypedRuleContext(PartiQLParser.SymbolPrimitiveContext,0)


        def EQ(self):
            return self.getToken(PartiQLParser.EQ, 0)

        def getRuleIndex(self):
            return PartiQLParser.RULE_patternPathVariable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatternPathVariable" ):
                listener.enterPatternPathVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatternPathVariable" ):
                listener.exitPatternPathVariable(self)




    def patternPathVariable(self):

        localctx = PartiQLParser.PatternPathVariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_patternPathVariable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 751
            self.symbolPrimitive()
            self.state = 752
            self.match(PartiQLParser.EQ)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternRestrictorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.restrictor = None # Token

        def IDENTIFIER(self):
            return self.getToken(PartiQLParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return PartiQLParser.RULE_patternRestrictor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatternRestrictor" ):
                listener.enterPatternRestrictor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatternRestrictor" ):
                listener.exitPatternRestrictor(self)




    def patternRestrictor(self):

        localctx = PartiQLParser.PatternRestrictorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_patternRestrictor)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 754
            localctx.restrictor = self.match(PartiQLParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PAREN_LEFT(self):
            return self.getToken(PartiQLParser.PAREN_LEFT, 0)

        def PAREN_RIGHT(self):
            return self.getToken(PartiQLParser.PAREN_RIGHT, 0)

        def symbolPrimitive(self):
            return self.getTypedRuleContext(PartiQLParser.SymbolPrimitiveContext,0)


        def patternPartLabel(self):
            return self.getTypedRuleContext(PartiQLParser.PatternPartLabelContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(PartiQLParser.WhereClauseContext,0)


        def getRuleIndex(self):
            return PartiQLParser.RULE_node

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNode" ):
                listener.enterNode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNode" ):
                listener.exitNode(self)




    def node(self):

        localctx = PartiQLParser.NodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_node)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 756
            self.match(PartiQLParser.PAREN_LEFT)
            self.state = 758
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==303 or _la==304:
                self.state = 757
                self.symbolPrimitive()


            self.state = 761
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==296:
                self.state = 760
                self.patternPartLabel()


            self.state = 764
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==225:
                self.state = 763
                self.whereClause()


            self.state = 766
            self.match(PartiQLParser.PAREN_RIGHT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EdgeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PartiQLParser.RULE_edge

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class EdgeWithSpecContext(EdgeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.EdgeContext
            super().__init__(parser)
            self.quantifier = None # PatternQuantifierContext
            self.copyFrom(ctx)

        def edgeWSpec(self):
            return self.getTypedRuleContext(PartiQLParser.EdgeWSpecContext,0)

        def patternQuantifier(self):
            return self.getTypedRuleContext(PartiQLParser.PatternQuantifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEdgeWithSpec" ):
                listener.enterEdgeWithSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEdgeWithSpec" ):
                listener.exitEdgeWithSpec(self)


    class EdgeAbbreviatedContext(EdgeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.EdgeContext
            super().__init__(parser)
            self.quantifier = None # PatternQuantifierContext
            self.copyFrom(ctx)

        def edgeAbbrev(self):
            return self.getTypedRuleContext(PartiQLParser.EdgeAbbrevContext,0)

        def patternQuantifier(self):
            return self.getTypedRuleContext(PartiQLParser.PatternQuantifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEdgeAbbreviated" ):
                listener.enterEdgeAbbreviated(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEdgeAbbreviated" ):
                listener.exitEdgeAbbreviated(self)



    def edge(self):

        localctx = PartiQLParser.EdgeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_edge)
        try:
            self.state = 776
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                localctx = PartiQLParser.EdgeWithSpecContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 768
                self.edgeWSpec()
                self.state = 770
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
                if la_ == 1:
                    self.state = 769
                    localctx.quantifier = self.patternQuantifier()


                pass

            elif la_ == 2:
                localctx = PartiQLParser.EdgeAbbreviatedContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 772
                self.edgeAbbrev()
                self.state = 774
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
                if la_ == 1:
                    self.state = 773
                    localctx.quantifier = self.patternQuantifier()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.restrictor = None # PatternRestrictorContext
            self.variable = None # PatternPathVariableContext
            self.where = None # WhereClauseContext
            self.quantifier = None # PatternQuantifierContext

        def PAREN_LEFT(self):
            return self.getToken(PartiQLParser.PAREN_LEFT, 0)

        def PAREN_RIGHT(self):
            return self.getToken(PartiQLParser.PAREN_RIGHT, 0)

        def graphPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PartiQLParser.GraphPartContext)
            else:
                return self.getTypedRuleContext(PartiQLParser.GraphPartContext,i)


        def patternRestrictor(self):
            return self.getTypedRuleContext(PartiQLParser.PatternRestrictorContext,0)


        def patternPathVariable(self):
            return self.getTypedRuleContext(PartiQLParser.PatternPathVariableContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(PartiQLParser.WhereClauseContext,0)


        def patternQuantifier(self):
            return self.getTypedRuleContext(PartiQLParser.PatternQuantifierContext,0)


        def BRACKET_LEFT(self):
            return self.getToken(PartiQLParser.BRACKET_LEFT, 0)

        def BRACKET_RIGHT(self):
            return self.getToken(PartiQLParser.BRACKET_RIGHT, 0)

        def getRuleIndex(self):
            return PartiQLParser.RULE_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPattern" ):
                listener.enterPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPattern" ):
                listener.exitPattern(self)




    def pattern(self):

        localctx = PartiQLParser.PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_pattern)
        self._la = 0 # Token type
        try:
            self.state = 816
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [294]:
                self.enterOuterAlt(localctx, 1)
                self.state = 778
                self.match(PartiQLParser.PAREN_LEFT)
                self.state = 780
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
                if la_ == 1:
                    self.state = 779
                    localctx.restrictor = self.patternRestrictor()


                self.state = 783
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==303 or _la==304:
                    self.state = 782
                    localctx.variable = self.patternPathVariable()


                self.state = 786 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 785
                    self.graphPart()
                    self.state = 788 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 272)) & ~0x3f) == 0 and ((1 << (_la - 272)) & 4472849) != 0)):
                        break

                self.state = 791
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==225:
                    self.state = 790
                    localctx.where = self.whereClause()


                self.state = 793
                self.match(PartiQLParser.PAREN_RIGHT)
                self.state = 795
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
                if la_ == 1:
                    self.state = 794
                    localctx.quantifier = self.patternQuantifier()


                pass
            elif token in [290]:
                self.enterOuterAlt(localctx, 2)
                self.state = 797
                self.match(PartiQLParser.BRACKET_LEFT)
                self.state = 799
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
                if la_ == 1:
                    self.state = 798
                    localctx.restrictor = self.patternRestrictor()


                self.state = 802
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==303 or _la==304:
                    self.state = 801
                    localctx.variable = self.patternPathVariable()


                self.state = 805 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 804
                    self.graphPart()
                    self.state = 807 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 272)) & ~0x3f) == 0 and ((1 << (_la - 272)) & 4472849) != 0)):
                        break

                self.state = 810
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==225:
                    self.state = 809
                    localctx.where = self.whereClause()


                self.state = 812
                self.match(PartiQLParser.BRACKET_RIGHT)
                self.state = 814
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
                if la_ == 1:
                    self.state = 813
                    localctx.quantifier = self.patternQuantifier()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternQuantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.quant = None # Token
            self.lower = None # Token
            self.upper = None # Token

        def PLUS(self):
            return self.getToken(PartiQLParser.PLUS, 0)

        def ASTERISK(self):
            return self.getToken(PartiQLParser.ASTERISK, 0)

        def BRACE_LEFT(self):
            return self.getToken(PartiQLParser.BRACE_LEFT, 0)

        def COMMA(self):
            return self.getToken(PartiQLParser.COMMA, 0)

        def BRACE_RIGHT(self):
            return self.getToken(PartiQLParser.BRACE_RIGHT, 0)

        def LITERAL_INTEGER(self, i:int=None):
            if i is None:
                return self.getTokens(PartiQLParser.LITERAL_INTEGER)
            else:
                return self.getToken(PartiQLParser.LITERAL_INTEGER, i)

        def getRuleIndex(self):
            return PartiQLParser.RULE_patternQuantifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatternQuantifier" ):
                listener.enterPatternQuantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatternQuantifier" ):
                listener.exitPatternQuantifier(self)




    def patternQuantifier(self):

        localctx = PartiQLParser.PatternQuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_patternQuantifier)
        self._la = 0 # Token type
        try:
            self.state = 826
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [271, 277]:
                self.enterOuterAlt(localctx, 1)
                self.state = 818
                localctx.quant = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==271 or _la==277):
                    localctx.quant = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [292]:
                self.enterOuterAlt(localctx, 2)
                self.state = 819
                self.match(PartiQLParser.BRACE_LEFT)
                self.state = 820
                localctx.lower = self.match(PartiQLParser.LITERAL_INTEGER)
                self.state = 821
                self.match(PartiQLParser.COMMA)
                self.state = 823
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==301:
                    self.state = 822
                    localctx.upper = self.match(PartiQLParser.LITERAL_INTEGER)


                self.state = 825
                self.match(PartiQLParser.BRACE_RIGHT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EdgeWSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PartiQLParser.RULE_edgeWSpec

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class EdgeSpecLeftContext(EdgeWSpecContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.EdgeWSpecContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ANGLE_LEFT(self):
            return self.getToken(PartiQLParser.ANGLE_LEFT, 0)
        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(PartiQLParser.MINUS)
            else:
                return self.getToken(PartiQLParser.MINUS, i)
        def edgeSpec(self):
            return self.getTypedRuleContext(PartiQLParser.EdgeSpecContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEdgeSpecLeft" ):
                listener.enterEdgeSpecLeft(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEdgeSpecLeft" ):
                listener.exitEdgeSpecLeft(self)


    class EdgeSpecUndirectedLeftContext(EdgeWSpecContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.EdgeWSpecContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ANGLE_LEFT(self):
            return self.getToken(PartiQLParser.ANGLE_LEFT, 0)
        def TILDE(self, i:int=None):
            if i is None:
                return self.getTokens(PartiQLParser.TILDE)
            else:
                return self.getToken(PartiQLParser.TILDE, i)
        def edgeSpec(self):
            return self.getTypedRuleContext(PartiQLParser.EdgeSpecContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEdgeSpecUndirectedLeft" ):
                listener.enterEdgeSpecUndirectedLeft(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEdgeSpecUndirectedLeft" ):
                listener.exitEdgeSpecUndirectedLeft(self)


    class EdgeSpecBidirectionalContext(EdgeWSpecContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.EdgeWSpecContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ANGLE_LEFT(self):
            return self.getToken(PartiQLParser.ANGLE_LEFT, 0)
        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(PartiQLParser.MINUS)
            else:
                return self.getToken(PartiQLParser.MINUS, i)
        def edgeSpec(self):
            return self.getTypedRuleContext(PartiQLParser.EdgeSpecContext,0)

        def ANGLE_RIGHT(self):
            return self.getToken(PartiQLParser.ANGLE_RIGHT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEdgeSpecBidirectional" ):
                listener.enterEdgeSpecBidirectional(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEdgeSpecBidirectional" ):
                listener.exitEdgeSpecBidirectional(self)


    class EdgeSpecRightContext(EdgeWSpecContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.EdgeWSpecContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(PartiQLParser.MINUS)
            else:
                return self.getToken(PartiQLParser.MINUS, i)
        def edgeSpec(self):
            return self.getTypedRuleContext(PartiQLParser.EdgeSpecContext,0)

        def ANGLE_RIGHT(self):
            return self.getToken(PartiQLParser.ANGLE_RIGHT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEdgeSpecRight" ):
                listener.enterEdgeSpecRight(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEdgeSpecRight" ):
                listener.exitEdgeSpecRight(self)


    class EdgeSpecUndirectedBidirectionalContext(EdgeWSpecContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.EdgeWSpecContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(PartiQLParser.MINUS)
            else:
                return self.getToken(PartiQLParser.MINUS, i)
        def edgeSpec(self):
            return self.getTypedRuleContext(PartiQLParser.EdgeSpecContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEdgeSpecUndirectedBidirectional" ):
                listener.enterEdgeSpecUndirectedBidirectional(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEdgeSpecUndirectedBidirectional" ):
                listener.exitEdgeSpecUndirectedBidirectional(self)


    class EdgeSpecUndirectedContext(EdgeWSpecContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.EdgeWSpecContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TILDE(self, i:int=None):
            if i is None:
                return self.getTokens(PartiQLParser.TILDE)
            else:
                return self.getToken(PartiQLParser.TILDE, i)
        def edgeSpec(self):
            return self.getTypedRuleContext(PartiQLParser.EdgeSpecContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEdgeSpecUndirected" ):
                listener.enterEdgeSpecUndirected(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEdgeSpecUndirected" ):
                listener.exitEdgeSpecUndirected(self)


    class EdgeSpecUndirectedRightContext(EdgeWSpecContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.EdgeWSpecContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TILDE(self, i:int=None):
            if i is None:
                return self.getTokens(PartiQLParser.TILDE)
            else:
                return self.getToken(PartiQLParser.TILDE, i)
        def edgeSpec(self):
            return self.getTypedRuleContext(PartiQLParser.EdgeSpecContext,0)

        def ANGLE_RIGHT(self):
            return self.getToken(PartiQLParser.ANGLE_RIGHT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEdgeSpecUndirectedRight" ):
                listener.enterEdgeSpecUndirectedRight(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEdgeSpecUndirectedRight" ):
                listener.exitEdgeSpecUndirectedRight(self)



    def edgeWSpec(self):

        localctx = PartiQLParser.EdgeWSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_edgeWSpec)
        try:
            self.state = 862
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                localctx = PartiQLParser.EdgeSpecRightContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 828
                self.match(PartiQLParser.MINUS)
                self.state = 829
                self.edgeSpec()
                self.state = 830
                self.match(PartiQLParser.MINUS)
                self.state = 831
                self.match(PartiQLParser.ANGLE_RIGHT)
                pass

            elif la_ == 2:
                localctx = PartiQLParser.EdgeSpecUndirectedContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 833
                self.match(PartiQLParser.TILDE)
                self.state = 834
                self.edgeSpec()
                self.state = 835
                self.match(PartiQLParser.TILDE)
                pass

            elif la_ == 3:
                localctx = PartiQLParser.EdgeSpecLeftContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 837
                self.match(PartiQLParser.ANGLE_LEFT)
                self.state = 838
                self.match(PartiQLParser.MINUS)
                self.state = 839
                self.edgeSpec()
                self.state = 840
                self.match(PartiQLParser.MINUS)
                pass

            elif la_ == 4:
                localctx = PartiQLParser.EdgeSpecUndirectedRightContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 842
                self.match(PartiQLParser.TILDE)
                self.state = 843
                self.edgeSpec()
                self.state = 844
                self.match(PartiQLParser.TILDE)
                self.state = 845
                self.match(PartiQLParser.ANGLE_RIGHT)
                pass

            elif la_ == 5:
                localctx = PartiQLParser.EdgeSpecUndirectedLeftContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 847
                self.match(PartiQLParser.ANGLE_LEFT)
                self.state = 848
                self.match(PartiQLParser.TILDE)
                self.state = 849
                self.edgeSpec()
                self.state = 850
                self.match(PartiQLParser.TILDE)
                pass

            elif la_ == 6:
                localctx = PartiQLParser.EdgeSpecBidirectionalContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 852
                self.match(PartiQLParser.ANGLE_LEFT)
                self.state = 853
                self.match(PartiQLParser.MINUS)
                self.state = 854
                self.edgeSpec()
                self.state = 855
                self.match(PartiQLParser.MINUS)
                self.state = 856
                self.match(PartiQLParser.ANGLE_RIGHT)
                pass

            elif la_ == 7:
                localctx = PartiQLParser.EdgeSpecUndirectedBidirectionalContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 858
                self.match(PartiQLParser.MINUS)
                self.state = 859
                self.edgeSpec()
                self.state = 860
                self.match(PartiQLParser.MINUS)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EdgeSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BRACKET_LEFT(self):
            return self.getToken(PartiQLParser.BRACKET_LEFT, 0)

        def BRACKET_RIGHT(self):
            return self.getToken(PartiQLParser.BRACKET_RIGHT, 0)

        def symbolPrimitive(self):
            return self.getTypedRuleContext(PartiQLParser.SymbolPrimitiveContext,0)


        def patternPartLabel(self):
            return self.getTypedRuleContext(PartiQLParser.PatternPartLabelContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(PartiQLParser.WhereClauseContext,0)


        def getRuleIndex(self):
            return PartiQLParser.RULE_edgeSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEdgeSpec" ):
                listener.enterEdgeSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEdgeSpec" ):
                listener.exitEdgeSpec(self)




    def edgeSpec(self):

        localctx = PartiQLParser.EdgeSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_edgeSpec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 864
            self.match(PartiQLParser.BRACKET_LEFT)
            self.state = 866
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==303 or _la==304:
                self.state = 865
                self.symbolPrimitive()


            self.state = 869
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==296:
                self.state = 868
                self.patternPartLabel()


            self.state = 872
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==225:
                self.state = 871
                self.whereClause()


            self.state = 874
            self.match(PartiQLParser.BRACKET_RIGHT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternPartLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(PartiQLParser.COLON, 0)

        def symbolPrimitive(self):
            return self.getTypedRuleContext(PartiQLParser.SymbolPrimitiveContext,0)


        def getRuleIndex(self):
            return PartiQLParser.RULE_patternPartLabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatternPartLabel" ):
                listener.enterPatternPartLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatternPartLabel" ):
                listener.exitPatternPartLabel(self)




    def patternPartLabel(self):

        localctx = PartiQLParser.PatternPartLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_patternPartLabel)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 876
            self.match(PartiQLParser.COLON)
            self.state = 877
            self.symbolPrimitive()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EdgeAbbrevContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TILDE(self):
            return self.getToken(PartiQLParser.TILDE, 0)

        def ANGLE_RIGHT(self):
            return self.getToken(PartiQLParser.ANGLE_RIGHT, 0)

        def ANGLE_LEFT(self):
            return self.getToken(PartiQLParser.ANGLE_LEFT, 0)

        def MINUS(self):
            return self.getToken(PartiQLParser.MINUS, 0)

        def getRuleIndex(self):
            return PartiQLParser.RULE_edgeAbbrev

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEdgeAbbrev" ):
                listener.enterEdgeAbbrev(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEdgeAbbrev" ):
                listener.exitEdgeAbbrev(self)




    def edgeAbbrev(self):

        localctx = PartiQLParser.EdgeAbbrevContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_edgeAbbrev)
        self._la = 0 # Token type
        try:
            self.state = 891
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 879
                self.match(PartiQLParser.TILDE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 880
                self.match(PartiQLParser.TILDE)
                self.state = 881
                self.match(PartiQLParser.ANGLE_RIGHT)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 882
                self.match(PartiQLParser.ANGLE_LEFT)
                self.state = 883
                self.match(PartiQLParser.TILDE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 885
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==286:
                    self.state = 884
                    self.match(PartiQLParser.ANGLE_LEFT)


                self.state = 887
                self.match(PartiQLParser.MINUS)
                self.state = 889
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
                if la_ == 1:
                    self.state = 888
                    self.match(PartiQLParser.ANGLE_RIGHT)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableReferenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PartiQLParser.RULE_tableReference

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class TableWrappedContext(TableReferenceContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.TableReferenceContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PAREN_LEFT(self):
            return self.getToken(PartiQLParser.PAREN_LEFT, 0)
        def tableReference(self):
            return self.getTypedRuleContext(PartiQLParser.TableReferenceContext,0)

        def PAREN_RIGHT(self):
            return self.getToken(PartiQLParser.PAREN_RIGHT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableWrapped" ):
                listener.enterTableWrapped(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableWrapped" ):
                listener.exitTableWrapped(self)


    class TableCrossJoinContext(TableReferenceContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.TableReferenceContext
            super().__init__(parser)
            self.lhs = None # TableReferenceContext
            self.rhs = None # JoinRhsContext
            self.copyFrom(ctx)

        def CROSS(self):
            return self.getToken(PartiQLParser.CROSS, 0)
        def JOIN(self):
            return self.getToken(PartiQLParser.JOIN, 0)
        def tableReference(self):
            return self.getTypedRuleContext(PartiQLParser.TableReferenceContext,0)

        def joinRhs(self):
            return self.getTypedRuleContext(PartiQLParser.JoinRhsContext,0)

        def joinType(self):
            return self.getTypedRuleContext(PartiQLParser.JoinTypeContext,0)

        def COMMA(self):
            return self.getToken(PartiQLParser.COMMA, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableCrossJoin" ):
                listener.enterTableCrossJoin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableCrossJoin" ):
                listener.exitTableCrossJoin(self)


    class TableQualifiedJoinContext(TableReferenceContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.TableReferenceContext
            super().__init__(parser)
            self.lhs = None # TableReferenceContext
            self.rhs = None # JoinRhsContext
            self.copyFrom(ctx)

        def JOIN(self):
            return self.getToken(PartiQLParser.JOIN, 0)
        def joinSpec(self):
            return self.getTypedRuleContext(PartiQLParser.JoinSpecContext,0)

        def tableReference(self):
            return self.getTypedRuleContext(PartiQLParser.TableReferenceContext,0)

        def joinRhs(self):
            return self.getTypedRuleContext(PartiQLParser.JoinRhsContext,0)

        def joinType(self):
            return self.getTypedRuleContext(PartiQLParser.JoinTypeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableQualifiedJoin" ):
                listener.enterTableQualifiedJoin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableQualifiedJoin" ):
                listener.exitTableQualifiedJoin(self)


    class TableRefBaseContext(TableReferenceContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.TableReferenceContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableNonJoin(self):
            return self.getTypedRuleContext(PartiQLParser.TableNonJoinContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableRefBase" ):
                listener.enterTableRefBase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableRefBase" ):
                listener.exitTableRefBase(self)



    def tableReference(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PartiQLParser.TableReferenceContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 138
        self.enterRecursionRule(localctx, 138, self.RULE_tableReference, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 899
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                localctx = PartiQLParser.TableRefBaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 894
                self.tableNonJoin()
                pass

            elif la_ == 2:
                localctx = PartiQLParser.TableWrappedContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 895
                self.match(PartiQLParser.PAREN_LEFT)
                self.state = 896
                self.tableReference(0)
                self.state = 897
                self.match(PartiQLParser.PAREN_RIGHT)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 921
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,107,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 919
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
                    if la_ == 1:
                        localctx = PartiQLParser.TableCrossJoinContext(self, PartiQLParser.TableReferenceContext(self, _parentctx, _parentState))
                        localctx.lhs = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_tableReference)
                        self.state = 901
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 903
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 144115188612734977) != 0) or _la==176:
                            self.state = 902
                            self.joinType()


                        self.state = 905
                        self.match(PartiQLParser.CROSS)
                        self.state = 906
                        self.match(PartiQLParser.JOIN)
                        self.state = 907
                        localctx.rhs = self.joinRhs()
                        pass

                    elif la_ == 2:
                        localctx = PartiQLParser.TableCrossJoinContext(self, PartiQLParser.TableReferenceContext(self, _parentctx, _parentState))
                        localctx.lhs = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_tableReference)
                        self.state = 908
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 909
                        self.match(PartiQLParser.COMMA)
                        self.state = 910
                        localctx.rhs = self.joinRhs()
                        pass

                    elif la_ == 3:
                        localctx = PartiQLParser.TableQualifiedJoinContext(self, PartiQLParser.TableReferenceContext(self, _parentctx, _parentState))
                        localctx.lhs = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_tableReference)
                        self.state = 911
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 913
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 144115188612734977) != 0) or _la==176:
                            self.state = 912
                            self.joinType()


                        self.state = 915
                        self.match(PartiQLParser.JOIN)
                        self.state = 916
                        localctx.rhs = self.joinRhs()
                        self.state = 917
                        self.joinSpec()
                        pass

             
                self.state = 923
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,107,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TableNonJoinContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableBaseReference(self):
            return self.getTypedRuleContext(PartiQLParser.TableBaseReferenceContext,0)


        def tableUnpivot(self):
            return self.getTypedRuleContext(PartiQLParser.TableUnpivotContext,0)


        def getRuleIndex(self):
            return PartiQLParser.RULE_tableNonJoin

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableNonJoin" ):
                listener.enterTableNonJoin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableNonJoin" ):
                listener.exitTableNonJoin(self)




    def tableNonJoin(self):

        localctx = PartiQLParser.TableNonJoinContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_tableNonJoin)
        try:
            self.state = 926
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [15, 19, 23, 24, 28, 29, 32, 44, 53, 82, 85, 86, 87, 88, 129, 131, 132, 140, 141, 143, 145, 182, 187, 195, 196, 201, 207, 208, 213, 219, 230, 231, 234, 235, 236, 237, 266, 267, 271, 272, 275, 288, 290, 292, 294, 298, 300, 301, 302, 303, 304, 309]:
                self.enterOuterAlt(localctx, 1)
                self.state = 924
                self.tableBaseReference()
                pass
            elif token in [238]:
                self.enterOuterAlt(localctx, 2)
                self.state = 925
                self.tableUnpivot()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableBaseReferenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PartiQLParser.RULE_tableBaseReference

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TableBaseRefSymbolContext(TableBaseReferenceContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.TableBaseReferenceContext
            super().__init__(parser)
            self.source = None # ExprSelectContext
            self.copyFrom(ctx)

        def symbolPrimitive(self):
            return self.getTypedRuleContext(PartiQLParser.SymbolPrimitiveContext,0)

        def exprSelect(self):
            return self.getTypedRuleContext(PartiQLParser.ExprSelectContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableBaseRefSymbol" ):
                listener.enterTableBaseRefSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableBaseRefSymbol" ):
                listener.exitTableBaseRefSymbol(self)


    class TableBaseRefClausesContext(TableBaseReferenceContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.TableBaseReferenceContext
            super().__init__(parser)
            self.source = None # ExprSelectContext
            self.copyFrom(ctx)

        def exprSelect(self):
            return self.getTypedRuleContext(PartiQLParser.ExprSelectContext,0)

        def asIdent(self):
            return self.getTypedRuleContext(PartiQLParser.AsIdentContext,0)

        def atIdent(self):
            return self.getTypedRuleContext(PartiQLParser.AtIdentContext,0)

        def byIdent(self):
            return self.getTypedRuleContext(PartiQLParser.ByIdentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableBaseRefClauses" ):
                listener.enterTableBaseRefClauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableBaseRefClauses" ):
                listener.exitTableBaseRefClauses(self)


    class TableBaseRefMatchContext(TableBaseReferenceContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.TableBaseReferenceContext
            super().__init__(parser)
            self.source = None # ExprGraphMatchOneContext
            self.copyFrom(ctx)

        def exprGraphMatchOne(self):
            return self.getTypedRuleContext(PartiQLParser.ExprGraphMatchOneContext,0)

        def asIdent(self):
            return self.getTypedRuleContext(PartiQLParser.AsIdentContext,0)

        def atIdent(self):
            return self.getTypedRuleContext(PartiQLParser.AtIdentContext,0)

        def byIdent(self):
            return self.getTypedRuleContext(PartiQLParser.ByIdentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableBaseRefMatch" ):
                listener.enterTableBaseRefMatch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableBaseRefMatch" ):
                listener.exitTableBaseRefMatch(self)



    def tableBaseReference(self):

        localctx = PartiQLParser.TableBaseReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_tableBaseReference)
        try:
            self.state = 951
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
            if la_ == 1:
                localctx = PartiQLParser.TableBaseRefSymbolContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 928
                localctx.source = self.exprSelect()
                self.state = 929
                self.symbolPrimitive()
                pass

            elif la_ == 2:
                localctx = PartiQLParser.TableBaseRefClausesContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 931
                localctx.source = self.exprSelect()
                self.state = 933
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
                if la_ == 1:
                    self.state = 932
                    self.asIdent()


                self.state = 936
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
                if la_ == 1:
                    self.state = 935
                    self.atIdent()


                self.state = 939
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
                if la_ == 1:
                    self.state = 938
                    self.byIdent()


                pass

            elif la_ == 3:
                localctx = PartiQLParser.TableBaseRefMatchContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 941
                localctx.source = self.exprGraphMatchOne()
                self.state = 943
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
                if la_ == 1:
                    self.state = 942
                    self.asIdent()


                self.state = 946
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
                if la_ == 1:
                    self.state = 945
                    self.atIdent()


                self.state = 949
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
                if la_ == 1:
                    self.state = 948
                    self.byIdent()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableUnpivotContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNPIVOT(self):
            return self.getToken(PartiQLParser.UNPIVOT, 0)

        def expr(self):
            return self.getTypedRuleContext(PartiQLParser.ExprContext,0)


        def asIdent(self):
            return self.getTypedRuleContext(PartiQLParser.AsIdentContext,0)


        def atIdent(self):
            return self.getTypedRuleContext(PartiQLParser.AtIdentContext,0)


        def byIdent(self):
            return self.getTypedRuleContext(PartiQLParser.ByIdentContext,0)


        def getRuleIndex(self):
            return PartiQLParser.RULE_tableUnpivot

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableUnpivot" ):
                listener.enterTableUnpivot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableUnpivot" ):
                listener.exitTableUnpivot(self)




    def tableUnpivot(self):

        localctx = PartiQLParser.TableUnpivotContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_tableUnpivot)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 953
            self.match(PartiQLParser.UNPIVOT)
            self.state = 954
            self.expr()
            self.state = 956
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
            if la_ == 1:
                self.state = 955
                self.asIdent()


            self.state = 959
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
            if la_ == 1:
                self.state = 958
                self.atIdent()


            self.state = 962
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
            if la_ == 1:
                self.state = 961
                self.byIdent()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinRhsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PartiQLParser.RULE_joinRhs

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class JoinRhsBaseContext(JoinRhsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.JoinRhsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableNonJoin(self):
            return self.getTypedRuleContext(PartiQLParser.TableNonJoinContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinRhsBase" ):
                listener.enterJoinRhsBase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinRhsBase" ):
                listener.exitJoinRhsBase(self)


    class JoinRhsTableJoinedContext(JoinRhsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.JoinRhsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PAREN_LEFT(self):
            return self.getToken(PartiQLParser.PAREN_LEFT, 0)
        def tableReference(self):
            return self.getTypedRuleContext(PartiQLParser.TableReferenceContext,0)

        def PAREN_RIGHT(self):
            return self.getToken(PartiQLParser.PAREN_RIGHT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinRhsTableJoined" ):
                listener.enterJoinRhsTableJoined(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinRhsTableJoined" ):
                listener.exitJoinRhsTableJoined(self)



    def joinRhs(self):

        localctx = PartiQLParser.JoinRhsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_joinRhs)
        try:
            self.state = 969
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                localctx = PartiQLParser.JoinRhsBaseContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 964
                self.tableNonJoin()
                pass

            elif la_ == 2:
                localctx = PartiQLParser.JoinRhsTableJoinedContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 965
                self.match(PartiQLParser.PAREN_LEFT)
                self.state = 966
                self.tableReference(0)
                self.state = 967
                self.match(PartiQLParser.PAREN_RIGHT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(PartiQLParser.ON, 0)

        def expr(self):
            return self.getTypedRuleContext(PartiQLParser.ExprContext,0)


        def getRuleIndex(self):
            return PartiQLParser.RULE_joinSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinSpec" ):
                listener.enterJoinSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinSpec" ):
                listener.exitJoinSpec(self)




    def joinSpec(self):

        localctx = PartiQLParser.JoinSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_joinSpec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 971
            self.match(PartiQLParser.ON)
            self.state = 972
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.mod = None # Token

        def INNER(self):
            return self.getToken(PartiQLParser.INNER, 0)

        def LEFT(self):
            return self.getToken(PartiQLParser.LEFT, 0)

        def OUTER(self):
            return self.getToken(PartiQLParser.OUTER, 0)

        def RIGHT(self):
            return self.getToken(PartiQLParser.RIGHT, 0)

        def FULL(self):
            return self.getToken(PartiQLParser.FULL, 0)

        def getRuleIndex(self):
            return PartiQLParser.RULE_joinType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinType" ):
                listener.enterJoinType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinType" ):
                listener.exitJoinType(self)




    def joinType(self):

        localctx = PartiQLParser.JoinTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_joinType)
        self._la = 0 # Token type
        try:
            self.state = 988
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [109]:
                self.enterOuterAlt(localctx, 1)
                self.state = 974
                localctx.mod = self.match(PartiQLParser.INNER)
                pass
            elif token in [125]:
                self.enterOuterAlt(localctx, 2)
                self.state = 975
                localctx.mod = self.match(PartiQLParser.LEFT)
                self.state = 977
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==153:
                    self.state = 976
                    self.match(PartiQLParser.OUTER)


                pass
            elif token in [176]:
                self.enterOuterAlt(localctx, 3)
                self.state = 979
                localctx.mod = self.match(PartiQLParser.RIGHT)
                self.state = 981
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==153:
                    self.state = 980
                    self.match(PartiQLParser.OUTER)


                pass
            elif token in [96]:
                self.enterOuterAlt(localctx, 4)
                self.state = 983
                localctx.mod = self.match(PartiQLParser.FULL)
                self.state = 985
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==153:
                    self.state = 984
                    self.match(PartiQLParser.OUTER)


                pass
            elif token in [153]:
                self.enterOuterAlt(localctx, 5)
                self.state = 987
                localctx.mod = self.match(PartiQLParser.OUTER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprBagOp(self):
            return self.getTypedRuleContext(PartiQLParser.ExprBagOpContext,0)


        def getRuleIndex(self):
            return PartiQLParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)




    def expr(self):

        localctx = PartiQLParser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 990
            self.exprBagOp(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprBagOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PartiQLParser.RULE_exprBagOp

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class IntersectContext(ExprBagOpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.ExprBagOpContext
            super().__init__(parser)
            self.lhs = None # ExprBagOpContext
            self.rhs = None # ExprSelectContext
            self.copyFrom(ctx)

        def INTERSECT(self):
            return self.getToken(PartiQLParser.INTERSECT, 0)
        def exprBagOp(self):
            return self.getTypedRuleContext(PartiQLParser.ExprBagOpContext,0)

        def exprSelect(self):
            return self.getTypedRuleContext(PartiQLParser.ExprSelectContext,0)

        def OUTER(self):
            return self.getToken(PartiQLParser.OUTER, 0)
        def DISTINCT(self):
            return self.getToken(PartiQLParser.DISTINCT, 0)
        def ALL(self):
            return self.getToken(PartiQLParser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntersect" ):
                listener.enterIntersect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntersect" ):
                listener.exitIntersect(self)


    class QueryBaseContext(ExprBagOpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.ExprBagOpContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def exprSelect(self):
            return self.getTypedRuleContext(PartiQLParser.ExprSelectContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryBase" ):
                listener.enterQueryBase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryBase" ):
                listener.exitQueryBase(self)


    class ExceptContext(ExprBagOpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.ExprBagOpContext
            super().__init__(parser)
            self.lhs = None # ExprBagOpContext
            self.rhs = None # ExprSelectContext
            self.copyFrom(ctx)

        def EXCEPT(self):
            return self.getToken(PartiQLParser.EXCEPT, 0)
        def exprBagOp(self):
            return self.getTypedRuleContext(PartiQLParser.ExprBagOpContext,0)

        def exprSelect(self):
            return self.getTypedRuleContext(PartiQLParser.ExprSelectContext,0)

        def OUTER(self):
            return self.getToken(PartiQLParser.OUTER, 0)
        def DISTINCT(self):
            return self.getToken(PartiQLParser.DISTINCT, 0)
        def ALL(self):
            return self.getToken(PartiQLParser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExcept" ):
                listener.enterExcept(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExcept" ):
                listener.exitExcept(self)


    class UnionContext(ExprBagOpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.ExprBagOpContext
            super().__init__(parser)
            self.lhs = None # ExprBagOpContext
            self.rhs = None # ExprSelectContext
            self.copyFrom(ctx)

        def UNION(self):
            return self.getToken(PartiQLParser.UNION, 0)
        def exprBagOp(self):
            return self.getTypedRuleContext(PartiQLParser.ExprBagOpContext,0)

        def exprSelect(self):
            return self.getTypedRuleContext(PartiQLParser.ExprSelectContext,0)

        def OUTER(self):
            return self.getToken(PartiQLParser.OUTER, 0)
        def DISTINCT(self):
            return self.getToken(PartiQLParser.DISTINCT, 0)
        def ALL(self):
            return self.getToken(PartiQLParser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnion" ):
                listener.enterUnion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnion" ):
                listener.exitUnion(self)



    def exprBagOp(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PartiQLParser.ExprBagOpContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 154
        self.enterRecursionRule(localctx, 154, self.RULE_exprBagOp, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = PartiQLParser.QueryBaseContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 993
            self.exprSelect()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1024
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,131,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1022
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
                    if la_ == 1:
                        localctx = PartiQLParser.ExceptContext(self, PartiQLParser.ExprBagOpContext(self, _parentctx, _parentState))
                        localctx.lhs = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_exprBagOp)
                        self.state = 995
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 997
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==153:
                            self.state = 996
                            self.match(PartiQLParser.OUTER)


                        self.state = 999
                        self.match(PartiQLParser.EXCEPT)
                        self.state = 1001
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==4 or _la==67:
                            self.state = 1000
                            _la = self._input.LA(1)
                            if not(_la==4 or _la==67):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()


                        self.state = 1003
                        localctx.rhs = self.exprSelect()
                        pass

                    elif la_ == 2:
                        localctx = PartiQLParser.UnionContext(self, PartiQLParser.ExprBagOpContext(self, _parentctx, _parentState))
                        localctx.lhs = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_exprBagOp)
                        self.state = 1004
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1006
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==153:
                            self.state = 1005
                            self.match(PartiQLParser.OUTER)


                        self.state = 1008
                        self.match(PartiQLParser.UNION)
                        self.state = 1010
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==4 or _la==67:
                            self.state = 1009
                            _la = self._input.LA(1)
                            if not(_la==4 or _la==67):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()


                        self.state = 1012
                        localctx.rhs = self.exprSelect()
                        pass

                    elif la_ == 3:
                        localctx = PartiQLParser.IntersectContext(self, PartiQLParser.ExprBagOpContext(self, _parentctx, _parentState))
                        localctx.lhs = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_exprBagOp)
                        self.state = 1013
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1015
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==153:
                            self.state = 1014
                            self.match(PartiQLParser.OUTER)


                        self.state = 1017
                        self.match(PartiQLParser.INTERSECT)
                        self.state = 1019
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==4 or _la==67:
                            self.state = 1018
                            _la = self._input.LA(1)
                            if not(_la==4 or _la==67):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()


                        self.state = 1021
                        localctx.rhs = self.exprSelect()
                        pass

             
                self.state = 1026
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,131,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExprSelectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PartiQLParser.RULE_exprSelect

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SfwBaseContext(ExprSelectContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.ExprSelectContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def exprOr(self):
            return self.getTypedRuleContext(PartiQLParser.ExprOrContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSfwBase" ):
                listener.enterSfwBase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSfwBase" ):
                listener.exitSfwBase(self)


    class SfwQueryContext(ExprSelectContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.ExprSelectContext
            super().__init__(parser)
            self.select = None # SelectClauseContext
            self.from_ = None # FromClauseContext
            self.let = None # LetClauseContext
            self.where = None # WhereClauseSelectContext
            self.group = None # GroupClauseContext
            self.having = None # HavingClauseContext
            self.order = None # OrderByClauseContext
            self.limit = None # LimitClauseContext
            self.offset = None # OffsetByClauseContext
            self.copyFrom(ctx)

        def selectClause(self):
            return self.getTypedRuleContext(PartiQLParser.SelectClauseContext,0)

        def fromClause(self):
            return self.getTypedRuleContext(PartiQLParser.FromClauseContext,0)

        def letClause(self):
            return self.getTypedRuleContext(PartiQLParser.LetClauseContext,0)

        def whereClauseSelect(self):
            return self.getTypedRuleContext(PartiQLParser.WhereClauseSelectContext,0)

        def groupClause(self):
            return self.getTypedRuleContext(PartiQLParser.GroupClauseContext,0)

        def havingClause(self):
            return self.getTypedRuleContext(PartiQLParser.HavingClauseContext,0)

        def orderByClause(self):
            return self.getTypedRuleContext(PartiQLParser.OrderByClauseContext,0)

        def limitClause(self):
            return self.getTypedRuleContext(PartiQLParser.LimitClauseContext,0)

        def offsetByClause(self):
            return self.getTypedRuleContext(PartiQLParser.OffsetByClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSfwQuery" ):
                listener.enterSfwQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSfwQuery" ):
                listener.exitSfwQuery(self)



    def exprSelect(self):

        localctx = PartiQLParser.ExprSelectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_exprSelect)
        try:
            self.state = 1051
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [182, 237]:
                localctx = PartiQLParser.SfwQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1027
                localctx.select = self.selectClause()
                self.state = 1028
                localctx.from_ = self.fromClause()
                self.state = 1030
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
                if la_ == 1:
                    self.state = 1029
                    localctx.let = self.letClause()


                self.state = 1033
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
                if la_ == 1:
                    self.state = 1032
                    localctx.where = self.whereClauseSelect()


                self.state = 1036
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
                if la_ == 1:
                    self.state = 1035
                    localctx.group = self.groupClause()


                self.state = 1039
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
                if la_ == 1:
                    self.state = 1038
                    localctx.having = self.havingClause()


                self.state = 1042
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
                if la_ == 1:
                    self.state = 1041
                    localctx.order = self.orderByClause()


                self.state = 1045
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
                if la_ == 1:
                    self.state = 1044
                    localctx.limit = self.limitClause()


                self.state = 1048
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
                if la_ == 1:
                    self.state = 1047
                    localctx.offset = self.offsetByClause()


                pass
            elif token in [15, 19, 23, 24, 28, 29, 32, 44, 53, 82, 85, 86, 87, 88, 129, 131, 132, 140, 141, 143, 145, 187, 195, 196, 201, 207, 208, 213, 219, 230, 231, 234, 235, 236, 266, 267, 271, 272, 275, 288, 290, 292, 294, 298, 300, 301, 302, 303, 304, 309]:
                localctx = PartiQLParser.SfwBaseContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1050
                self.exprOr(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprOrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PartiQLParser.RULE_exprOr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class OrContext(ExprOrContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.ExprOrContext
            super().__init__(parser)
            self.lhs = None # ExprOrContext
            self.rhs = None # ExprAndContext
            self.copyFrom(ctx)

        def OR(self):
            return self.getToken(PartiQLParser.OR, 0)
        def exprOr(self):
            return self.getTypedRuleContext(PartiQLParser.ExprOrContext,0)

        def exprAnd(self):
            return self.getTypedRuleContext(PartiQLParser.ExprAndContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOr" ):
                listener.enterOr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOr" ):
                listener.exitOr(self)


    class ExprOrBaseContext(ExprOrContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.ExprOrContext
            super().__init__(parser)
            self.parent = None # ExprAndContext
            self.copyFrom(ctx)

        def exprAnd(self):
            return self.getTypedRuleContext(PartiQLParser.ExprAndContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprOrBase" ):
                listener.enterExprOrBase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprOrBase" ):
                listener.exitExprOrBase(self)



    def exprOr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PartiQLParser.ExprOrContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 158
        self.enterRecursionRule(localctx, 158, self.RULE_exprOr, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = PartiQLParser.ExprOrBaseContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 1054
            localctx.parent = self.exprAnd(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1061
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,140,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PartiQLParser.OrContext(self, PartiQLParser.ExprOrContext(self, _parentctx, _parentState))
                    localctx.lhs = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_exprOr)
                    self.state = 1056
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1057
                    self.match(PartiQLParser.OR)
                    self.state = 1058
                    localctx.rhs = self.exprAnd(0) 
                self.state = 1063
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,140,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExprAndContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PartiQLParser.RULE_exprAnd

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class ExprAndBaseContext(ExprAndContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.ExprAndContext
            super().__init__(parser)
            self.parent = None # ExprNotContext
            self.copyFrom(ctx)

        def exprNot(self):
            return self.getTypedRuleContext(PartiQLParser.ExprNotContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprAndBase" ):
                listener.enterExprAndBase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprAndBase" ):
                listener.exitExprAndBase(self)


    class AndContext(ExprAndContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.ExprAndContext
            super().__init__(parser)
            self.lhs = None # ExprAndContext
            self.op = None # Token
            self.rhs = None # ExprNotContext
            self.copyFrom(ctx)

        def exprAnd(self):
            return self.getTypedRuleContext(PartiQLParser.ExprAndContext,0)

        def AND(self):
            return self.getToken(PartiQLParser.AND, 0)
        def exprNot(self):
            return self.getTypedRuleContext(PartiQLParser.ExprNotContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnd" ):
                listener.enterAnd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnd" ):
                listener.exitAnd(self)



    def exprAnd(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PartiQLParser.ExprAndContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 160
        self.enterRecursionRule(localctx, 160, self.RULE_exprAnd, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = PartiQLParser.ExprAndBaseContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 1065
            localctx.parent = self.exprNot()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1072
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,141,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PartiQLParser.AndContext(self, PartiQLParser.ExprAndContext(self, _parentctx, _parentState))
                    localctx.lhs = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_exprAnd)
                    self.state = 1067
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1068
                    localctx.op = self.match(PartiQLParser.AND)
                    self.state = 1069
                    localctx.rhs = self.exprNot() 
                self.state = 1074
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,141,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExprNotContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PartiQLParser.RULE_exprNot

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class NotContext(ExprNotContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.ExprNotContext
            super().__init__(parser)
            self.op = None # Token
            self.rhs = None # ExprNotContext
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(PartiQLParser.NOT, 0)
        def exprNot(self):
            return self.getTypedRuleContext(PartiQLParser.ExprNotContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNot" ):
                listener.enterNot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNot" ):
                listener.exitNot(self)


    class ExprNotBaseContext(ExprNotContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.ExprNotContext
            super().__init__(parser)
            self.parent = None # ExprPredicateContext
            self.copyFrom(ctx)

        def exprPredicate(self):
            return self.getTypedRuleContext(PartiQLParser.ExprPredicateContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprNotBase" ):
                listener.enterExprNotBase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprNotBase" ):
                listener.exitExprNotBase(self)



    def exprNot(self):

        localctx = PartiQLParser.ExprNotContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_exprNot)
        try:
            self.state = 1078
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [140]:
                localctx = PartiQLParser.NotContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1075
                localctx.op = self.match(PartiQLParser.NOT)
                self.state = 1076
                localctx.rhs = self.exprNot()
                pass
            elif token in [15, 19, 23, 24, 28, 29, 32, 44, 53, 82, 85, 86, 87, 88, 129, 131, 132, 141, 143, 145, 187, 195, 196, 201, 207, 208, 213, 219, 230, 231, 234, 235, 236, 266, 267, 271, 272, 275, 288, 290, 292, 294, 298, 300, 301, 302, 303, 304, 309]:
                localctx = PartiQLParser.ExprNotBaseContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1077
                localctx.parent = self.exprPredicate(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprPredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PartiQLParser.RULE_exprPredicate

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class PredicateInContext(ExprPredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.ExprPredicateContext
            super().__init__(parser)
            self.lhs = None # ExprPredicateContext
            self.rhs = None # MathOp00Context
            self.copyFrom(ctx)

        def IN(self):
            return self.getToken(PartiQLParser.IN, 0)
        def PAREN_LEFT(self):
            return self.getToken(PartiQLParser.PAREN_LEFT, 0)
        def expr(self):
            return self.getTypedRuleContext(PartiQLParser.ExprContext,0)

        def PAREN_RIGHT(self):
            return self.getToken(PartiQLParser.PAREN_RIGHT, 0)
        def exprPredicate(self):
            return self.getTypedRuleContext(PartiQLParser.ExprPredicateContext,0)

        def NOT(self):
            return self.getToken(PartiQLParser.NOT, 0)
        def mathOp00(self):
            return self.getTypedRuleContext(PartiQLParser.MathOp00Context,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicateIn" ):
                listener.enterPredicateIn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicateIn" ):
                listener.exitPredicateIn(self)


    class PredicateBetweenContext(ExprPredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.ExprPredicateContext
            super().__init__(parser)
            self.lhs = None # ExprPredicateContext
            self.lower = None # MathOp00Context
            self.upper = None # MathOp00Context
            self.copyFrom(ctx)

        def BETWEEN(self):
            return self.getToken(PartiQLParser.BETWEEN, 0)
        def AND(self):
            return self.getToken(PartiQLParser.AND, 0)
        def exprPredicate(self):
            return self.getTypedRuleContext(PartiQLParser.ExprPredicateContext,0)

        def mathOp00(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PartiQLParser.MathOp00Context)
            else:
                return self.getTypedRuleContext(PartiQLParser.MathOp00Context,i)

        def NOT(self):
            return self.getToken(PartiQLParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicateBetween" ):
                listener.enterPredicateBetween(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicateBetween" ):
                listener.exitPredicateBetween(self)


    class PredicateBaseContext(ExprPredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.ExprPredicateContext
            super().__init__(parser)
            self.parent = None # MathOp00Context
            self.copyFrom(ctx)

        def mathOp00(self):
            return self.getTypedRuleContext(PartiQLParser.MathOp00Context,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicateBase" ):
                listener.enterPredicateBase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicateBase" ):
                listener.exitPredicateBase(self)


    class PredicateComparisonContext(ExprPredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.ExprPredicateContext
            super().__init__(parser)
            self.lhs = None # ExprPredicateContext
            self.op = None # Token
            self.rhs = None # MathOp00Context
            self.copyFrom(ctx)

        def exprPredicate(self):
            return self.getTypedRuleContext(PartiQLParser.ExprPredicateContext,0)

        def mathOp00(self):
            return self.getTypedRuleContext(PartiQLParser.MathOp00Context,0)

        def LT_EQ(self):
            return self.getToken(PartiQLParser.LT_EQ, 0)
        def GT_EQ(self):
            return self.getToken(PartiQLParser.GT_EQ, 0)
        def ANGLE_LEFT(self):
            return self.getToken(PartiQLParser.ANGLE_LEFT, 0)
        def ANGLE_RIGHT(self):
            return self.getToken(PartiQLParser.ANGLE_RIGHT, 0)
        def NEQ(self):
            return self.getToken(PartiQLParser.NEQ, 0)
        def EQ(self):
            return self.getToken(PartiQLParser.EQ, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicateComparison" ):
                listener.enterPredicateComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicateComparison" ):
                listener.exitPredicateComparison(self)


    class PredicateIsContext(ExprPredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.ExprPredicateContext
            super().__init__(parser)
            self.lhs = None # ExprPredicateContext
            self.copyFrom(ctx)

        def IS(self):
            return self.getToken(PartiQLParser.IS, 0)
        def type_(self):
            return self.getTypedRuleContext(PartiQLParser.TypeContext,0)

        def exprPredicate(self):
            return self.getTypedRuleContext(PartiQLParser.ExprPredicateContext,0)

        def NOT(self):
            return self.getToken(PartiQLParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicateIs" ):
                listener.enterPredicateIs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicateIs" ):
                listener.exitPredicateIs(self)


    class PredicateLikeContext(ExprPredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.ExprPredicateContext
            super().__init__(parser)
            self.lhs = None # ExprPredicateContext
            self.rhs = None # MathOp00Context
            self.escape = None # ExprContext
            self.copyFrom(ctx)

        def LIKE(self):
            return self.getToken(PartiQLParser.LIKE, 0)
        def exprPredicate(self):
            return self.getTypedRuleContext(PartiQLParser.ExprPredicateContext,0)

        def mathOp00(self):
            return self.getTypedRuleContext(PartiQLParser.MathOp00Context,0)

        def NOT(self):
            return self.getToken(PartiQLParser.NOT, 0)
        def ESCAPE(self):
            return self.getToken(PartiQLParser.ESCAPE, 0)
        def expr(self):
            return self.getTypedRuleContext(PartiQLParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicateLike" ):
                listener.enterPredicateLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicateLike" ):
                listener.exitPredicateLike(self)



    def exprPredicate(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PartiQLParser.ExprPredicateContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 164
        self.enterRecursionRule(localctx, 164, self.RULE_exprPredicate, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = PartiQLParser.PredicateBaseContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 1081
            localctx.parent = self.mathOp00(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1128
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,150,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1126
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
                    if la_ == 1:
                        localctx = PartiQLParser.PredicateComparisonContext(self, PartiQLParser.ExprPredicateContext(self, _parentctx, _parentState))
                        localctx.lhs = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_exprPredicate)
                        self.state = 1083
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 1084
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 281)) & ~0x3f) == 0 and ((1 << (_la - 281)) & 111) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1085
                        localctx.rhs = self.mathOp00(0)
                        pass

                    elif la_ == 2:
                        localctx = PartiQLParser.PredicateIsContext(self, PartiQLParser.ExprPredicateContext(self, _parentctx, _parentState))
                        localctx.lhs = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_exprPredicate)
                        self.state = 1086
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 1087
                        self.match(PartiQLParser.IS)
                        self.state = 1089
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==140:
                            self.state = 1088
                            self.match(PartiQLParser.NOT)


                        self.state = 1091
                        self.type_()
                        pass

                    elif la_ == 3:
                        localctx = PartiQLParser.PredicateInContext(self, PartiQLParser.ExprPredicateContext(self, _parentctx, _parentState))
                        localctx.lhs = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_exprPredicate)
                        self.state = 1092
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1094
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==140:
                            self.state = 1093
                            self.match(PartiQLParser.NOT)


                        self.state = 1096
                        self.match(PartiQLParser.IN)
                        self.state = 1097
                        self.match(PartiQLParser.PAREN_LEFT)
                        self.state = 1098
                        self.expr()
                        self.state = 1099
                        self.match(PartiQLParser.PAREN_RIGHT)
                        pass

                    elif la_ == 4:
                        localctx = PartiQLParser.PredicateInContext(self, PartiQLParser.ExprPredicateContext(self, _parentctx, _parentState))
                        localctx.lhs = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_exprPredicate)
                        self.state = 1101
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 1103
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==140:
                            self.state = 1102
                            self.match(PartiQLParser.NOT)


                        self.state = 1105
                        self.match(PartiQLParser.IN)
                        self.state = 1106
                        localctx.rhs = self.mathOp00(0)
                        pass

                    elif la_ == 5:
                        localctx = PartiQLParser.PredicateLikeContext(self, PartiQLParser.ExprPredicateContext(self, _parentctx, _parentState))
                        localctx.lhs = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_exprPredicate)
                        self.state = 1107
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1109
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==140:
                            self.state = 1108
                            self.match(PartiQLParser.NOT)


                        self.state = 1111
                        self.match(PartiQLParser.LIKE)
                        self.state = 1112
                        localctx.rhs = self.mathOp00(0)
                        self.state = 1115
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,147,self._ctx)
                        if la_ == 1:
                            self.state = 1113
                            self.match(PartiQLParser.ESCAPE)
                            self.state = 1114
                            localctx.escape = self.expr()


                        pass

                    elif la_ == 6:
                        localctx = PartiQLParser.PredicateBetweenContext(self, PartiQLParser.ExprPredicateContext(self, _parentctx, _parentState))
                        localctx.lhs = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_exprPredicate)
                        self.state = 1117
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1119
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==140:
                            self.state = 1118
                            self.match(PartiQLParser.NOT)


                        self.state = 1121
                        self.match(PartiQLParser.BETWEEN)
                        self.state = 1122
                        localctx.lower = self.mathOp00(0)
                        self.state = 1123
                        self.match(PartiQLParser.AND)
                        self.state = 1124
                        localctx.upper = self.mathOp00(0)
                        pass

             
                self.state = 1130
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,150,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class MathOp00Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.lhs = None # MathOp00Context
            self.parent = None # MathOp01Context
            self.op = None # Token
            self.rhs = None # MathOp01Context

        def mathOp01(self):
            return self.getTypedRuleContext(PartiQLParser.MathOp01Context,0)


        def mathOp00(self):
            return self.getTypedRuleContext(PartiQLParser.MathOp00Context,0)


        def CONCAT(self):
            return self.getToken(PartiQLParser.CONCAT, 0)

        def getRuleIndex(self):
            return PartiQLParser.RULE_mathOp00

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMathOp00" ):
                listener.enterMathOp00(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMathOp00" ):
                listener.exitMathOp00(self)



    def mathOp00(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PartiQLParser.MathOp00Context(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 166
        self.enterRecursionRule(localctx, 166, self.RULE_mathOp00, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1132
            localctx.parent = self.mathOp01(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1139
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,151,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PartiQLParser.MathOp00Context(self, _parentctx, _parentState)
                    localctx.lhs = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_mathOp00)
                    self.state = 1134
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1135
                    localctx.op = self.match(PartiQLParser.CONCAT)
                    self.state = 1136
                    localctx.rhs = self.mathOp01(0) 
                self.state = 1141
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,151,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class MathOp01Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.lhs = None # MathOp01Context
            self.parent = None # MathOp02Context
            self.op = None # Token
            self.rhs = None # MathOp02Context

        def mathOp02(self):
            return self.getTypedRuleContext(PartiQLParser.MathOp02Context,0)


        def mathOp01(self):
            return self.getTypedRuleContext(PartiQLParser.MathOp01Context,0)


        def PLUS(self):
            return self.getToken(PartiQLParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(PartiQLParser.MINUS, 0)

        def getRuleIndex(self):
            return PartiQLParser.RULE_mathOp01

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMathOp01" ):
                listener.enterMathOp01(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMathOp01" ):
                listener.exitMathOp01(self)



    def mathOp01(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PartiQLParser.MathOp01Context(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 168
        self.enterRecursionRule(localctx, 168, self.RULE_mathOp01, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1143
            localctx.parent = self.mathOp02(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1150
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,152,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PartiQLParser.MathOp01Context(self, _parentctx, _parentState)
                    localctx.lhs = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_mathOp01)
                    self.state = 1145
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1146
                    localctx.op = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==271 or _la==272):
                        localctx.op = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1147
                    localctx.rhs = self.mathOp02(0) 
                self.state = 1152
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,152,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class MathOp02Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.lhs = None # MathOp02Context
            self.parent = None # ValueExprContext
            self.op = None # Token
            self.rhs = None # ValueExprContext

        def valueExpr(self):
            return self.getTypedRuleContext(PartiQLParser.ValueExprContext,0)


        def mathOp02(self):
            return self.getTypedRuleContext(PartiQLParser.MathOp02Context,0)


        def PERCENT(self):
            return self.getToken(PartiQLParser.PERCENT, 0)

        def ASTERISK(self):
            return self.getToken(PartiQLParser.ASTERISK, 0)

        def SLASH_FORWARD(self):
            return self.getToken(PartiQLParser.SLASH_FORWARD, 0)

        def getRuleIndex(self):
            return PartiQLParser.RULE_mathOp02

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMathOp02" ):
                listener.enterMathOp02(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMathOp02" ):
                listener.exitMathOp02(self)



    def mathOp02(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PartiQLParser.MathOp02Context(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 170
        self.enterRecursionRule(localctx, 170, self.RULE_mathOp02, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1154
            localctx.parent = self.valueExpr()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1161
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,153,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PartiQLParser.MathOp02Context(self, _parentctx, _parentState)
                    localctx.lhs = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_mathOp02)
                    self.state = 1156
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1157
                    localctx.op = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(((((_la - 273)) & ~0x3f) == 0 and ((1 << (_la - 273)) & 19) != 0)):
                        localctx.op = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1158
                    localctx.rhs = self.valueExpr() 
                self.state = 1163
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,153,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ValueExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.sign = None # Token
            self.rhs = None # ValueExprContext
            self.parent = None # ExprPrimaryContext

        def valueExpr(self):
            return self.getTypedRuleContext(PartiQLParser.ValueExprContext,0)


        def PLUS(self):
            return self.getToken(PartiQLParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(PartiQLParser.MINUS, 0)

        def exprPrimary(self):
            return self.getTypedRuleContext(PartiQLParser.ExprPrimaryContext,0)


        def getRuleIndex(self):
            return PartiQLParser.RULE_valueExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValueExpr" ):
                listener.enterValueExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValueExpr" ):
                listener.exitValueExpr(self)




    def valueExpr(self):

        localctx = PartiQLParser.ValueExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_valueExpr)
        self._la = 0 # Token type
        try:
            self.state = 1167
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [271, 272]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1164
                localctx.sign = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==271 or _la==272):
                    localctx.sign = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1165
                localctx.rhs = self.valueExpr()
                pass
            elif token in [15, 19, 23, 24, 28, 29, 32, 44, 53, 82, 85, 86, 87, 88, 129, 131, 132, 141, 143, 145, 187, 195, 196, 201, 207, 208, 213, 219, 230, 231, 234, 235, 236, 266, 267, 275, 288, 290, 292, 294, 298, 300, 301, 302, 303, 304, 309]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1166
                localctx.parent = self.exprPrimary(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprPrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PartiQLParser.RULE_exprPrimary

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class ExprPrimaryPathContext(ExprPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.ExprPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def exprPrimary(self):
            return self.getTypedRuleContext(PartiQLParser.ExprPrimaryContext,0)

        def pathStep(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PartiQLParser.PathStepContext)
            else:
                return self.getTypedRuleContext(PartiQLParser.PathStepContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprPrimaryPath" ):
                listener.enterExprPrimaryPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprPrimaryPath" ):
                listener.exitExprPrimaryPath(self)


    class ExprPrimaryBaseContext(ExprPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.ExprPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def exprTerm(self):
            return self.getTypedRuleContext(PartiQLParser.ExprTermContext,0)

        def cast(self):
            return self.getTypedRuleContext(PartiQLParser.CastContext,0)

        def sequenceConstructor(self):
            return self.getTypedRuleContext(PartiQLParser.SequenceConstructorContext,0)

        def substring(self):
            return self.getTypedRuleContext(PartiQLParser.SubstringContext,0)

        def canCast(self):
            return self.getTypedRuleContext(PartiQLParser.CanCastContext,0)

        def canLosslessCast(self):
            return self.getTypedRuleContext(PartiQLParser.CanLosslessCastContext,0)

        def extract(self):
            return self.getTypedRuleContext(PartiQLParser.ExtractContext,0)

        def coalesce(self):
            return self.getTypedRuleContext(PartiQLParser.CoalesceContext,0)

        def dateFunction(self):
            return self.getTypedRuleContext(PartiQLParser.DateFunctionContext,0)

        def aggregate(self):
            return self.getTypedRuleContext(PartiQLParser.AggregateContext,0)

        def trimFunction(self):
            return self.getTypedRuleContext(PartiQLParser.TrimFunctionContext,0)

        def functionCall(self):
            return self.getTypedRuleContext(PartiQLParser.FunctionCallContext,0)

        def nullIf(self):
            return self.getTypedRuleContext(PartiQLParser.NullIfContext,0)

        def exprGraphMatchMany(self):
            return self.getTypedRuleContext(PartiQLParser.ExprGraphMatchManyContext,0)

        def caseExpr(self):
            return self.getTypedRuleContext(PartiQLParser.CaseExprContext,0)

        def valueList(self):
            return self.getTypedRuleContext(PartiQLParser.ValueListContext,0)

        def values(self):
            return self.getTypedRuleContext(PartiQLParser.ValuesContext,0)

        def windowFunction(self):
            return self.getTypedRuleContext(PartiQLParser.WindowFunctionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprPrimaryBase" ):
                listener.enterExprPrimaryBase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprPrimaryBase" ):
                listener.exitExprPrimaryBase(self)



    def exprPrimary(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PartiQLParser.ExprPrimaryContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 174
        self.enterRecursionRule(localctx, 174, self.RULE_exprPrimary, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1188
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,155,self._ctx)
            if la_ == 1:
                localctx = PartiQLParser.ExprPrimaryBaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1170
                self.exprTerm()
                pass

            elif la_ == 2:
                localctx = PartiQLParser.ExprPrimaryBaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1171
                self.cast()
                pass

            elif la_ == 3:
                localctx = PartiQLParser.ExprPrimaryBaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1172
                self.sequenceConstructor()
                pass

            elif la_ == 4:
                localctx = PartiQLParser.ExprPrimaryBaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1173
                self.substring()
                pass

            elif la_ == 5:
                localctx = PartiQLParser.ExprPrimaryBaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1174
                self.canCast()
                pass

            elif la_ == 6:
                localctx = PartiQLParser.ExprPrimaryBaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1175
                self.canLosslessCast()
                pass

            elif la_ == 7:
                localctx = PartiQLParser.ExprPrimaryBaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1176
                self.extract()
                pass

            elif la_ == 8:
                localctx = PartiQLParser.ExprPrimaryBaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1177
                self.coalesce()
                pass

            elif la_ == 9:
                localctx = PartiQLParser.ExprPrimaryBaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1178
                self.dateFunction()
                pass

            elif la_ == 10:
                localctx = PartiQLParser.ExprPrimaryBaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1179
                self.aggregate()
                pass

            elif la_ == 11:
                localctx = PartiQLParser.ExprPrimaryBaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1180
                self.trimFunction()
                pass

            elif la_ == 12:
                localctx = PartiQLParser.ExprPrimaryBaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1181
                self.functionCall()
                pass

            elif la_ == 13:
                localctx = PartiQLParser.ExprPrimaryBaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1182
                self.nullIf()
                pass

            elif la_ == 14:
                localctx = PartiQLParser.ExprPrimaryBaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1183
                self.exprGraphMatchMany()
                pass

            elif la_ == 15:
                localctx = PartiQLParser.ExprPrimaryBaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1184
                self.caseExpr()
                pass

            elif la_ == 16:
                localctx = PartiQLParser.ExprPrimaryBaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1185
                self.valueList()
                pass

            elif la_ == 17:
                localctx = PartiQLParser.ExprPrimaryBaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1186
                self.values()
                pass

            elif la_ == 18:
                localctx = PartiQLParser.ExprPrimaryBaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1187
                self.windowFunction()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1198
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,157,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PartiQLParser.ExprPrimaryPathContext(self, PartiQLParser.ExprPrimaryContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_exprPrimary)
                    self.state = 1190
                    if not self.precpred(self._ctx, 6):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                    self.state = 1192 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 1191
                            self.pathStep()

                        else:
                            raise NoViableAltException(self)
                        self.state = 1194 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,156,self._ctx)
             
                self.state = 1200
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,157,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExprTermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PartiQLParser.RULE_exprTerm

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ExprTermWrappedQueryContext(ExprTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.ExprTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PAREN_LEFT(self):
            return self.getToken(PartiQLParser.PAREN_LEFT, 0)
        def expr(self):
            return self.getTypedRuleContext(PartiQLParser.ExprContext,0)

        def PAREN_RIGHT(self):
            return self.getToken(PartiQLParser.PAREN_RIGHT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprTermWrappedQuery" ):
                listener.enterExprTermWrappedQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprTermWrappedQuery" ):
                listener.exitExprTermWrappedQuery(self)


    class ExprTermBaseContext(ExprTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.ExprTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def parameter(self):
            return self.getTypedRuleContext(PartiQLParser.ParameterContext,0)

        def varRefExpr(self):
            return self.getTypedRuleContext(PartiQLParser.VarRefExprContext,0)

        def literal(self):
            return self.getTypedRuleContext(PartiQLParser.LiteralContext,0)

        def collection(self):
            return self.getTypedRuleContext(PartiQLParser.CollectionContext,0)

        def tuple_(self):
            return self.getTypedRuleContext(PartiQLParser.TupleContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprTermBase" ):
                listener.enterExprTermBase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprTermBase" ):
                listener.exitExprTermBase(self)



    def exprTerm(self):

        localctx = PartiQLParser.ExprTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_exprTerm)
        try:
            self.state = 1210
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [294]:
                localctx = PartiQLParser.ExprTermWrappedQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1201
                self.match(PartiQLParser.PAREN_LEFT)
                self.state = 1202
                self.expr()
                self.state = 1203
                self.match(PartiQLParser.PAREN_RIGHT)
                pass
            elif token in [298]:
                localctx = PartiQLParser.ExprTermBaseContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1205
                self.parameter()
                pass
            elif token in [275, 303, 304]:
                localctx = PartiQLParser.ExprTermBaseContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1206
                self.varRefExpr()
                pass
            elif token in [53, 88, 141, 201, 208, 236, 300, 301, 302, 309]:
                localctx = PartiQLParser.ExprTermBaseContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1207
                self.literal()
                pass
            elif token in [288, 290]:
                localctx = PartiQLParser.ExprTermBaseContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1208
                self.collection()
                pass
            elif token in [292]:
                localctx = PartiQLParser.ExprTermBaseContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1209
                self.tuple_()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NullIfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULLIF(self):
            return self.getToken(PartiQLParser.NULLIF, 0)

        def PAREN_LEFT(self):
            return self.getToken(PartiQLParser.PAREN_LEFT, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PartiQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(PartiQLParser.ExprContext,i)


        def COMMA(self):
            return self.getToken(PartiQLParser.COMMA, 0)

        def PAREN_RIGHT(self):
            return self.getToken(PartiQLParser.PAREN_RIGHT, 0)

        def getRuleIndex(self):
            return PartiQLParser.RULE_nullIf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullIf" ):
                listener.enterNullIf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullIf" ):
                listener.exitNullIf(self)




    def nullIf(self):

        localctx = PartiQLParser.NullIfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_nullIf)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1212
            self.match(PartiQLParser.NULLIF)
            self.state = 1213
            self.match(PartiQLParser.PAREN_LEFT)
            self.state = 1214
            self.expr()
            self.state = 1215
            self.match(PartiQLParser.COMMA)
            self.state = 1216
            self.expr()
            self.state = 1217
            self.match(PartiQLParser.PAREN_RIGHT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CoalesceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COALESCE(self):
            return self.getToken(PartiQLParser.COALESCE, 0)

        def PAREN_LEFT(self):
            return self.getToken(PartiQLParser.PAREN_LEFT, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PartiQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(PartiQLParser.ExprContext,i)


        def PAREN_RIGHT(self):
            return self.getToken(PartiQLParser.PAREN_RIGHT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PartiQLParser.COMMA)
            else:
                return self.getToken(PartiQLParser.COMMA, i)

        def getRuleIndex(self):
            return PartiQLParser.RULE_coalesce

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoalesce" ):
                listener.enterCoalesce(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoalesce" ):
                listener.exitCoalesce(self)




    def coalesce(self):

        localctx = PartiQLParser.CoalesceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_coalesce)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1219
            self.match(PartiQLParser.COALESCE)
            self.state = 1220
            self.match(PartiQLParser.PAREN_LEFT)
            self.state = 1221
            self.expr()
            self.state = 1226
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==270:
                self.state = 1222
                self.match(PartiQLParser.COMMA)
                self.state = 1223
                self.expr()
                self.state = 1228
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1229
            self.match(PartiQLParser.PAREN_RIGHT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.case = None # ExprContext
            self._expr = None # ExprContext
            self.whens = list() # of ExprContexts
            self.thens = list() # of ExprContexts
            self.else_ = None # ExprContext

        def CASE(self):
            return self.getToken(PartiQLParser.CASE, 0)

        def END(self):
            return self.getToken(PartiQLParser.END, 0)

        def WHEN(self, i:int=None):
            if i is None:
                return self.getTokens(PartiQLParser.WHEN)
            else:
                return self.getToken(PartiQLParser.WHEN, i)

        def THEN(self, i:int=None):
            if i is None:
                return self.getTokens(PartiQLParser.THEN)
            else:
                return self.getToken(PartiQLParser.THEN, i)

        def ELSE(self):
            return self.getToken(PartiQLParser.ELSE, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PartiQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(PartiQLParser.ExprContext,i)


        def getRuleIndex(self):
            return PartiQLParser.RULE_caseExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseExpr" ):
                listener.enterCaseExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseExpr" ):
                listener.exitCaseExpr(self)




    def caseExpr(self):

        localctx = PartiQLParser.CaseExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_caseExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1231
            self.match(PartiQLParser.CASE)
            self.state = 1233
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 9024796566781952) != 0) or ((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & -6051008311837327239) != 0) or ((((_la - 182)) & ~0x3f) == 0 and ((1 << (_la - 182)) & 68398559028338721) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & 9333320450659) != 0):
                self.state = 1232
                localctx.case = self.expr()


            self.state = 1240 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1235
                self.match(PartiQLParser.WHEN)
                self.state = 1236
                localctx._expr = self.expr()
                localctx.whens.append(localctx._expr)
                self.state = 1237
                self.match(PartiQLParser.THEN)
                self.state = 1238
                localctx._expr = self.expr()
                localctx.thens.append(localctx._expr)
                self.state = 1242 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==223):
                    break

            self.state = 1246
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==71:
                self.state = 1244
                self.match(PartiQLParser.ELSE)
                self.state = 1245
                localctx.else_ = self.expr()


            self.state = 1248
            self.match(PartiQLParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValuesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALUES(self):
            return self.getToken(PartiQLParser.VALUES, 0)

        def valueRow(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PartiQLParser.ValueRowContext)
            else:
                return self.getTypedRuleContext(PartiQLParser.ValueRowContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PartiQLParser.COMMA)
            else:
                return self.getToken(PartiQLParser.COMMA, i)

        def getRuleIndex(self):
            return PartiQLParser.RULE_values

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValues" ):
                listener.enterValues(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValues" ):
                listener.exitValues(self)




    def values(self):

        localctx = PartiQLParser.ValuesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_values)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1250
            self.match(PartiQLParser.VALUES)
            self.state = 1251
            self.valueRow()
            self.state = 1256
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,163,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1252
                    self.match(PartiQLParser.COMMA)
                    self.state = 1253
                    self.valueRow() 
                self.state = 1258
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,163,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueRowContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PAREN_LEFT(self):
            return self.getToken(PartiQLParser.PAREN_LEFT, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PartiQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(PartiQLParser.ExprContext,i)


        def PAREN_RIGHT(self):
            return self.getToken(PartiQLParser.PAREN_RIGHT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PartiQLParser.COMMA)
            else:
                return self.getToken(PartiQLParser.COMMA, i)

        def getRuleIndex(self):
            return PartiQLParser.RULE_valueRow

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValueRow" ):
                listener.enterValueRow(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValueRow" ):
                listener.exitValueRow(self)




    def valueRow(self):

        localctx = PartiQLParser.ValueRowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_valueRow)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1259
            self.match(PartiQLParser.PAREN_LEFT)
            self.state = 1260
            self.expr()
            self.state = 1265
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==270:
                self.state = 1261
                self.match(PartiQLParser.COMMA)
                self.state = 1262
                self.expr()
                self.state = 1267
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1268
            self.match(PartiQLParser.PAREN_RIGHT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PAREN_LEFT(self):
            return self.getToken(PartiQLParser.PAREN_LEFT, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PartiQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(PartiQLParser.ExprContext,i)


        def PAREN_RIGHT(self):
            return self.getToken(PartiQLParser.PAREN_RIGHT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PartiQLParser.COMMA)
            else:
                return self.getToken(PartiQLParser.COMMA, i)

        def getRuleIndex(self):
            return PartiQLParser.RULE_valueList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValueList" ):
                listener.enterValueList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValueList" ):
                listener.exitValueList(self)




    def valueList(self):

        localctx = PartiQLParser.ValueListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_valueList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1270
            self.match(PartiQLParser.PAREN_LEFT)
            self.state = 1271
            self.expr()
            self.state = 1274 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1272
                self.match(PartiQLParser.COMMA)
                self.state = 1273
                self.expr()
                self.state = 1276 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==270):
                    break

            self.state = 1278
            self.match(PartiQLParser.PAREN_RIGHT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SequenceConstructorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.datatype = None # Token

        def PAREN_LEFT(self):
            return self.getToken(PartiQLParser.PAREN_LEFT, 0)

        def PAREN_RIGHT(self):
            return self.getToken(PartiQLParser.PAREN_RIGHT, 0)

        def LIST(self):
            return self.getToken(PartiQLParser.LIST, 0)

        def SEXP(self):
            return self.getToken(PartiQLParser.SEXP, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PartiQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(PartiQLParser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PartiQLParser.COMMA)
            else:
                return self.getToken(PartiQLParser.COMMA, i)

        def getRuleIndex(self):
            return PartiQLParser.RULE_sequenceConstructor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSequenceConstructor" ):
                listener.enterSequenceConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSequenceConstructor" ):
                listener.exitSequenceConstructor(self)




    def sequenceConstructor(self):

        localctx = PartiQLParser.SequenceConstructorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_sequenceConstructor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1280
            localctx.datatype = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==266 or _la==267):
                localctx.datatype = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1281
            self.match(PartiQLParser.PAREN_LEFT)
            self.state = 1290
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 9024796566781952) != 0) or ((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & -6051008311837327239) != 0) or ((((_la - 182)) & ~0x3f) == 0 and ((1 << (_la - 182)) & 68398559028338721) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & 9333320450659) != 0):
                self.state = 1282
                self.expr()
                self.state = 1287
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==270:
                    self.state = 1283
                    self.match(PartiQLParser.COMMA)
                    self.state = 1284
                    self.expr()
                    self.state = 1289
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1292
            self.match(PartiQLParser.PAREN_RIGHT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubstringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUBSTRING(self):
            return self.getToken(PartiQLParser.SUBSTRING, 0)

        def PAREN_LEFT(self):
            return self.getToken(PartiQLParser.PAREN_LEFT, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PartiQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(PartiQLParser.ExprContext,i)


        def PAREN_RIGHT(self):
            return self.getToken(PartiQLParser.PAREN_RIGHT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PartiQLParser.COMMA)
            else:
                return self.getToken(PartiQLParser.COMMA, i)

        def FROM(self):
            return self.getToken(PartiQLParser.FROM, 0)

        def FOR(self):
            return self.getToken(PartiQLParser.FOR, 0)

        def getRuleIndex(self):
            return PartiQLParser.RULE_substring

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubstring" ):
                listener.enterSubstring(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubstring" ):
                listener.exitSubstring(self)




    def substring(self):

        localctx = PartiQLParser.SubstringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_substring)
        self._la = 0 # Token type
        try:
            self.state = 1320
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1294
                self.match(PartiQLParser.SUBSTRING)
                self.state = 1295
                self.match(PartiQLParser.PAREN_LEFT)
                self.state = 1296
                self.expr()
                self.state = 1303
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==270:
                    self.state = 1297
                    self.match(PartiQLParser.COMMA)
                    self.state = 1298
                    self.expr()
                    self.state = 1301
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==270:
                        self.state = 1299
                        self.match(PartiQLParser.COMMA)
                        self.state = 1300
                        self.expr()




                self.state = 1305
                self.match(PartiQLParser.PAREN_RIGHT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1307
                self.match(PartiQLParser.SUBSTRING)
                self.state = 1308
                self.match(PartiQLParser.PAREN_LEFT)
                self.state = 1309
                self.expr()
                self.state = 1316
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==95:
                    self.state = 1310
                    self.match(PartiQLParser.FROM)
                    self.state = 1311
                    self.expr()
                    self.state = 1314
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==92:
                        self.state = 1312
                        self.match(PartiQLParser.FOR)
                        self.state = 1313
                        self.expr()




                self.state = 1318
                self.match(PartiQLParser.PAREN_RIGHT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AggregateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PartiQLParser.RULE_aggregate

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class AggregateBaseContext(AggregateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.AggregateContext
            super().__init__(parser)
            self.func = None # Token
            self.copyFrom(ctx)

        def PAREN_LEFT(self):
            return self.getToken(PartiQLParser.PAREN_LEFT, 0)
        def expr(self):
            return self.getTypedRuleContext(PartiQLParser.ExprContext,0)

        def PAREN_RIGHT(self):
            return self.getToken(PartiQLParser.PAREN_RIGHT, 0)
        def COUNT(self):
            return self.getToken(PartiQLParser.COUNT, 0)
        def MAX(self):
            return self.getToken(PartiQLParser.MAX, 0)
        def MIN(self):
            return self.getToken(PartiQLParser.MIN, 0)
        def SUM(self):
            return self.getToken(PartiQLParser.SUM, 0)
        def AVG(self):
            return self.getToken(PartiQLParser.AVG, 0)
        def setQuantifierStrategy(self):
            return self.getTypedRuleContext(PartiQLParser.SetQuantifierStrategyContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregateBase" ):
                listener.enterAggregateBase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregateBase" ):
                listener.exitAggregateBase(self)


    class CountAllContext(AggregateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.AggregateContext
            super().__init__(parser)
            self.func = None # Token
            self.copyFrom(ctx)

        def PAREN_LEFT(self):
            return self.getToken(PartiQLParser.PAREN_LEFT, 0)
        def ASTERISK(self):
            return self.getToken(PartiQLParser.ASTERISK, 0)
        def PAREN_RIGHT(self):
            return self.getToken(PartiQLParser.PAREN_RIGHT, 0)
        def COUNT(self):
            return self.getToken(PartiQLParser.COUNT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCountAll" ):
                listener.enterCountAll(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCountAll" ):
                listener.exitCountAll(self)



    def aggregate(self):

        localctx = PartiQLParser.AggregateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_aggregate)
        self._la = 0 # Token type
        try:
            self.state = 1334
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,174,self._ctx)
            if la_ == 1:
                localctx = PartiQLParser.CountAllContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1322
                localctx.func = self.match(PartiQLParser.COUNT)
                self.state = 1323
                self.match(PartiQLParser.PAREN_LEFT)
                self.state = 1324
                self.match(PartiQLParser.ASTERISK)
                self.state = 1325
                self.match(PartiQLParser.PAREN_RIGHT)
                pass

            elif la_ == 2:
                localctx = PartiQLParser.AggregateBaseContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1326
                localctx.func = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==15 or _la==44 or _la==131 or _la==132 or _la==196):
                    localctx.func = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1327
                self.match(PartiQLParser.PAREN_LEFT)
                self.state = 1329
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==4 or _la==67:
                    self.state = 1328
                    self.setQuantifierStrategy()


                self.state = 1331
                self.expr()
                self.state = 1332
                self.match(PartiQLParser.PAREN_RIGHT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PartiQLParser.RULE_windowFunction

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class LagLeadFunctionContext(WindowFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.WindowFunctionContext
            super().__init__(parser)
            self.func = None # Token
            self.copyFrom(ctx)

        def PAREN_LEFT(self):
            return self.getToken(PartiQLParser.PAREN_LEFT, 0)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PartiQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(PartiQLParser.ExprContext,i)

        def PAREN_RIGHT(self):
            return self.getToken(PartiQLParser.PAREN_RIGHT, 0)
        def over(self):
            return self.getTypedRuleContext(PartiQLParser.OverContext,0)

        def LAG(self):
            return self.getToken(PartiQLParser.LAG, 0)
        def LEAD(self):
            return self.getToken(PartiQLParser.LEAD, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PartiQLParser.COMMA)
            else:
                return self.getToken(PartiQLParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLagLeadFunction" ):
                listener.enterLagLeadFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLagLeadFunction" ):
                listener.exitLagLeadFunction(self)



    def windowFunction(self):

        localctx = PartiQLParser.WindowFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_windowFunction)
        self._la = 0 # Token type
        try:
            localctx = PartiQLParser.LagLeadFunctionContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 1336
            localctx.func = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==230 or _la==231):
                localctx.func = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1337
            self.match(PartiQLParser.PAREN_LEFT)
            self.state = 1338
            self.expr()
            self.state = 1345
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==270:
                self.state = 1339
                self.match(PartiQLParser.COMMA)
                self.state = 1340
                self.expr()
                self.state = 1343
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==270:
                    self.state = 1341
                    self.match(PartiQLParser.COMMA)
                    self.state = 1342
                    self.expr()




            self.state = 1347
            self.match(PartiQLParser.PAREN_RIGHT)
            self.state = 1348
            self.over()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CastContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CAST(self):
            return self.getToken(PartiQLParser.CAST, 0)

        def PAREN_LEFT(self):
            return self.getToken(PartiQLParser.PAREN_LEFT, 0)

        def expr(self):
            return self.getTypedRuleContext(PartiQLParser.ExprContext,0)


        def AS(self):
            return self.getToken(PartiQLParser.AS, 0)

        def type_(self):
            return self.getTypedRuleContext(PartiQLParser.TypeContext,0)


        def PAREN_RIGHT(self):
            return self.getToken(PartiQLParser.PAREN_RIGHT, 0)

        def getRuleIndex(self):
            return PartiQLParser.RULE_cast

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCast" ):
                listener.enterCast(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCast" ):
                listener.exitCast(self)




    def cast(self):

        localctx = PartiQLParser.CastContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_cast)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1350
            self.match(PartiQLParser.CAST)
            self.state = 1351
            self.match(PartiQLParser.PAREN_LEFT)
            self.state = 1352
            self.expr()
            self.state = 1353
            self.match(PartiQLParser.AS)
            self.state = 1354
            self.type_()
            self.state = 1355
            self.match(PartiQLParser.PAREN_RIGHT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CanLosslessCastContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CAN_LOSSLESS_CAST(self):
            return self.getToken(PartiQLParser.CAN_LOSSLESS_CAST, 0)

        def PAREN_LEFT(self):
            return self.getToken(PartiQLParser.PAREN_LEFT, 0)

        def expr(self):
            return self.getTypedRuleContext(PartiQLParser.ExprContext,0)


        def AS(self):
            return self.getToken(PartiQLParser.AS, 0)

        def type_(self):
            return self.getTypedRuleContext(PartiQLParser.TypeContext,0)


        def PAREN_RIGHT(self):
            return self.getToken(PartiQLParser.PAREN_RIGHT, 0)

        def getRuleIndex(self):
            return PartiQLParser.RULE_canLosslessCast

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCanLosslessCast" ):
                listener.enterCanLosslessCast(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCanLosslessCast" ):
                listener.exitCanLosslessCast(self)




    def canLosslessCast(self):

        localctx = PartiQLParser.CanLosslessCastContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_canLosslessCast)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1357
            self.match(PartiQLParser.CAN_LOSSLESS_CAST)
            self.state = 1358
            self.match(PartiQLParser.PAREN_LEFT)
            self.state = 1359
            self.expr()
            self.state = 1360
            self.match(PartiQLParser.AS)
            self.state = 1361
            self.type_()
            self.state = 1362
            self.match(PartiQLParser.PAREN_RIGHT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CanCastContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CAN_CAST(self):
            return self.getToken(PartiQLParser.CAN_CAST, 0)

        def PAREN_LEFT(self):
            return self.getToken(PartiQLParser.PAREN_LEFT, 0)

        def expr(self):
            return self.getTypedRuleContext(PartiQLParser.ExprContext,0)


        def AS(self):
            return self.getToken(PartiQLParser.AS, 0)

        def type_(self):
            return self.getTypedRuleContext(PartiQLParser.TypeContext,0)


        def PAREN_RIGHT(self):
            return self.getToken(PartiQLParser.PAREN_RIGHT, 0)

        def getRuleIndex(self):
            return PartiQLParser.RULE_canCast

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCanCast" ):
                listener.enterCanCast(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCanCast" ):
                listener.exitCanCast(self)




    def canCast(self):

        localctx = PartiQLParser.CanCastContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_canCast)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1364
            self.match(PartiQLParser.CAN_CAST)
            self.state = 1365
            self.match(PartiQLParser.PAREN_LEFT)
            self.state = 1366
            self.expr()
            self.state = 1367
            self.match(PartiQLParser.AS)
            self.state = 1368
            self.type_()
            self.state = 1369
            self.match(PartiQLParser.PAREN_RIGHT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtractContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.rhs = None # ExprContext

        def EXTRACT(self):
            return self.getToken(PartiQLParser.EXTRACT, 0)

        def PAREN_LEFT(self):
            return self.getToken(PartiQLParser.PAREN_LEFT, 0)

        def IDENTIFIER(self):
            return self.getToken(PartiQLParser.IDENTIFIER, 0)

        def FROM(self):
            return self.getToken(PartiQLParser.FROM, 0)

        def PAREN_RIGHT(self):
            return self.getToken(PartiQLParser.PAREN_RIGHT, 0)

        def expr(self):
            return self.getTypedRuleContext(PartiQLParser.ExprContext,0)


        def getRuleIndex(self):
            return PartiQLParser.RULE_extract

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtract" ):
                listener.enterExtract(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtract" ):
                listener.exitExtract(self)




    def extract(self):

        localctx = PartiQLParser.ExtractContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_extract)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1371
            self.match(PartiQLParser.EXTRACT)
            self.state = 1372
            self.match(PartiQLParser.PAREN_LEFT)
            self.state = 1373
            self.match(PartiQLParser.IDENTIFIER)
            self.state = 1374
            self.match(PartiQLParser.FROM)
            self.state = 1375
            localctx.rhs = self.expr()
            self.state = 1376
            self.match(PartiQLParser.PAREN_RIGHT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TrimFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.func = None # Token
            self.mod = None # Token
            self.sub = None # ExprContext
            self.target = None # ExprContext

        def PAREN_LEFT(self):
            return self.getToken(PartiQLParser.PAREN_LEFT, 0)

        def PAREN_RIGHT(self):
            return self.getToken(PartiQLParser.PAREN_RIGHT, 0)

        def TRIM(self):
            return self.getToken(PartiQLParser.TRIM, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PartiQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(PartiQLParser.ExprContext,i)


        def FROM(self):
            return self.getToken(PartiQLParser.FROM, 0)

        def IDENTIFIER(self):
            return self.getToken(PartiQLParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return PartiQLParser.RULE_trimFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrimFunction" ):
                listener.enterTrimFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrimFunction" ):
                listener.exitTrimFunction(self)




    def trimFunction(self):

        localctx = PartiQLParser.TrimFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_trimFunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1378
            localctx.func = self.match(PartiQLParser.TRIM)
            self.state = 1379
            self.match(PartiQLParser.PAREN_LEFT)
            self.state = 1387
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,179,self._ctx)
            if la_ == 1:
                self.state = 1381
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,177,self._ctx)
                if la_ == 1:
                    self.state = 1380
                    localctx.mod = self.match(PartiQLParser.IDENTIFIER)


                self.state = 1384
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 9024796566781952) != 0) or ((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & -6051008311837327239) != 0) or ((((_la - 182)) & ~0x3f) == 0 and ((1 << (_la - 182)) & 68398559028338721) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & 9333320450659) != 0):
                    self.state = 1383
                    localctx.sub = self.expr()


                self.state = 1386
                self.match(PartiQLParser.FROM)


            self.state = 1389
            localctx.target = self.expr()
            self.state = 1390
            self.match(PartiQLParser.PAREN_RIGHT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DateFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.func = None # Token
            self.dt = None # Token

        def PAREN_LEFT(self):
            return self.getToken(PartiQLParser.PAREN_LEFT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PartiQLParser.COMMA)
            else:
                return self.getToken(PartiQLParser.COMMA, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PartiQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(PartiQLParser.ExprContext,i)


        def PAREN_RIGHT(self):
            return self.getToken(PartiQLParser.PAREN_RIGHT, 0)

        def IDENTIFIER(self):
            return self.getToken(PartiQLParser.IDENTIFIER, 0)

        def DATE_ADD(self):
            return self.getToken(PartiQLParser.DATE_ADD, 0)

        def DATE_DIFF(self):
            return self.getToken(PartiQLParser.DATE_DIFF, 0)

        def getRuleIndex(self):
            return PartiQLParser.RULE_dateFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDateFunction" ):
                listener.enterDateFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDateFunction" ):
                listener.exitDateFunction(self)




    def dateFunction(self):

        localctx = PartiQLParser.DateFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_dateFunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1392
            localctx.func = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==86 or _la==87):
                localctx.func = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1393
            self.match(PartiQLParser.PAREN_LEFT)
            self.state = 1394
            localctx.dt = self.match(PartiQLParser.IDENTIFIER)
            self.state = 1395
            self.match(PartiQLParser.COMMA)
            self.state = 1396
            self.expr()
            self.state = 1397
            self.match(PartiQLParser.COMMA)
            self.state = 1398
            self.expr()
            self.state = 1399
            self.match(PartiQLParser.PAREN_RIGHT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PartiQLParser.RULE_functionCall

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class FunctionCallIdentContext(FunctionCallContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.FunctionCallContext
            super().__init__(parser)
            self.name = None # SymbolPrimitiveContext
            self.copyFrom(ctx)

        def PAREN_LEFT(self):
            return self.getToken(PartiQLParser.PAREN_LEFT, 0)
        def PAREN_RIGHT(self):
            return self.getToken(PartiQLParser.PAREN_RIGHT, 0)
        def symbolPrimitive(self):
            return self.getTypedRuleContext(PartiQLParser.SymbolPrimitiveContext,0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PartiQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(PartiQLParser.ExprContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PartiQLParser.COMMA)
            else:
                return self.getToken(PartiQLParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallIdent" ):
                listener.enterFunctionCallIdent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallIdent" ):
                listener.exitFunctionCallIdent(self)


    class FunctionCallReservedContext(FunctionCallContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.FunctionCallContext
            super().__init__(parser)
            self.name = None # Token
            self.copyFrom(ctx)

        def PAREN_LEFT(self):
            return self.getToken(PartiQLParser.PAREN_LEFT, 0)
        def PAREN_RIGHT(self):
            return self.getToken(PartiQLParser.PAREN_RIGHT, 0)
        def CHAR_LENGTH(self):
            return self.getToken(PartiQLParser.CHAR_LENGTH, 0)
        def CHARACTER_LENGTH(self):
            return self.getToken(PartiQLParser.CHARACTER_LENGTH, 0)
        def OCTET_LENGTH(self):
            return self.getToken(PartiQLParser.OCTET_LENGTH, 0)
        def BIT_LENGTH(self):
            return self.getToken(PartiQLParser.BIT_LENGTH, 0)
        def UPPER(self):
            return self.getToken(PartiQLParser.UPPER, 0)
        def LOWER(self):
            return self.getToken(PartiQLParser.LOWER, 0)
        def SIZE(self):
            return self.getToken(PartiQLParser.SIZE, 0)
        def EXISTS(self):
            return self.getToken(PartiQLParser.EXISTS, 0)
        def COUNT(self):
            return self.getToken(PartiQLParser.COUNT, 0)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PartiQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(PartiQLParser.ExprContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PartiQLParser.COMMA)
            else:
                return self.getToken(PartiQLParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallReserved" ):
                listener.enterFunctionCallReserved(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallReserved" ):
                listener.exitFunctionCallReserved(self)



    def functionCall(self):

        localctx = PartiQLParser.FunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_functionCall)
        self._la = 0 # Token type
        try:
            self.state = 1428
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [19, 28, 29, 44, 82, 129, 145, 187, 213]:
                localctx = PartiQLParser.FunctionCallReservedContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1401
                localctx.name = self._input.LT(1)
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 17592991875072) != 0) or ((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & -9223231299366420479) != 0) or _la==187 or _la==213):
                    localctx.name = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1402
                self.match(PartiQLParser.PAREN_LEFT)
                self.state = 1411
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 9024796566781952) != 0) or ((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & -6051008311837327239) != 0) or ((((_la - 182)) & ~0x3f) == 0 and ((1 << (_la - 182)) & 68398559028338721) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & 9333320450659) != 0):
                    self.state = 1403
                    self.expr()
                    self.state = 1408
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==270:
                        self.state = 1404
                        self.match(PartiQLParser.COMMA)
                        self.state = 1405
                        self.expr()
                        self.state = 1410
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1413
                self.match(PartiQLParser.PAREN_RIGHT)
                pass
            elif token in [303, 304]:
                localctx = PartiQLParser.FunctionCallIdentContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1414
                localctx.name = self.symbolPrimitive()
                self.state = 1415
                self.match(PartiQLParser.PAREN_LEFT)
                self.state = 1424
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 9024796566781952) != 0) or ((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & -6051008311837327239) != 0) or ((((_la - 182)) & ~0x3f) == 0 and ((1 << (_la - 182)) & 68398559028338721) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & 9333320450659) != 0):
                    self.state = 1416
                    self.expr()
                    self.state = 1421
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==270:
                        self.state = 1417
                        self.match(PartiQLParser.COMMA)
                        self.state = 1418
                        self.expr()
                        self.state = 1423
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1426
                self.match(PartiQLParser.PAREN_RIGHT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PathStepContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PartiQLParser.RULE_pathStep

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PathStepDotAllContext(PathStepContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.PathStepContext
            super().__init__(parser)
            self.all_ = None # Token
            self.copyFrom(ctx)

        def PERIOD(self):
            return self.getToken(PartiQLParser.PERIOD, 0)
        def ASTERISK(self):
            return self.getToken(PartiQLParser.ASTERISK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPathStepDotAll" ):
                listener.enterPathStepDotAll(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPathStepDotAll" ):
                listener.exitPathStepDotAll(self)


    class PathStepIndexAllContext(PathStepContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.PathStepContext
            super().__init__(parser)
            self.all_ = None # Token
            self.copyFrom(ctx)

        def BRACKET_LEFT(self):
            return self.getToken(PartiQLParser.BRACKET_LEFT, 0)
        def BRACKET_RIGHT(self):
            return self.getToken(PartiQLParser.BRACKET_RIGHT, 0)
        def ASTERISK(self):
            return self.getToken(PartiQLParser.ASTERISK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPathStepIndexAll" ):
                listener.enterPathStepIndexAll(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPathStepIndexAll" ):
                listener.exitPathStepIndexAll(self)


    class PathStepIndexExprContext(PathStepContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.PathStepContext
            super().__init__(parser)
            self.key = None # ExprContext
            self.copyFrom(ctx)

        def BRACKET_LEFT(self):
            return self.getToken(PartiQLParser.BRACKET_LEFT, 0)
        def BRACKET_RIGHT(self):
            return self.getToken(PartiQLParser.BRACKET_RIGHT, 0)
        def expr(self):
            return self.getTypedRuleContext(PartiQLParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPathStepIndexExpr" ):
                listener.enterPathStepIndexExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPathStepIndexExpr" ):
                listener.exitPathStepIndexExpr(self)


    class PathStepDotExprContext(PathStepContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.PathStepContext
            super().__init__(parser)
            self.key = None # SymbolPrimitiveContext
            self.copyFrom(ctx)

        def PERIOD(self):
            return self.getToken(PartiQLParser.PERIOD, 0)
        def symbolPrimitive(self):
            return self.getTypedRuleContext(PartiQLParser.SymbolPrimitiveContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPathStepDotExpr" ):
                listener.enterPathStepDotExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPathStepDotExpr" ):
                listener.exitPathStepDotExpr(self)



    def pathStep(self):

        localctx = PartiQLParser.PathStepContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_pathStep)
        try:
            self.state = 1441
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,185,self._ctx)
            if la_ == 1:
                localctx = PartiQLParser.PathStepIndexExprContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1430
                self.match(PartiQLParser.BRACKET_LEFT)
                self.state = 1431
                localctx.key = self.expr()
                self.state = 1432
                self.match(PartiQLParser.BRACKET_RIGHT)
                pass

            elif la_ == 2:
                localctx = PartiQLParser.PathStepIndexAllContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1434
                self.match(PartiQLParser.BRACKET_LEFT)
                self.state = 1435
                localctx.all_ = self.match(PartiQLParser.ASTERISK)
                self.state = 1436
                self.match(PartiQLParser.BRACKET_RIGHT)
                pass

            elif la_ == 3:
                localctx = PartiQLParser.PathStepDotExprContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1437
                self.match(PartiQLParser.PERIOD)
                self.state = 1438
                localctx.key = self.symbolPrimitive()
                pass

            elif la_ == 4:
                localctx = PartiQLParser.PathStepDotAllContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1439
                self.match(PartiQLParser.PERIOD)
                self.state = 1440
                localctx.all_ = self.match(PartiQLParser.ASTERISK)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprGraphMatchManyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PAREN_LEFT(self):
            return self.getToken(PartiQLParser.PAREN_LEFT, 0)

        def exprPrimary(self):
            return self.getTypedRuleContext(PartiQLParser.ExprPrimaryContext,0)


        def MATCH(self):
            return self.getToken(PartiQLParser.MATCH, 0)

        def gpmlPatternList(self):
            return self.getTypedRuleContext(PartiQLParser.GpmlPatternListContext,0)


        def PAREN_RIGHT(self):
            return self.getToken(PartiQLParser.PAREN_RIGHT, 0)

        def getRuleIndex(self):
            return PartiQLParser.RULE_exprGraphMatchMany

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprGraphMatchMany" ):
                listener.enterExprGraphMatchMany(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprGraphMatchMany" ):
                listener.exitExprGraphMatchMany(self)




    def exprGraphMatchMany(self):

        localctx = PartiQLParser.ExprGraphMatchManyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_exprGraphMatchMany)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1443
            self.match(PartiQLParser.PAREN_LEFT)
            self.state = 1444
            self.exprPrimary(0)
            self.state = 1445
            self.match(PartiQLParser.MATCH)
            self.state = 1446
            self.gpmlPatternList()
            self.state = 1447
            self.match(PartiQLParser.PAREN_RIGHT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprGraphMatchOneContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprPrimary(self):
            return self.getTypedRuleContext(PartiQLParser.ExprPrimaryContext,0)


        def MATCH(self):
            return self.getToken(PartiQLParser.MATCH, 0)

        def gpmlPattern(self):
            return self.getTypedRuleContext(PartiQLParser.GpmlPatternContext,0)


        def getRuleIndex(self):
            return PartiQLParser.RULE_exprGraphMatchOne

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprGraphMatchOne" ):
                listener.enterExprGraphMatchOne(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprGraphMatchOne" ):
                listener.exitExprGraphMatchOne(self)




    def exprGraphMatchOne(self):

        localctx = PartiQLParser.ExprGraphMatchOneContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_exprGraphMatchOne)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1449
            self.exprPrimary(0)
            self.state = 1450
            self.match(PartiQLParser.MATCH)
            self.state = 1451
            self.gpmlPattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUESTION_MARK(self):
            return self.getToken(PartiQLParser.QUESTION_MARK, 0)

        def getRuleIndex(self):
            return PartiQLParser.RULE_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter" ):
                listener.enterParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter" ):
                listener.exitParameter(self)




    def parameter(self):

        localctx = PartiQLParser.ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_parameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1453
            self.match(PartiQLParser.QUESTION_MARK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarRefExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.qualifier = None # Token
            self.ident = None # Token

        def IDENTIFIER(self):
            return self.getToken(PartiQLParser.IDENTIFIER, 0)

        def IDENTIFIER_QUOTED(self):
            return self.getToken(PartiQLParser.IDENTIFIER_QUOTED, 0)

        def AT_SIGN(self):
            return self.getToken(PartiQLParser.AT_SIGN, 0)

        def getRuleIndex(self):
            return PartiQLParser.RULE_varRefExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarRefExpr" ):
                listener.enterVarRefExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarRefExpr" ):
                listener.exitVarRefExpr(self)




    def varRefExpr(self):

        localctx = PartiQLParser.VarRefExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_varRefExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1456
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==275:
                self.state = 1455
                localctx.qualifier = self.match(PartiQLParser.AT_SIGN)


            self.state = 1458
            localctx.ident = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==303 or _la==304):
                localctx.ident = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CollectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def array(self):
            return self.getTypedRuleContext(PartiQLParser.ArrayContext,0)


        def bag(self):
            return self.getTypedRuleContext(PartiQLParser.BagContext,0)


        def getRuleIndex(self):
            return PartiQLParser.RULE_collection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollection" ):
                listener.enterCollection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollection" ):
                listener.exitCollection(self)




    def collection(self):

        localctx = PartiQLParser.CollectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_collection)
        try:
            self.state = 1462
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [290]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1460
                self.array()
                pass
            elif token in [288]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1461
                self.bag()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BRACKET_LEFT(self):
            return self.getToken(PartiQLParser.BRACKET_LEFT, 0)

        def BRACKET_RIGHT(self):
            return self.getToken(PartiQLParser.BRACKET_RIGHT, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PartiQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(PartiQLParser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PartiQLParser.COMMA)
            else:
                return self.getToken(PartiQLParser.COMMA, i)

        def getRuleIndex(self):
            return PartiQLParser.RULE_array

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray" ):
                listener.enterArray(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray" ):
                listener.exitArray(self)




    def array(self):

        localctx = PartiQLParser.ArrayContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_array)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1464
            self.match(PartiQLParser.BRACKET_LEFT)
            self.state = 1473
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 9024796566781952) != 0) or ((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & -6051008311837327239) != 0) or ((((_la - 182)) & ~0x3f) == 0 and ((1 << (_la - 182)) & 68398559028338721) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & 9333320450659) != 0):
                self.state = 1465
                self.expr()
                self.state = 1470
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==270:
                    self.state = 1466
                    self.match(PartiQLParser.COMMA)
                    self.state = 1467
                    self.expr()
                    self.state = 1472
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1475
            self.match(PartiQLParser.BRACKET_RIGHT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BagContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANGLE_DOUBLE_LEFT(self):
            return self.getToken(PartiQLParser.ANGLE_DOUBLE_LEFT, 0)

        def ANGLE_DOUBLE_RIGHT(self):
            return self.getToken(PartiQLParser.ANGLE_DOUBLE_RIGHT, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PartiQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(PartiQLParser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PartiQLParser.COMMA)
            else:
                return self.getToken(PartiQLParser.COMMA, i)

        def getRuleIndex(self):
            return PartiQLParser.RULE_bag

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBag" ):
                listener.enterBag(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBag" ):
                listener.exitBag(self)




    def bag(self):

        localctx = PartiQLParser.BagContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_bag)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1477
            self.match(PartiQLParser.ANGLE_DOUBLE_LEFT)
            self.state = 1486
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 9024796566781952) != 0) or ((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & -6051008311837327239) != 0) or ((((_la - 182)) & ~0x3f) == 0 and ((1 << (_la - 182)) & 68398559028338721) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & 9333320450659) != 0):
                self.state = 1478
                self.expr()
                self.state = 1483
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==270:
                    self.state = 1479
                    self.match(PartiQLParser.COMMA)
                    self.state = 1480
                    self.expr()
                    self.state = 1485
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1488
            self.match(PartiQLParser.ANGLE_DOUBLE_RIGHT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TupleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BRACE_LEFT(self):
            return self.getToken(PartiQLParser.BRACE_LEFT, 0)

        def BRACE_RIGHT(self):
            return self.getToken(PartiQLParser.BRACE_RIGHT, 0)

        def pair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PartiQLParser.PairContext)
            else:
                return self.getTypedRuleContext(PartiQLParser.PairContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PartiQLParser.COMMA)
            else:
                return self.getToken(PartiQLParser.COMMA, i)

        def getRuleIndex(self):
            return PartiQLParser.RULE_tuple

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTuple" ):
                listener.enterTuple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTuple" ):
                listener.exitTuple(self)




    def tuple_(self):

        localctx = PartiQLParser.TupleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_tuple)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1490
            self.match(PartiQLParser.BRACE_LEFT)
            self.state = 1499
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 9024796566781952) != 0) or ((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & -6051008311837327239) != 0) or ((((_la - 182)) & ~0x3f) == 0 and ((1 << (_la - 182)) & 68398559028338721) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & 9333320450659) != 0):
                self.state = 1491
                self.pair()
                self.state = 1496
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==270:
                    self.state = 1492
                    self.match(PartiQLParser.COMMA)
                    self.state = 1493
                    self.pair()
                    self.state = 1498
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1501
            self.match(PartiQLParser.BRACE_RIGHT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.lhs = None # ExprContext
            self.rhs = None # ExprContext

        def COLON(self):
            return self.getToken(PartiQLParser.COLON, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PartiQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(PartiQLParser.ExprContext,i)


        def getRuleIndex(self):
            return PartiQLParser.RULE_pair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPair" ):
                listener.enterPair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPair" ):
                listener.exitPair(self)




    def pair(self):

        localctx = PartiQLParser.PairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_pair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1503
            localctx.lhs = self.expr()
            self.state = 1504
            self.match(PartiQLParser.COLON)
            self.state = 1505
            localctx.rhs = self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PartiQLParser.RULE_literal

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class LiteralMissingContext(LiteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.LiteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MISSING(self):
            return self.getToken(PartiQLParser.MISSING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralMissing" ):
                listener.enterLiteralMissing(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralMissing" ):
                listener.exitLiteralMissing(self)


    class LiteralIntegerContext(LiteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.LiteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LITERAL_INTEGER(self):
            return self.getToken(PartiQLParser.LITERAL_INTEGER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralInteger" ):
                listener.enterLiteralInteger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralInteger" ):
                listener.exitLiteralInteger(self)


    class LiteralDateContext(LiteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.LiteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DATE(self):
            return self.getToken(PartiQLParser.DATE, 0)
        def LITERAL_STRING(self):
            return self.getToken(PartiQLParser.LITERAL_STRING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralDate" ):
                listener.enterLiteralDate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralDate" ):
                listener.exitLiteralDate(self)


    class LiteralFalseContext(LiteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.LiteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FALSE(self):
            return self.getToken(PartiQLParser.FALSE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralFalse" ):
                listener.enterLiteralFalse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralFalse" ):
                listener.exitLiteralFalse(self)


    class LiteralStringContext(LiteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.LiteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LITERAL_STRING(self):
            return self.getToken(PartiQLParser.LITERAL_STRING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralString" ):
                listener.enterLiteralString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralString" ):
                listener.exitLiteralString(self)


    class LiteralDecimalContext(LiteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.LiteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LITERAL_DECIMAL(self):
            return self.getToken(PartiQLParser.LITERAL_DECIMAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralDecimal" ):
                listener.enterLiteralDecimal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralDecimal" ):
                listener.exitLiteralDecimal(self)


    class LiteralNullContext(LiteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.LiteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NULL(self):
            return self.getToken(PartiQLParser.NULL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralNull" ):
                listener.enterLiteralNull(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralNull" ):
                listener.exitLiteralNull(self)


    class LiteralIonContext(LiteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.LiteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ION_CLOSURE(self):
            return self.getToken(PartiQLParser.ION_CLOSURE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralIon" ):
                listener.enterLiteralIon(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralIon" ):
                listener.exitLiteralIon(self)


    class LiteralTrueContext(LiteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.LiteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TRUE(self):
            return self.getToken(PartiQLParser.TRUE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralTrue" ):
                listener.enterLiteralTrue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralTrue" ):
                listener.exitLiteralTrue(self)


    class LiteralTimeContext(LiteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.LiteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TIME(self, i:int=None):
            if i is None:
                return self.getTokens(PartiQLParser.TIME)
            else:
                return self.getToken(PartiQLParser.TIME, i)
        def LITERAL_STRING(self):
            return self.getToken(PartiQLParser.LITERAL_STRING, 0)
        def PAREN_LEFT(self):
            return self.getToken(PartiQLParser.PAREN_LEFT, 0)
        def LITERAL_INTEGER(self):
            return self.getToken(PartiQLParser.LITERAL_INTEGER, 0)
        def PAREN_RIGHT(self):
            return self.getToken(PartiQLParser.PAREN_RIGHT, 0)
        def WITH(self):
            return self.getToken(PartiQLParser.WITH, 0)
        def ZONE(self):
            return self.getToken(PartiQLParser.ZONE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralTime" ):
                listener.enterLiteralTime(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralTime" ):
                listener.exitLiteralTime(self)



    def literal(self):

        localctx = PartiQLParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_literal)
        self._la = 0 # Token type
        try:
            self.state = 1529
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [141]:
                localctx = PartiQLParser.LiteralNullContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1507
                self.match(PartiQLParser.NULL)
                pass
            elif token in [236]:
                localctx = PartiQLParser.LiteralMissingContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1508
                self.match(PartiQLParser.MISSING)
                pass
            elif token in [208]:
                localctx = PartiQLParser.LiteralTrueContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1509
                self.match(PartiQLParser.TRUE)
                pass
            elif token in [88]:
                localctx = PartiQLParser.LiteralFalseContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1510
                self.match(PartiQLParser.FALSE)
                pass
            elif token in [300]:
                localctx = PartiQLParser.LiteralStringContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1511
                self.match(PartiQLParser.LITERAL_STRING)
                pass
            elif token in [301]:
                localctx = PartiQLParser.LiteralIntegerContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1512
                self.match(PartiQLParser.LITERAL_INTEGER)
                pass
            elif token in [302]:
                localctx = PartiQLParser.LiteralDecimalContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 1513
                self.match(PartiQLParser.LITERAL_DECIMAL)
                pass
            elif token in [309]:
                localctx = PartiQLParser.LiteralIonContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 1514
                self.match(PartiQLParser.ION_CLOSURE)
                pass
            elif token in [53]:
                localctx = PartiQLParser.LiteralDateContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 1515
                self.match(PartiQLParser.DATE)
                self.state = 1516
                self.match(PartiQLParser.LITERAL_STRING)
                pass
            elif token in [201]:
                localctx = PartiQLParser.LiteralTimeContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 1517
                self.match(PartiQLParser.TIME)
                self.state = 1521
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==294:
                    self.state = 1518
                    self.match(PartiQLParser.PAREN_LEFT)
                    self.state = 1519
                    self.match(PartiQLParser.LITERAL_INTEGER)
                    self.state = 1520
                    self.match(PartiQLParser.PAREN_RIGHT)


                self.state = 1526
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==226:
                    self.state = 1523
                    self.match(PartiQLParser.WITH)
                    self.state = 1524
                    self.match(PartiQLParser.TIME)
                    self.state = 1525
                    self.match(PartiQLParser.ZONE)


                self.state = 1528
                self.match(PartiQLParser.LITERAL_STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PartiQLParser.RULE_type

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TypeArgSingleContext(TypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.TypeContext
            super().__init__(parser)
            self.datatype = None # Token
            self.arg0 = None # Token
            self.copyFrom(ctx)

        def CHARACTER(self):
            return self.getToken(PartiQLParser.CHARACTER, 0)
        def CHAR(self):
            return self.getToken(PartiQLParser.CHAR, 0)
        def FLOAT(self):
            return self.getToken(PartiQLParser.FLOAT, 0)
        def VARCHAR(self):
            return self.getToken(PartiQLParser.VARCHAR, 0)
        def PAREN_LEFT(self):
            return self.getToken(PartiQLParser.PAREN_LEFT, 0)
        def PAREN_RIGHT(self):
            return self.getToken(PartiQLParser.PAREN_RIGHT, 0)
        def LITERAL_INTEGER(self):
            return self.getToken(PartiQLParser.LITERAL_INTEGER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeArgSingle" ):
                listener.enterTypeArgSingle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeArgSingle" ):
                listener.exitTypeArgSingle(self)


    class TypeAtomicContext(TypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.TypeContext
            super().__init__(parser)
            self.datatype = None # Token
            self.copyFrom(ctx)

        def NULL(self):
            return self.getToken(PartiQLParser.NULL, 0)
        def BOOL(self):
            return self.getToken(PartiQLParser.BOOL, 0)
        def BOOLEAN(self):
            return self.getToken(PartiQLParser.BOOLEAN, 0)
        def SMALLINT(self):
            return self.getToken(PartiQLParser.SMALLINT, 0)
        def INTEGER2(self):
            return self.getToken(PartiQLParser.INTEGER2, 0)
        def INT2(self):
            return self.getToken(PartiQLParser.INT2, 0)
        def INTEGER(self):
            return self.getToken(PartiQLParser.INTEGER, 0)
        def INT(self):
            return self.getToken(PartiQLParser.INT, 0)
        def INTEGER4(self):
            return self.getToken(PartiQLParser.INTEGER4, 0)
        def INT4(self):
            return self.getToken(PartiQLParser.INT4, 0)
        def INTEGER8(self):
            return self.getToken(PartiQLParser.INTEGER8, 0)
        def INT8(self):
            return self.getToken(PartiQLParser.INT8, 0)
        def BIGINT(self):
            return self.getToken(PartiQLParser.BIGINT, 0)
        def REAL(self):
            return self.getToken(PartiQLParser.REAL, 0)
        def TIMESTAMP(self):
            return self.getToken(PartiQLParser.TIMESTAMP, 0)
        def CHAR(self):
            return self.getToken(PartiQLParser.CHAR, 0)
        def CHARACTER(self):
            return self.getToken(PartiQLParser.CHARACTER, 0)
        def MISSING(self):
            return self.getToken(PartiQLParser.MISSING, 0)
        def STRING(self):
            return self.getToken(PartiQLParser.STRING, 0)
        def SYMBOL(self):
            return self.getToken(PartiQLParser.SYMBOL, 0)
        def BLOB(self):
            return self.getToken(PartiQLParser.BLOB, 0)
        def CLOB(self):
            return self.getToken(PartiQLParser.CLOB, 0)
        def DATE(self):
            return self.getToken(PartiQLParser.DATE, 0)
        def STRUCT(self):
            return self.getToken(PartiQLParser.STRUCT, 0)
        def TUPLE(self):
            return self.getToken(PartiQLParser.TUPLE, 0)
        def LIST(self):
            return self.getToken(PartiQLParser.LIST, 0)
        def SEXP(self):
            return self.getToken(PartiQLParser.SEXP, 0)
        def BAG(self):
            return self.getToken(PartiQLParser.BAG, 0)
        def ANY(self):
            return self.getToken(PartiQLParser.ANY, 0)
        def PRECISION(self):
            return self.getToken(PartiQLParser.PRECISION, 0)
        def DOUBLE(self):
            return self.getToken(PartiQLParser.DOUBLE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeAtomic" ):
                listener.enterTypeAtomic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeAtomic" ):
                listener.exitTypeAtomic(self)


    class TypeArgDoubleContext(TypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.TypeContext
            super().__init__(parser)
            self.datatype = None # Token
            self.arg0 = None # Token
            self.arg1 = None # Token
            self.copyFrom(ctx)

        def DECIMAL(self):
            return self.getToken(PartiQLParser.DECIMAL, 0)
        def DEC(self):
            return self.getToken(PartiQLParser.DEC, 0)
        def NUMERIC(self):
            return self.getToken(PartiQLParser.NUMERIC, 0)
        def PAREN_LEFT(self):
            return self.getToken(PartiQLParser.PAREN_LEFT, 0)
        def PAREN_RIGHT(self):
            return self.getToken(PartiQLParser.PAREN_RIGHT, 0)
        def LITERAL_INTEGER(self, i:int=None):
            if i is None:
                return self.getTokens(PartiQLParser.LITERAL_INTEGER)
            else:
                return self.getToken(PartiQLParser.LITERAL_INTEGER, i)
        def COMMA(self):
            return self.getToken(PartiQLParser.COMMA, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeArgDouble" ):
                listener.enterTypeArgDouble(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeArgDouble" ):
                listener.exitTypeArgDouble(self)


    class TypeTimeZoneContext(TypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.TypeContext
            super().__init__(parser)
            self.precision = None # Token
            self.copyFrom(ctx)

        def TIME(self, i:int=None):
            if i is None:
                return self.getTokens(PartiQLParser.TIME)
            else:
                return self.getToken(PartiQLParser.TIME, i)
        def PAREN_LEFT(self):
            return self.getToken(PartiQLParser.PAREN_LEFT, 0)
        def PAREN_RIGHT(self):
            return self.getToken(PartiQLParser.PAREN_RIGHT, 0)
        def WITH(self):
            return self.getToken(PartiQLParser.WITH, 0)
        def ZONE(self):
            return self.getToken(PartiQLParser.ZONE, 0)
        def LITERAL_INTEGER(self):
            return self.getToken(PartiQLParser.LITERAL_INTEGER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeTimeZone" ):
                listener.enterTypeTimeZone(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeTimeZone" ):
                listener.exitTypeTimeZone(self)


    class TypeCustomContext(TypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.TypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def symbolPrimitive(self):
            return self.getTypedRuleContext(PartiQLParser.SymbolPrimitiveContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeCustom" ):
                listener.enterTypeCustom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeCustom" ):
                listener.exitTypeCustom(self)


    class TypeVarCharContext(TypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PartiQLParser.TypeContext
            super().__init__(parser)
            self.arg0 = None # Token
            self.copyFrom(ctx)

        def CHARACTER(self):
            return self.getToken(PartiQLParser.CHARACTER, 0)
        def VARYING(self):
            return self.getToken(PartiQLParser.VARYING, 0)
        def PAREN_LEFT(self):
            return self.getToken(PartiQLParser.PAREN_LEFT, 0)
        def PAREN_RIGHT(self):
            return self.getToken(PartiQLParser.PAREN_RIGHT, 0)
        def LITERAL_INTEGER(self):
            return self.getToken(PartiQLParser.LITERAL_INTEGER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeVarChar" ):
                listener.enterTypeVarChar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeVarChar" ):
                listener.exitTypeVarChar(self)



    def type_(self):

        localctx = PartiQLParser.TypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_type)
        self._la = 0 # Token type
        try:
            self.state = 1569
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,203,self._ctx)
            if la_ == 1:
                localctx = PartiQLParser.TypeAtomicContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1531
                localctx.datatype = self._input.LT(1)
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 9007199456067840) != 0) or ((((_la - 113)) & ~0x3f) == 0 and ((1 << (_la - 113)) & 144115188344291331) != 0) or ((((_la - 188)) & ~0x3f) == 0 and ((1 << (_la - 188)) & -9223090561878048767) != 0) or ((((_la - 252)) & ~0x3f) == 0 and ((1 << (_la - 252)) & 131071) != 0)):
                    localctx.datatype = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                localctx = PartiQLParser.TypeAtomicContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1532
                localctx.datatype = self.match(PartiQLParser.DOUBLE)
                self.state = 1533
                self.match(PartiQLParser.PRECISION)
                pass

            elif la_ == 3:
                localctx = PartiQLParser.TypeArgSingleContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1534
                localctx.datatype = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==26 or _la==27 or _la==91 or _la==220):
                    localctx.datatype = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1538
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,197,self._ctx)
                if la_ == 1:
                    self.state = 1535
                    self.match(PartiQLParser.PAREN_LEFT)
                    self.state = 1536
                    localctx.arg0 = self.match(PartiQLParser.LITERAL_INTEGER)
                    self.state = 1537
                    self.match(PartiQLParser.PAREN_RIGHT)


                pass

            elif la_ == 4:
                localctx = PartiQLParser.TypeVarCharContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1540
                self.match(PartiQLParser.CHARACTER)
                self.state = 1541
                self.match(PartiQLParser.VARYING)
                self.state = 1545
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,198,self._ctx)
                if la_ == 1:
                    self.state = 1542
                    self.match(PartiQLParser.PAREN_LEFT)
                    self.state = 1543
                    localctx.arg0 = self.match(PartiQLParser.LITERAL_INTEGER)
                    self.state = 1544
                    self.match(PartiQLParser.PAREN_RIGHT)


                pass

            elif la_ == 5:
                localctx = PartiQLParser.TypeArgDoubleContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1547
                localctx.datatype = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==55 or _la==56 or _la==144):
                    localctx.datatype = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1555
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,200,self._ctx)
                if la_ == 1:
                    self.state = 1548
                    self.match(PartiQLParser.PAREN_LEFT)
                    self.state = 1549
                    localctx.arg0 = self.match(PartiQLParser.LITERAL_INTEGER)
                    self.state = 1552
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==270:
                        self.state = 1550
                        self.match(PartiQLParser.COMMA)
                        self.state = 1551
                        localctx.arg1 = self.match(PartiQLParser.LITERAL_INTEGER)


                    self.state = 1554
                    self.match(PartiQLParser.PAREN_RIGHT)


                pass

            elif la_ == 6:
                localctx = PartiQLParser.TypeTimeZoneContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1557
                self.match(PartiQLParser.TIME)
                self.state = 1561
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,201,self._ctx)
                if la_ == 1:
                    self.state = 1558
                    self.match(PartiQLParser.PAREN_LEFT)
                    self.state = 1559
                    localctx.precision = self.match(PartiQLParser.LITERAL_INTEGER)
                    self.state = 1560
                    self.match(PartiQLParser.PAREN_RIGHT)


                self.state = 1566
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,202,self._ctx)
                if la_ == 1:
                    self.state = 1563
                    self.match(PartiQLParser.WITH)
                    self.state = 1564
                    self.match(PartiQLParser.TIME)
                    self.state = 1565
                    self.match(PartiQLParser.ZONE)


                pass

            elif la_ == 7:
                localctx = PartiQLParser.TypeCustomContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 1568
                self.symbolPrimitive()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[69] = self.tableReference_sempred
        self._predicates[77] = self.exprBagOp_sempred
        self._predicates[79] = self.exprOr_sempred
        self._predicates[80] = self.exprAnd_sempred
        self._predicates[82] = self.exprPredicate_sempred
        self._predicates[83] = self.mathOp00_sempred
        self._predicates[84] = self.mathOp01_sempred
        self._predicates[85] = self.mathOp02_sempred
        self._predicates[87] = self.exprPrimary_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def tableReference_sempred(self, localctx:TableReferenceContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 3)
         

    def exprBagOp_sempred(self, localctx:ExprBagOpContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 2)
         

    def exprOr_sempred(self, localctx:ExprOrContext, predIndex:int):
            if predIndex == 6:
                return self.precpred(self._ctx, 2)
         

    def exprAnd_sempred(self, localctx:ExprAndContext, predIndex:int):
            if predIndex == 7:
                return self.precpred(self._ctx, 2)
         

    def exprPredicate_sempred(self, localctx:ExprPredicateContext, predIndex:int):
            if predIndex == 8:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 2)
         

    def mathOp00_sempred(self, localctx:MathOp00Context, predIndex:int):
            if predIndex == 14:
                return self.precpred(self._ctx, 2)
         

    def mathOp01_sempred(self, localctx:MathOp01Context, predIndex:int):
            if predIndex == 15:
                return self.precpred(self._ctx, 2)
         

    def mathOp02_sempred(self, localctx:MathOp02Context, predIndex:int):
            if predIndex == 16:
                return self.precpred(self._ctx, 2)
         

    def exprPrimary_sempred(self, localctx:ExprPrimaryContext, predIndex:int):
            if predIndex == 17:
                return self.precpred(self._ctx, 6)
         




